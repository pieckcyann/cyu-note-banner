/*
- THIS IS A GENERATED/BUNDLED FILE BY ESBUILD -
Please visit the repository linked to view the source code:
https://github.com/noatpad/obsidian-banners
*/
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/@sindresorhus/is/dist/index.js
var require_dist = __commonJS({
  "node_modules/@sindresorhus/is/dist/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var typedArrayTypeNames = [
      "Int8Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Int16Array",
      "Uint16Array",
      "Int32Array",
      "Uint32Array",
      "Float32Array",
      "Float64Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
    function isTypedArrayName(name) {
      return typedArrayTypeNames.includes(name);
    }
    var objectTypeNames = [
      "Function",
      "Generator",
      "AsyncGenerator",
      "GeneratorFunction",
      "AsyncGeneratorFunction",
      "AsyncFunction",
      "Observable",
      "Array",
      "Buffer",
      "Blob",
      "Object",
      "RegExp",
      "Date",
      "Error",
      "Map",
      "Set",
      "WeakMap",
      "WeakSet",
      "ArrayBuffer",
      "SharedArrayBuffer",
      "DataView",
      "Promise",
      "URL",
      "FormData",
      "URLSearchParams",
      "HTMLElement",
      ...typedArrayTypeNames
    ];
    function isObjectTypeName(name) {
      return objectTypeNames.includes(name);
    }
    var primitiveTypeNames = [
      "null",
      "undefined",
      "string",
      "number",
      "bigint",
      "boolean",
      "symbol"
    ];
    function isPrimitiveTypeName(name) {
      return primitiveTypeNames.includes(name);
    }
    function isOfType(type) {
      return (value) => typeof value === type;
    }
    var { toString } = Object.prototype;
    var getObjectType = (value) => {
      const objectTypeName = toString.call(value).slice(8, -1);
      if (/HTML\w+Element/.test(objectTypeName) && is.domElement(value)) {
        return "HTMLElement";
      }
      if (isObjectTypeName(objectTypeName)) {
        return objectTypeName;
      }
      return void 0;
    };
    var isObjectOfType = (type) => (value) => getObjectType(value) === type;
    function is(value) {
      if (value === null) {
        return "null";
      }
      switch (typeof value) {
        case "undefined":
          return "undefined";
        case "string":
          return "string";
        case "number":
          return "number";
        case "boolean":
          return "boolean";
        case "function":
          return "Function";
        case "bigint":
          return "bigint";
        case "symbol":
          return "symbol";
        default:
      }
      if (is.observable(value)) {
        return "Observable";
      }
      if (is.array(value)) {
        return "Array";
      }
      if (is.buffer(value)) {
        return "Buffer";
      }
      const tagType = getObjectType(value);
      if (tagType) {
        return tagType;
      }
      if (value instanceof String || value instanceof Boolean || value instanceof Number) {
        throw new TypeError("Please don't use object wrappers for primitive types");
      }
      return "Object";
    }
    is.undefined = isOfType("undefined");
    is.string = isOfType("string");
    var isNumberType = isOfType("number");
    is.number = (value) => isNumberType(value) && !is.nan(value);
    is.bigint = isOfType("bigint");
    is.function_ = isOfType("function");
    is.null_ = (value) => value === null;
    is.class_ = (value) => is.function_(value) && value.toString().startsWith("class ");
    is.boolean = (value) => value === true || value === false;
    is.symbol = isOfType("symbol");
    is.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));
    is.array = (value, assertion) => {
      if (!Array.isArray(value)) {
        return false;
      }
      if (!is.function_(assertion)) {
        return true;
      }
      return value.every(assertion);
    };
    is.buffer = (value) => {
      var _a, _b, _c, _d;
      return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;
    };
    is.blob = (value) => isObjectOfType("Blob")(value);
    is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);
    is.object = (value) => !is.null_(value) && (typeof value === "object" || is.function_(value));
    is.iterable = (value) => {
      var _a;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]);
    };
    is.asyncIterable = (value) => {
      var _a;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]);
    };
    is.generator = (value) => {
      var _a, _b;
      return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.throw);
    };
    is.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);
    is.nativePromise = (value) => isObjectOfType("Promise")(value);
    var hasPromiseAPI = (value) => {
      var _a, _b;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);
    };
    is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);
    is.generatorFunction = isObjectOfType("GeneratorFunction");
    is.asyncGeneratorFunction = (value) => getObjectType(value) === "AsyncGeneratorFunction";
    is.asyncFunction = (value) => getObjectType(value) === "AsyncFunction";
    is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty("prototype");
    is.regExp = isObjectOfType("RegExp");
    is.date = isObjectOfType("Date");
    is.error = isObjectOfType("Error");
    is.map = (value) => isObjectOfType("Map")(value);
    is.set = (value) => isObjectOfType("Set")(value);
    is.weakMap = (value) => isObjectOfType("WeakMap")(value);
    is.weakSet = (value) => isObjectOfType("WeakSet")(value);
    is.int8Array = isObjectOfType("Int8Array");
    is.uint8Array = isObjectOfType("Uint8Array");
    is.uint8ClampedArray = isObjectOfType("Uint8ClampedArray");
    is.int16Array = isObjectOfType("Int16Array");
    is.uint16Array = isObjectOfType("Uint16Array");
    is.int32Array = isObjectOfType("Int32Array");
    is.uint32Array = isObjectOfType("Uint32Array");
    is.float32Array = isObjectOfType("Float32Array");
    is.float64Array = isObjectOfType("Float64Array");
    is.bigInt64Array = isObjectOfType("BigInt64Array");
    is.bigUint64Array = isObjectOfType("BigUint64Array");
    is.arrayBuffer = isObjectOfType("ArrayBuffer");
    is.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer");
    is.dataView = isObjectOfType("DataView");
    is.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);
    is.directInstanceOf = (instance18, class_) => Object.getPrototypeOf(instance18) === class_.prototype;
    is.urlInstance = (value) => isObjectOfType("URL")(value);
    is.urlString = (value) => {
      if (!is.string(value)) {
        return false;
      }
      try {
        new URL(value);
        return true;
      } catch (_a) {
        return false;
      }
    };
    is.truthy = (value) => Boolean(value);
    is.falsy = (value) => !value;
    is.nan = (value) => Number.isNaN(value);
    is.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);
    is.integer = (value) => Number.isInteger(value);
    is.safeInteger = (value) => Number.isSafeInteger(value);
    is.plainObject = (value) => {
      if (toString.call(value) !== "[object Object]") {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return prototype === null || prototype === Object.getPrototypeOf({});
    };
    is.typedArray = (value) => isTypedArrayName(getObjectType(value));
    var isValidLength = (value) => is.safeInteger(value) && value >= 0;
    is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
    is.inRange = (value, range) => {
      if (is.number(range)) {
        return value >= Math.min(0, range) && value <= Math.max(range, 0);
      }
      if (is.array(range) && range.length === 2) {
        return value >= Math.min(...range) && value <= Math.max(...range);
      }
      throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);
    };
    var NODE_TYPE_ELEMENT = 1;
    var DOM_PROPERTIES_TO_CHECK = [
      "innerHTML",
      "ownerDocument",
      "style",
      "attributes",
      "nodeValue"
    ];
    is.domElement = (value) => {
      return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every((property) => property in value);
    };
    is.observable = (value) => {
      var _a, _b, _c, _d;
      if (!value) {
        return false;
      }
      if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {
        return true;
      }
      if (value === ((_d = (_c = value)["@@observable"]) === null || _d === void 0 ? void 0 : _d.call(_c))) {
        return true;
      }
      return false;
    };
    is.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);
    is.infinite = (value) => value === Infinity || value === -Infinity;
    var isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;
    is.evenInteger = isAbsoluteMod2(0);
    is.oddInteger = isAbsoluteMod2(1);
    is.emptyArray = (value) => is.array(value) && value.length === 0;
    is.nonEmptyArray = (value) => is.array(value) && value.length > 0;
    is.emptyString = (value) => is.string(value) && value.length === 0;
    var isWhiteSpaceString = (value) => is.string(value) && !/\S/.test(value);
    is.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);
    is.nonEmptyString = (value) => is.string(value) && value.length > 0;
    is.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);
    is.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
    is.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
    is.emptySet = (value) => is.set(value) && value.size === 0;
    is.nonEmptySet = (value) => is.set(value) && value.size > 0;
    is.emptyMap = (value) => is.map(value) && value.size === 0;
    is.nonEmptyMap = (value) => is.map(value) && value.size > 0;
    is.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);
    is.formData = (value) => isObjectOfType("FormData")(value);
    is.urlSearchParams = (value) => isObjectOfType("URLSearchParams")(value);
    var predicateOnArray = (method, predicate, values) => {
      if (!is.function_(predicate)) {
        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);
      }
      if (values.length === 0) {
        throw new TypeError("Invalid number of values");
      }
      return method.call(values, predicate);
    };
    is.any = (predicate, ...values) => {
      const predicates = is.array(predicate) ? predicate : [predicate];
      return predicates.some((singlePredicate) => predicateOnArray(Array.prototype.some, singlePredicate, values));
    };
    is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);
    var assertType = (condition, description, value, options = {}) => {
      if (!condition) {
        const { multipleValues } = options;
        const valuesMessage = multipleValues ? `received values of types ${[
          ...new Set(value.map((singleValue) => `\`${is(singleValue)}\``))
        ].join(", ")}` : `received value of type \`${is(value)}\``;
        throw new TypeError(`Expected value which is \`${description}\`, ${valuesMessage}.`);
      }
    };
    exports.assert = {
      // Unknowns.
      undefined: (value) => assertType(is.undefined(value), "undefined", value),
      string: (value) => assertType(is.string(value), "string", value),
      number: (value) => assertType(is.number(value), "number", value),
      bigint: (value) => assertType(is.bigint(value), "bigint", value),
      // eslint-disable-next-line @typescript-eslint/ban-types
      function_: (value) => assertType(is.function_(value), "Function", value),
      null_: (value) => assertType(is.null_(value), "null", value),
      class_: (value) => assertType(is.class_(value), "Class", value),
      boolean: (value) => assertType(is.boolean(value), "boolean", value),
      symbol: (value) => assertType(is.symbol(value), "symbol", value),
      numericString: (value) => assertType(is.numericString(value), "string with a number", value),
      array: (value, assertion) => {
        const assert = assertType;
        assert(is.array(value), "Array", value);
        if (assertion) {
          value.forEach(assertion);
        }
      },
      buffer: (value) => assertType(is.buffer(value), "Buffer", value),
      blob: (value) => assertType(is.blob(value), "Blob", value),
      nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), "null or undefined", value),
      object: (value) => assertType(is.object(value), "Object", value),
      iterable: (value) => assertType(is.iterable(value), "Iterable", value),
      asyncIterable: (value) => assertType(is.asyncIterable(value), "AsyncIterable", value),
      generator: (value) => assertType(is.generator(value), "Generator", value),
      asyncGenerator: (value) => assertType(is.asyncGenerator(value), "AsyncGenerator", value),
      nativePromise: (value) => assertType(is.nativePromise(value), "native Promise", value),
      promise: (value) => assertType(is.promise(value), "Promise", value),
      generatorFunction: (value) => assertType(is.generatorFunction(value), "GeneratorFunction", value),
      asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), "AsyncGeneratorFunction", value),
      // eslint-disable-next-line @typescript-eslint/ban-types
      asyncFunction: (value) => assertType(is.asyncFunction(value), "AsyncFunction", value),
      // eslint-disable-next-line @typescript-eslint/ban-types
      boundFunction: (value) => assertType(is.boundFunction(value), "Function", value),
      regExp: (value) => assertType(is.regExp(value), "RegExp", value),
      date: (value) => assertType(is.date(value), "Date", value),
      error: (value) => assertType(is.error(value), "Error", value),
      map: (value) => assertType(is.map(value), "Map", value),
      set: (value) => assertType(is.set(value), "Set", value),
      weakMap: (value) => assertType(is.weakMap(value), "WeakMap", value),
      weakSet: (value) => assertType(is.weakSet(value), "WeakSet", value),
      int8Array: (value) => assertType(is.int8Array(value), "Int8Array", value),
      uint8Array: (value) => assertType(is.uint8Array(value), "Uint8Array", value),
      uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), "Uint8ClampedArray", value),
      int16Array: (value) => assertType(is.int16Array(value), "Int16Array", value),
      uint16Array: (value) => assertType(is.uint16Array(value), "Uint16Array", value),
      int32Array: (value) => assertType(is.int32Array(value), "Int32Array", value),
      uint32Array: (value) => assertType(is.uint32Array(value), "Uint32Array", value),
      float32Array: (value) => assertType(is.float32Array(value), "Float32Array", value),
      float64Array: (value) => assertType(is.float64Array(value), "Float64Array", value),
      bigInt64Array: (value) => assertType(is.bigInt64Array(value), "BigInt64Array", value),
      bigUint64Array: (value) => assertType(is.bigUint64Array(value), "BigUint64Array", value),
      arrayBuffer: (value) => assertType(is.arrayBuffer(value), "ArrayBuffer", value),
      sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), "SharedArrayBuffer", value),
      dataView: (value) => assertType(is.dataView(value), "DataView", value),
      enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), "EnumCase", value),
      urlInstance: (value) => assertType(is.urlInstance(value), "URL", value),
      urlString: (value) => assertType(is.urlString(value), "string with a URL", value),
      truthy: (value) => assertType(is.truthy(value), "truthy", value),
      falsy: (value) => assertType(is.falsy(value), "falsy", value),
      nan: (value) => assertType(is.nan(value), "NaN", value),
      primitive: (value) => assertType(is.primitive(value), "primitive", value),
      integer: (value) => assertType(is.integer(value), "integer", value),
      safeInteger: (value) => assertType(is.safeInteger(value), "integer", value),
      plainObject: (value) => assertType(is.plainObject(value), "plain object", value),
      typedArray: (value) => assertType(is.typedArray(value), "TypedArray", value),
      arrayLike: (value) => assertType(is.arrayLike(value), "array-like", value),
      domElement: (value) => assertType(is.domElement(value), "HTMLElement", value),
      observable: (value) => assertType(is.observable(value), "Observable", value),
      nodeStream: (value) => assertType(is.nodeStream(value), "Node.js Stream", value),
      infinite: (value) => assertType(is.infinite(value), "infinite number", value),
      emptyArray: (value) => assertType(is.emptyArray(value), "empty array", value),
      nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), "non-empty array", value),
      emptyString: (value) => assertType(is.emptyString(value), "empty string", value),
      emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), "empty string or whitespace", value),
      nonEmptyString: (value) => assertType(is.nonEmptyString(value), "non-empty string", value),
      nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), "non-empty string and not whitespace", value),
      emptyObject: (value) => assertType(is.emptyObject(value), "empty object", value),
      nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), "non-empty object", value),
      emptySet: (value) => assertType(is.emptySet(value), "empty set", value),
      nonEmptySet: (value) => assertType(is.nonEmptySet(value), "non-empty set", value),
      emptyMap: (value) => assertType(is.emptyMap(value), "empty map", value),
      nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), "non-empty map", value),
      propertyKey: (value) => assertType(is.propertyKey(value), "PropertyKey", value),
      formData: (value) => assertType(is.formData(value), "FormData", value),
      urlSearchParams: (value) => assertType(is.urlSearchParams(value), "URLSearchParams", value),
      // Numbers.
      evenInteger: (value) => assertType(is.evenInteger(value), "even integer", value),
      oddInteger: (value) => assertType(is.oddInteger(value), "odd integer", value),
      // Two arguments.
      directInstanceOf: (instance18, class_) => assertType(is.directInstanceOf(instance18, class_), "T", instance18),
      inRange: (value, range) => assertType(is.inRange(value, range), "in range", value),
      // Variadic functions.
      any: (predicate, ...values) => {
        return assertType(is.any(predicate, ...values), "predicate returns truthy for any value", values, { multipleValues: true });
      },
      all: (predicate, ...values) => assertType(is.all(predicate, ...values), "predicate returns truthy for all values", values, { multipleValues: true })
    };
    Object.defineProperties(is, {
      class: {
        value: is.class_
      },
      function: {
        value: is.function_
      },
      null: {
        value: is.null_
      }
    });
    Object.defineProperties(exports.assert, {
      class: {
        value: exports.assert.class_
      },
      function: {
        value: exports.assert.function_
      },
      null: {
        value: exports.assert.null_
      }
    });
    exports.default = is;
    module2.exports = is;
    module2.exports.default = is;
    module2.exports.assert = exports.assert;
  }
});

// node_modules/emojilib/emojis.json
var require_emojis = __commonJS({
  "node_modules/emojilib/emojis.json"(exports, module2) {
    module2.exports = {
      grinning: {
        keywords: ["face", "smile", "happy", "joy", ":D", "grin"],
        char: "\u{1F600}",
        fitzpatrick_scale: false,
        category: "people"
      },
      grimacing: {
        keywords: ["face", "grimace", "teeth"],
        char: "\u{1F62C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      grin: {
        keywords: ["face", "happy", "smile", "joy", "kawaii"],
        char: "\u{1F601}",
        fitzpatrick_scale: false,
        category: "people"
      },
      joy: {
        keywords: ["face", "cry", "tears", "weep", "happy", "happytears", "haha"],
        char: "\u{1F602}",
        fitzpatrick_scale: false,
        category: "people"
      },
      rofl: {
        keywords: ["face", "rolling", "floor", "laughing", "lol", "haha"],
        char: "\u{1F923}",
        fitzpatrick_scale: false,
        category: "people"
      },
      partying: {
        keywords: ["face", "celebration", "woohoo"],
        char: "\u{1F973}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smiley: {
        keywords: ["face", "happy", "joy", "haha", ":D", ":)", "smile", "funny"],
        char: "\u{1F603}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smile: {
        keywords: ["face", "happy", "joy", "funny", "haha", "laugh", "like", ":D", ":)"],
        char: "\u{1F604}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sweat_smile: {
        keywords: ["face", "hot", "happy", "laugh", "sweat", "smile", "relief"],
        char: "\u{1F605}",
        fitzpatrick_scale: false,
        category: "people"
      },
      laughing: {
        keywords: ["happy", "joy", "lol", "satisfied", "haha", "face", "glad", "XD", "laugh"],
        char: "\u{1F606}",
        fitzpatrick_scale: false,
        category: "people"
      },
      innocent: {
        keywords: ["face", "angel", "heaven", "halo"],
        char: "\u{1F607}",
        fitzpatrick_scale: false,
        category: "people"
      },
      wink: {
        keywords: ["face", "happy", "mischievous", "secret", ";)", "smile", "eye"],
        char: "\u{1F609}",
        fitzpatrick_scale: false,
        category: "people"
      },
      blush: {
        keywords: ["face", "smile", "happy", "flushed", "crush", "embarrassed", "shy", "joy"],
        char: "\u{1F60A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      slightly_smiling_face: {
        keywords: ["face", "smile"],
        char: "\u{1F642}",
        fitzpatrick_scale: false,
        category: "people"
      },
      upside_down_face: {
        keywords: ["face", "flipped", "silly", "smile"],
        char: "\u{1F643}",
        fitzpatrick_scale: false,
        category: "people"
      },
      relaxed: {
        keywords: ["face", "blush", "massage", "happiness"],
        char: "\u263A\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      yum: {
        keywords: ["happy", "joy", "tongue", "smile", "face", "silly", "yummy", "nom", "delicious", "savouring"],
        char: "\u{1F60B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      relieved: {
        keywords: ["face", "relaxed", "phew", "massage", "happiness"],
        char: "\u{1F60C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      heart_eyes: {
        keywords: ["face", "love", "like", "affection", "valentines", "infatuation", "crush", "heart"],
        char: "\u{1F60D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smiling_face_with_three_hearts: {
        keywords: ["face", "love", "like", "affection", "valentines", "infatuation", "crush", "hearts", "adore"],
        char: "\u{1F970}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kissing_heart: {
        keywords: ["face", "love", "like", "affection", "valentines", "infatuation", "kiss"],
        char: "\u{1F618}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kissing: {
        keywords: ["love", "like", "face", "3", "valentines", "infatuation", "kiss"],
        char: "\u{1F617}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kissing_smiling_eyes: {
        keywords: ["face", "affection", "valentines", "infatuation", "kiss"],
        char: "\u{1F619}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kissing_closed_eyes: {
        keywords: ["face", "love", "like", "affection", "valentines", "infatuation", "kiss"],
        char: "\u{1F61A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      stuck_out_tongue_winking_eye: {
        keywords: ["face", "prank", "childish", "playful", "mischievous", "smile", "wink", "tongue"],
        char: "\u{1F61C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      zany: {
        keywords: ["face", "goofy", "crazy"],
        char: "\u{1F92A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      raised_eyebrow: {
        keywords: ["face", "distrust", "scepticism", "disapproval", "disbelief", "surprise"],
        char: "\u{1F928}",
        fitzpatrick_scale: false,
        category: "people"
      },
      monocle: {
        keywords: ["face", "stuffy", "wealthy"],
        char: "\u{1F9D0}",
        fitzpatrick_scale: false,
        category: "people"
      },
      stuck_out_tongue_closed_eyes: {
        keywords: ["face", "prank", "playful", "mischievous", "smile", "tongue"],
        char: "\u{1F61D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      stuck_out_tongue: {
        keywords: ["face", "prank", "childish", "playful", "mischievous", "smile", "tongue"],
        char: "\u{1F61B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      money_mouth_face: {
        keywords: ["face", "rich", "dollar", "money"],
        char: "\u{1F911}",
        fitzpatrick_scale: false,
        category: "people"
      },
      nerd_face: {
        keywords: ["face", "nerdy", "geek", "dork"],
        char: "\u{1F913}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sunglasses: {
        keywords: ["face", "cool", "smile", "summer", "beach", "sunglass"],
        char: "\u{1F60E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      star_struck: {
        keywords: ["face", "smile", "starry", "eyes", "grinning"],
        char: "\u{1F929}",
        fitzpatrick_scale: false,
        category: "people"
      },
      clown_face: {
        keywords: ["face"],
        char: "\u{1F921}",
        fitzpatrick_scale: false,
        category: "people"
      },
      cowboy_hat_face: {
        keywords: ["face", "cowgirl", "hat"],
        char: "\u{1F920}",
        fitzpatrick_scale: false,
        category: "people"
      },
      hugs: {
        keywords: ["face", "smile", "hug"],
        char: "\u{1F917}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smirk: {
        keywords: ["face", "smile", "mean", "prank", "smug", "sarcasm"],
        char: "\u{1F60F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      no_mouth: {
        keywords: ["face", "hellokitty"],
        char: "\u{1F636}",
        fitzpatrick_scale: false,
        category: "people"
      },
      neutral_face: {
        keywords: ["indifference", "meh", ":|", "neutral"],
        char: "\u{1F610}",
        fitzpatrick_scale: false,
        category: "people"
      },
      expressionless: {
        keywords: ["face", "indifferent", "-_-", "meh", "deadpan"],
        char: "\u{1F611}",
        fitzpatrick_scale: false,
        category: "people"
      },
      unamused: {
        keywords: ["indifference", "bored", "straight face", "serious", "sarcasm", "unimpressed", "skeptical", "dubious", "side_eye"],
        char: "\u{1F612}",
        fitzpatrick_scale: false,
        category: "people"
      },
      roll_eyes: {
        keywords: ["face", "eyeroll", "frustrated"],
        char: "\u{1F644}",
        fitzpatrick_scale: false,
        category: "people"
      },
      thinking: {
        keywords: ["face", "hmmm", "think", "consider"],
        char: "\u{1F914}",
        fitzpatrick_scale: false,
        category: "people"
      },
      lying_face: {
        keywords: ["face", "lie", "pinocchio"],
        char: "\u{1F925}",
        fitzpatrick_scale: false,
        category: "people"
      },
      hand_over_mouth: {
        keywords: ["face", "whoops", "shock", "surprise"],
        char: "\u{1F92D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      shushing: {
        keywords: ["face", "quiet", "shhh"],
        char: "\u{1F92B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      symbols_over_mouth: {
        keywords: ["face", "swearing", "cursing", "cussing", "profanity", "expletive"],
        char: "\u{1F92C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      exploding_head: {
        keywords: ["face", "shocked", "mind", "blown"],
        char: "\u{1F92F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      flushed: {
        keywords: ["face", "blush", "shy", "flattered"],
        char: "\u{1F633}",
        fitzpatrick_scale: false,
        category: "people"
      },
      disappointed: {
        keywords: ["face", "sad", "upset", "depressed", ":("],
        char: "\u{1F61E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      worried: {
        keywords: ["face", "concern", "nervous", ":("],
        char: "\u{1F61F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      angry: {
        keywords: ["mad", "face", "annoyed", "frustrated"],
        char: "\u{1F620}",
        fitzpatrick_scale: false,
        category: "people"
      },
      rage: {
        keywords: ["angry", "mad", "hate", "despise"],
        char: "\u{1F621}",
        fitzpatrick_scale: false,
        category: "people"
      },
      pensive: {
        keywords: ["face", "sad", "depressed", "upset"],
        char: "\u{1F614}",
        fitzpatrick_scale: false,
        category: "people"
      },
      confused: {
        keywords: ["face", "indifference", "huh", "weird", "hmmm", ":/"],
        char: "\u{1F615}",
        fitzpatrick_scale: false,
        category: "people"
      },
      slightly_frowning_face: {
        keywords: ["face", "frowning", "disappointed", "sad", "upset"],
        char: "\u{1F641}",
        fitzpatrick_scale: false,
        category: "people"
      },
      frowning_face: {
        keywords: ["face", "sad", "upset", "frown"],
        char: "\u2639",
        fitzpatrick_scale: false,
        category: "people"
      },
      persevere: {
        keywords: ["face", "sick", "no", "upset", "oops"],
        char: "\u{1F623}",
        fitzpatrick_scale: false,
        category: "people"
      },
      confounded: {
        keywords: ["face", "confused", "sick", "unwell", "oops", ":S"],
        char: "\u{1F616}",
        fitzpatrick_scale: false,
        category: "people"
      },
      tired_face: {
        keywords: ["sick", "whine", "upset", "frustrated"],
        char: "\u{1F62B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      weary: {
        keywords: ["face", "tired", "sleepy", "sad", "frustrated", "upset"],
        char: "\u{1F629}",
        fitzpatrick_scale: false,
        category: "people"
      },
      pleading: {
        keywords: ["face", "begging", "mercy"],
        char: "\u{1F97A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      triumph: {
        keywords: ["face", "gas", "phew", "proud", "pride"],
        char: "\u{1F624}",
        fitzpatrick_scale: false,
        category: "people"
      },
      open_mouth: {
        keywords: ["face", "surprise", "impressed", "wow", "whoa", ":O"],
        char: "\u{1F62E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      scream: {
        keywords: ["face", "munch", "scared", "omg"],
        char: "\u{1F631}",
        fitzpatrick_scale: false,
        category: "people"
      },
      fearful: {
        keywords: ["face", "scared", "terrified", "nervous", "oops", "huh"],
        char: "\u{1F628}",
        fitzpatrick_scale: false,
        category: "people"
      },
      cold_sweat: {
        keywords: ["face", "nervous", "sweat"],
        char: "\u{1F630}",
        fitzpatrick_scale: false,
        category: "people"
      },
      hushed: {
        keywords: ["face", "woo", "shh"],
        char: "\u{1F62F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      frowning: {
        keywords: ["face", "aw", "what"],
        char: "\u{1F626}",
        fitzpatrick_scale: false,
        category: "people"
      },
      anguished: {
        keywords: ["face", "stunned", "nervous"],
        char: "\u{1F627}",
        fitzpatrick_scale: false,
        category: "people"
      },
      cry: {
        keywords: ["face", "tears", "sad", "depressed", "upset", ":'("],
        char: "\u{1F622}",
        fitzpatrick_scale: false,
        category: "people"
      },
      disappointed_relieved: {
        keywords: ["face", "phew", "sweat", "nervous"],
        char: "\u{1F625}",
        fitzpatrick_scale: false,
        category: "people"
      },
      drooling_face: {
        keywords: ["face"],
        char: "\u{1F924}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sleepy: {
        keywords: ["face", "tired", "rest", "nap"],
        char: "\u{1F62A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sweat: {
        keywords: ["face", "hot", "sad", "tired", "exercise"],
        char: "\u{1F613}",
        fitzpatrick_scale: false,
        category: "people"
      },
      hot: {
        keywords: ["face", "feverish", "heat", "red", "sweating"],
        char: "\u{1F975}",
        fitzpatrick_scale: false,
        category: "people"
      },
      cold: {
        keywords: ["face", "blue", "freezing", "frozen", "frostbite", "icicles"],
        char: "\u{1F976}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sob: {
        keywords: ["face", "cry", "tears", "sad", "upset", "depressed"],
        char: "\u{1F62D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      dizzy_face: {
        keywords: ["spent", "unconscious", "xox", "dizzy"],
        char: "\u{1F635}",
        fitzpatrick_scale: false,
        category: "people"
      },
      astonished: {
        keywords: ["face", "xox", "surprised", "poisoned"],
        char: "\u{1F632}",
        fitzpatrick_scale: false,
        category: "people"
      },
      zipper_mouth_face: {
        keywords: ["face", "sealed", "zipper", "secret"],
        char: "\u{1F910}",
        fitzpatrick_scale: false,
        category: "people"
      },
      nauseated_face: {
        keywords: ["face", "vomit", "gross", "green", "sick", "throw up", "ill"],
        char: "\u{1F922}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sneezing_face: {
        keywords: ["face", "gesundheit", "sneeze", "sick", "allergy"],
        char: "\u{1F927}",
        fitzpatrick_scale: false,
        category: "people"
      },
      vomiting: {
        keywords: ["face", "sick"],
        char: "\u{1F92E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      mask: {
        keywords: ["face", "sick", "ill", "disease"],
        char: "\u{1F637}",
        fitzpatrick_scale: false,
        category: "people"
      },
      face_with_thermometer: {
        keywords: ["sick", "temperature", "thermometer", "cold", "fever"],
        char: "\u{1F912}",
        fitzpatrick_scale: false,
        category: "people"
      },
      face_with_head_bandage: {
        keywords: ["injured", "clumsy", "bandage", "hurt"],
        char: "\u{1F915}",
        fitzpatrick_scale: false,
        category: "people"
      },
      woozy: {
        keywords: ["face", "dizzy", "intoxicated", "tipsy", "wavy"],
        char: "\u{1F974}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sleeping: {
        keywords: ["face", "tired", "sleepy", "night", "zzz"],
        char: "\u{1F634}",
        fitzpatrick_scale: false,
        category: "people"
      },
      zzz: {
        keywords: ["sleepy", "tired", "dream"],
        char: "\u{1F4A4}",
        fitzpatrick_scale: false,
        category: "people"
      },
      poop: {
        keywords: ["hankey", "shitface", "fail", "turd", "shit"],
        char: "\u{1F4A9}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smiling_imp: {
        keywords: ["devil", "horns"],
        char: "\u{1F608}",
        fitzpatrick_scale: false,
        category: "people"
      },
      imp: {
        keywords: ["devil", "angry", "horns"],
        char: "\u{1F47F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      japanese_ogre: {
        keywords: ["monster", "red", "mask", "halloween", "scary", "creepy", "devil", "demon", "japanese", "ogre"],
        char: "\u{1F479}",
        fitzpatrick_scale: false,
        category: "people"
      },
      japanese_goblin: {
        keywords: ["red", "evil", "mask", "monster", "scary", "creepy", "japanese", "goblin"],
        char: "\u{1F47A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      skull: {
        keywords: ["dead", "skeleton", "creepy", "death"],
        char: "\u{1F480}",
        fitzpatrick_scale: false,
        category: "people"
      },
      ghost: {
        keywords: ["halloween", "spooky", "scary"],
        char: "\u{1F47B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      alien: {
        keywords: ["UFO", "paul", "weird", "outer_space"],
        char: "\u{1F47D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      robot: {
        keywords: ["computer", "machine", "bot"],
        char: "\u{1F916}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smiley_cat: {
        keywords: ["animal", "cats", "happy", "smile"],
        char: "\u{1F63A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smile_cat: {
        keywords: ["animal", "cats", "smile"],
        char: "\u{1F638}",
        fitzpatrick_scale: false,
        category: "people"
      },
      joy_cat: {
        keywords: ["animal", "cats", "haha", "happy", "tears"],
        char: "\u{1F639}",
        fitzpatrick_scale: false,
        category: "people"
      },
      heart_eyes_cat: {
        keywords: ["animal", "love", "like", "affection", "cats", "valentines", "heart"],
        char: "\u{1F63B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      smirk_cat: {
        keywords: ["animal", "cats", "smirk"],
        char: "\u{1F63C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kissing_cat: {
        keywords: ["animal", "cats", "kiss"],
        char: "\u{1F63D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      scream_cat: {
        keywords: ["animal", "cats", "munch", "scared", "scream"],
        char: "\u{1F640}",
        fitzpatrick_scale: false,
        category: "people"
      },
      crying_cat_face: {
        keywords: ["animal", "tears", "weep", "sad", "cats", "upset", "cry"],
        char: "\u{1F63F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      pouting_cat: {
        keywords: ["animal", "cats"],
        char: "\u{1F63E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      palms_up: {
        keywords: ["hands", "gesture", "cupped", "prayer"],
        char: "\u{1F932}",
        fitzpatrick_scale: true,
        category: "people"
      },
      raised_hands: {
        keywords: ["gesture", "hooray", "yea", "celebration", "hands"],
        char: "\u{1F64C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      clap: {
        keywords: ["hands", "praise", "applause", "congrats", "yay"],
        char: "\u{1F44F}",
        fitzpatrick_scale: true,
        category: "people"
      },
      wave: {
        keywords: ["hands", "gesture", "goodbye", "solong", "farewell", "hello", "hi", "palm"],
        char: "\u{1F44B}",
        fitzpatrick_scale: true,
        category: "people"
      },
      call_me_hand: {
        keywords: ["hands", "gesture"],
        char: "\u{1F919}",
        fitzpatrick_scale: true,
        category: "people"
      },
      "+1": {
        keywords: ["thumbsup", "yes", "awesome", "good", "agree", "accept", "cool", "hand", "like"],
        char: "\u{1F44D}",
        fitzpatrick_scale: true,
        category: "people"
      },
      "-1": {
        keywords: ["thumbsdown", "no", "dislike", "hand"],
        char: "\u{1F44E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      facepunch: {
        keywords: ["angry", "violence", "fist", "hit", "attack", "hand"],
        char: "\u{1F44A}",
        fitzpatrick_scale: true,
        category: "people"
      },
      fist: {
        keywords: ["fingers", "hand", "grasp"],
        char: "\u270A",
        fitzpatrick_scale: true,
        category: "people"
      },
      fist_left: {
        keywords: ["hand", "fistbump"],
        char: "\u{1F91B}",
        fitzpatrick_scale: true,
        category: "people"
      },
      fist_right: {
        keywords: ["hand", "fistbump"],
        char: "\u{1F91C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      v: {
        keywords: ["fingers", "ohyeah", "hand", "peace", "victory", "two"],
        char: "\u270C",
        fitzpatrick_scale: true,
        category: "people"
      },
      ok_hand: {
        keywords: ["fingers", "limbs", "perfect", "ok", "okay"],
        char: "\u{1F44C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      raised_hand: {
        keywords: ["fingers", "stop", "highfive", "palm", "ban"],
        char: "\u270B",
        fitzpatrick_scale: true,
        category: "people"
      },
      raised_back_of_hand: {
        keywords: ["fingers", "raised", "backhand"],
        char: "\u{1F91A}",
        fitzpatrick_scale: true,
        category: "people"
      },
      open_hands: {
        keywords: ["fingers", "butterfly", "hands", "open"],
        char: "\u{1F450}",
        fitzpatrick_scale: true,
        category: "people"
      },
      muscle: {
        keywords: ["arm", "flex", "hand", "summer", "strong", "biceps"],
        char: "\u{1F4AA}",
        fitzpatrick_scale: true,
        category: "people"
      },
      pray: {
        keywords: ["please", "hope", "wish", "namaste", "highfive"],
        char: "\u{1F64F}",
        fitzpatrick_scale: true,
        category: "people"
      },
      foot: {
        keywords: ["kick", "stomp"],
        char: "\u{1F9B6}",
        fitzpatrick_scale: true,
        category: "people"
      },
      leg: {
        keywords: ["kick", "limb"],
        char: "\u{1F9B5}",
        fitzpatrick_scale: true,
        category: "people"
      },
      handshake: {
        keywords: ["agreement", "shake"],
        char: "\u{1F91D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      point_up: {
        keywords: ["hand", "fingers", "direction", "up"],
        char: "\u261D",
        fitzpatrick_scale: true,
        category: "people"
      },
      point_up_2: {
        keywords: ["fingers", "hand", "direction", "up"],
        char: "\u{1F446}",
        fitzpatrick_scale: true,
        category: "people"
      },
      point_down: {
        keywords: ["fingers", "hand", "direction", "down"],
        char: "\u{1F447}",
        fitzpatrick_scale: true,
        category: "people"
      },
      point_left: {
        keywords: ["direction", "fingers", "hand", "left"],
        char: "\u{1F448}",
        fitzpatrick_scale: true,
        category: "people"
      },
      point_right: {
        keywords: ["fingers", "hand", "direction", "right"],
        char: "\u{1F449}",
        fitzpatrick_scale: true,
        category: "people"
      },
      fu: {
        keywords: ["hand", "fingers", "rude", "middle", "flipping"],
        char: "\u{1F595}",
        fitzpatrick_scale: true,
        category: "people"
      },
      raised_hand_with_fingers_splayed: {
        keywords: ["hand", "fingers", "palm"],
        char: "\u{1F590}",
        fitzpatrick_scale: true,
        category: "people"
      },
      love_you: {
        keywords: ["hand", "fingers", "gesture"],
        char: "\u{1F91F}",
        fitzpatrick_scale: true,
        category: "people"
      },
      metal: {
        keywords: ["hand", "fingers", "evil_eye", "sign_of_horns", "rock_on"],
        char: "\u{1F918}",
        fitzpatrick_scale: true,
        category: "people"
      },
      crossed_fingers: {
        keywords: ["good", "lucky"],
        char: "\u{1F91E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      vulcan_salute: {
        keywords: ["hand", "fingers", "spock", "star trek"],
        char: "\u{1F596}",
        fitzpatrick_scale: true,
        category: "people"
      },
      writing_hand: {
        keywords: ["lower_left_ballpoint_pen", "stationery", "write", "compose"],
        char: "\u270D",
        fitzpatrick_scale: true,
        category: "people"
      },
      selfie: {
        keywords: ["camera", "phone"],
        char: "\u{1F933}",
        fitzpatrick_scale: true,
        category: "people"
      },
      nail_care: {
        keywords: ["beauty", "manicure", "finger", "fashion", "nail"],
        char: "\u{1F485}",
        fitzpatrick_scale: true,
        category: "people"
      },
      lips: {
        keywords: ["mouth", "kiss"],
        char: "\u{1F444}",
        fitzpatrick_scale: false,
        category: "people"
      },
      tooth: {
        keywords: ["teeth", "dentist"],
        char: "\u{1F9B7}",
        fitzpatrick_scale: false,
        category: "people"
      },
      tongue: {
        keywords: ["mouth", "playful"],
        char: "\u{1F445}",
        fitzpatrick_scale: false,
        category: "people"
      },
      ear: {
        keywords: ["face", "hear", "sound", "listen"],
        char: "\u{1F442}",
        fitzpatrick_scale: true,
        category: "people"
      },
      nose: {
        keywords: ["smell", "sniff"],
        char: "\u{1F443}",
        fitzpatrick_scale: true,
        category: "people"
      },
      eye: {
        keywords: ["face", "look", "see", "watch", "stare"],
        char: "\u{1F441}",
        fitzpatrick_scale: false,
        category: "people"
      },
      eyes: {
        keywords: ["look", "watch", "stalk", "peek", "see"],
        char: "\u{1F440}",
        fitzpatrick_scale: false,
        category: "people"
      },
      brain: {
        keywords: ["smart", "intelligent"],
        char: "\u{1F9E0}",
        fitzpatrick_scale: false,
        category: "people"
      },
      bust_in_silhouette: {
        keywords: ["user", "person", "human"],
        char: "\u{1F464}",
        fitzpatrick_scale: false,
        category: "people"
      },
      busts_in_silhouette: {
        keywords: ["user", "person", "human", "group", "team"],
        char: "\u{1F465}",
        fitzpatrick_scale: false,
        category: "people"
      },
      speaking_head: {
        keywords: ["user", "person", "human", "sing", "say", "talk"],
        char: "\u{1F5E3}",
        fitzpatrick_scale: false,
        category: "people"
      },
      baby: {
        keywords: ["child", "boy", "girl", "toddler"],
        char: "\u{1F476}",
        fitzpatrick_scale: true,
        category: "people"
      },
      child: {
        keywords: ["gender-neutral", "young"],
        char: "\u{1F9D2}",
        fitzpatrick_scale: true,
        category: "people"
      },
      boy: {
        keywords: ["man", "male", "guy", "teenager"],
        char: "\u{1F466}",
        fitzpatrick_scale: true,
        category: "people"
      },
      girl: {
        keywords: ["female", "woman", "teenager"],
        char: "\u{1F467}",
        fitzpatrick_scale: true,
        category: "people"
      },
      adult: {
        keywords: ["gender-neutral", "person"],
        char: "\u{1F9D1}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man: {
        keywords: ["mustache", "father", "dad", "guy", "classy", "sir", "moustache"],
        char: "\u{1F468}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman: {
        keywords: ["female", "girls", "lady"],
        char: "\u{1F469}",
        fitzpatrick_scale: true,
        category: "people"
      },
      blonde_woman: {
        keywords: ["woman", "female", "girl", "blonde", "person"],
        char: "\u{1F471}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      blonde_man: {
        keywords: ["man", "male", "boy", "blonde", "guy", "person"],
        char: "\u{1F471}",
        fitzpatrick_scale: true,
        category: "people"
      },
      bearded_person: {
        keywords: ["person", "bewhiskered"],
        char: "\u{1F9D4}",
        fitzpatrick_scale: true,
        category: "people"
      },
      older_adult: {
        keywords: ["human", "elder", "senior", "gender-neutral"],
        char: "\u{1F9D3}",
        fitzpatrick_scale: true,
        category: "people"
      },
      older_man: {
        keywords: ["human", "male", "men", "old", "elder", "senior"],
        char: "\u{1F474}",
        fitzpatrick_scale: true,
        category: "people"
      },
      older_woman: {
        keywords: ["human", "female", "women", "lady", "old", "elder", "senior"],
        char: "\u{1F475}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_with_gua_pi_mao: {
        keywords: ["male", "boy", "chinese"],
        char: "\u{1F472}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_with_headscarf: {
        keywords: ["female", "hijab", "mantilla", "tichel"],
        char: "\u{1F9D5}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_with_turban: {
        keywords: ["female", "indian", "hinduism", "arabs", "woman"],
        char: "\u{1F473}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_with_turban: {
        keywords: ["male", "indian", "hinduism", "arabs"],
        char: "\u{1F473}",
        fitzpatrick_scale: true,
        category: "people"
      },
      policewoman: {
        keywords: ["woman", "police", "law", "legal", "enforcement", "arrest", "911", "female"],
        char: "\u{1F46E}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      policeman: {
        keywords: ["man", "police", "law", "legal", "enforcement", "arrest", "911"],
        char: "\u{1F46E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      construction_worker_woman: {
        keywords: ["female", "human", "wip", "build", "construction", "worker", "labor", "woman"],
        char: "\u{1F477}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      construction_worker_man: {
        keywords: ["male", "human", "wip", "guy", "build", "construction", "worker", "labor"],
        char: "\u{1F477}",
        fitzpatrick_scale: true,
        category: "people"
      },
      guardswoman: {
        keywords: ["uk", "gb", "british", "female", "royal", "woman"],
        char: "\u{1F482}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      guardsman: {
        keywords: ["uk", "gb", "british", "male", "guy", "royal"],
        char: "\u{1F482}",
        fitzpatrick_scale: true,
        category: "people"
      },
      female_detective: {
        keywords: ["human", "spy", "detective", "female", "woman"],
        char: "\u{1F575}\uFE0F\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      male_detective: {
        keywords: ["human", "spy", "detective"],
        char: "\u{1F575}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_health_worker: {
        keywords: ["doctor", "nurse", "therapist", "healthcare", "woman", "human"],
        char: "\u{1F469}\u200D\u2695\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_health_worker: {
        keywords: ["doctor", "nurse", "therapist", "healthcare", "man", "human"],
        char: "\u{1F468}\u200D\u2695\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_farmer: {
        keywords: ["rancher", "gardener", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F33E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_farmer: {
        keywords: ["rancher", "gardener", "man", "human"],
        char: "\u{1F468}\u200D\u{1F33E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_cook: {
        keywords: ["chef", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F373}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_cook: {
        keywords: ["chef", "man", "human"],
        char: "\u{1F468}\u200D\u{1F373}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_student: {
        keywords: ["graduate", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F393}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_student: {
        keywords: ["graduate", "man", "human"],
        char: "\u{1F468}\u200D\u{1F393}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_singer: {
        keywords: ["rockstar", "entertainer", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F3A4}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_singer: {
        keywords: ["rockstar", "entertainer", "man", "human"],
        char: "\u{1F468}\u200D\u{1F3A4}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_teacher: {
        keywords: ["instructor", "professor", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F3EB}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_teacher: {
        keywords: ["instructor", "professor", "man", "human"],
        char: "\u{1F468}\u200D\u{1F3EB}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_factory_worker: {
        keywords: ["assembly", "industrial", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F3ED}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_factory_worker: {
        keywords: ["assembly", "industrial", "man", "human"],
        char: "\u{1F468}\u200D\u{1F3ED}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_technologist: {
        keywords: ["coder", "developer", "engineer", "programmer", "software", "woman", "human", "laptop", "computer"],
        char: "\u{1F469}\u200D\u{1F4BB}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_technologist: {
        keywords: ["coder", "developer", "engineer", "programmer", "software", "man", "human", "laptop", "computer"],
        char: "\u{1F468}\u200D\u{1F4BB}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_office_worker: {
        keywords: ["business", "manager", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F4BC}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_office_worker: {
        keywords: ["business", "manager", "man", "human"],
        char: "\u{1F468}\u200D\u{1F4BC}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_mechanic: {
        keywords: ["plumber", "woman", "human", "wrench"],
        char: "\u{1F469}\u200D\u{1F527}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_mechanic: {
        keywords: ["plumber", "man", "human", "wrench"],
        char: "\u{1F468}\u200D\u{1F527}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_scientist: {
        keywords: ["biologist", "chemist", "engineer", "physicist", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F52C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_scientist: {
        keywords: ["biologist", "chemist", "engineer", "physicist", "man", "human"],
        char: "\u{1F468}\u200D\u{1F52C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_artist: {
        keywords: ["painter", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F3A8}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_artist: {
        keywords: ["painter", "man", "human"],
        char: "\u{1F468}\u200D\u{1F3A8}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_firefighter: {
        keywords: ["fireman", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F692}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_firefighter: {
        keywords: ["fireman", "man", "human"],
        char: "\u{1F468}\u200D\u{1F692}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_pilot: {
        keywords: ["aviator", "plane", "woman", "human"],
        char: "\u{1F469}\u200D\u2708\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_pilot: {
        keywords: ["aviator", "plane", "man", "human"],
        char: "\u{1F468}\u200D\u2708\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_astronaut: {
        keywords: ["space", "rocket", "woman", "human"],
        char: "\u{1F469}\u200D\u{1F680}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_astronaut: {
        keywords: ["space", "rocket", "man", "human"],
        char: "\u{1F468}\u200D\u{1F680}",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_judge: {
        keywords: ["justice", "court", "woman", "human"],
        char: "\u{1F469}\u200D\u2696\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_judge: {
        keywords: ["justice", "court", "man", "human"],
        char: "\u{1F468}\u200D\u2696\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_superhero: {
        keywords: ["woman", "female", "good", "heroine", "superpowers"],
        char: "\u{1F9B8}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_superhero: {
        keywords: ["man", "male", "good", "hero", "superpowers"],
        char: "\u{1F9B8}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_supervillain: {
        keywords: ["woman", "female", "evil", "bad", "criminal", "heroine", "superpowers"],
        char: "\u{1F9B9}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_supervillain: {
        keywords: ["man", "male", "evil", "bad", "criminal", "hero", "superpowers"],
        char: "\u{1F9B9}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      mrs_claus: {
        keywords: ["woman", "female", "xmas", "mother christmas"],
        char: "\u{1F936}",
        fitzpatrick_scale: true,
        category: "people"
      },
      santa: {
        keywords: ["festival", "man", "male", "xmas", "father christmas"],
        char: "\u{1F385}",
        fitzpatrick_scale: true,
        category: "people"
      },
      sorceress: {
        keywords: ["woman", "female", "mage", "witch"],
        char: "\u{1F9D9}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      wizard: {
        keywords: ["man", "male", "mage", "sorcerer"],
        char: "\u{1F9D9}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_elf: {
        keywords: ["woman", "female"],
        char: "\u{1F9DD}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_elf: {
        keywords: ["man", "male"],
        char: "\u{1F9DD}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_vampire: {
        keywords: ["woman", "female"],
        char: "\u{1F9DB}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_vampire: {
        keywords: ["man", "male", "dracula"],
        char: "\u{1F9DB}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_zombie: {
        keywords: ["woman", "female", "undead", "walking dead"],
        char: "\u{1F9DF}\u200D\u2640\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      man_zombie: {
        keywords: ["man", "male", "dracula", "undead", "walking dead"],
        char: "\u{1F9DF}\u200D\u2642\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      woman_genie: {
        keywords: ["woman", "female"],
        char: "\u{1F9DE}\u200D\u2640\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      man_genie: {
        keywords: ["man", "male"],
        char: "\u{1F9DE}\u200D\u2642\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      mermaid: {
        keywords: ["woman", "female", "merwoman", "ariel"],
        char: "\u{1F9DC}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      merman: {
        keywords: ["man", "male", "triton"],
        char: "\u{1F9DC}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_fairy: {
        keywords: ["woman", "female"],
        char: "\u{1F9DA}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_fairy: {
        keywords: ["man", "male"],
        char: "\u{1F9DA}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      angel: {
        keywords: ["heaven", "wings", "halo"],
        char: "\u{1F47C}",
        fitzpatrick_scale: true,
        category: "people"
      },
      pregnant_woman: {
        keywords: ["baby"],
        char: "\u{1F930}",
        fitzpatrick_scale: true,
        category: "people"
      },
      breastfeeding: {
        keywords: ["nursing", "baby"],
        char: "\u{1F931}",
        fitzpatrick_scale: true,
        category: "people"
      },
      princess: {
        keywords: ["girl", "woman", "female", "blond", "crown", "royal", "queen"],
        char: "\u{1F478}",
        fitzpatrick_scale: true,
        category: "people"
      },
      prince: {
        keywords: ["boy", "man", "male", "crown", "royal", "king"],
        char: "\u{1F934}",
        fitzpatrick_scale: true,
        category: "people"
      },
      bride_with_veil: {
        keywords: ["couple", "marriage", "wedding", "woman", "bride"],
        char: "\u{1F470}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_in_tuxedo: {
        keywords: ["couple", "marriage", "wedding", "groom"],
        char: "\u{1F935}",
        fitzpatrick_scale: true,
        category: "people"
      },
      running_woman: {
        keywords: ["woman", "walking", "exercise", "race", "running", "female"],
        char: "\u{1F3C3}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      running_man: {
        keywords: ["man", "walking", "exercise", "race", "running"],
        char: "\u{1F3C3}",
        fitzpatrick_scale: true,
        category: "people"
      },
      walking_woman: {
        keywords: ["human", "feet", "steps", "woman", "female"],
        char: "\u{1F6B6}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      walking_man: {
        keywords: ["human", "feet", "steps"],
        char: "\u{1F6B6}",
        fitzpatrick_scale: true,
        category: "people"
      },
      dancer: {
        keywords: ["female", "girl", "woman", "fun"],
        char: "\u{1F483}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_dancing: {
        keywords: ["male", "boy", "fun", "dancer"],
        char: "\u{1F57A}",
        fitzpatrick_scale: true,
        category: "people"
      },
      dancing_women: {
        keywords: ["female", "bunny", "women", "girls"],
        char: "\u{1F46F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      dancing_men: {
        keywords: ["male", "bunny", "men", "boys"],
        char: "\u{1F46F}\u200D\u2642\uFE0F",
        fitzpatrick_scale: false,
        category: "people"
      },
      couple: {
        keywords: ["pair", "people", "human", "love", "date", "dating", "like", "affection", "valentines", "marriage"],
        char: "\u{1F46B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      two_men_holding_hands: {
        keywords: ["pair", "couple", "love", "like", "bromance", "friendship", "people", "human"],
        char: "\u{1F46C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      two_women_holding_hands: {
        keywords: ["pair", "friendship", "couple", "love", "like", "female", "people", "human"],
        char: "\u{1F46D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      bowing_woman: {
        keywords: ["woman", "female", "girl"],
        char: "\u{1F647}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      bowing_man: {
        keywords: ["man", "male", "boy"],
        char: "\u{1F647}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_facepalming: {
        keywords: ["man", "male", "boy", "disbelief"],
        char: "\u{1F926}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_facepalming: {
        keywords: ["woman", "female", "girl", "disbelief"],
        char: "\u{1F926}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_shrugging: {
        keywords: ["woman", "female", "girl", "confused", "indifferent", "doubt"],
        char: "\u{1F937}",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_shrugging: {
        keywords: ["man", "male", "boy", "confused", "indifferent", "doubt"],
        char: "\u{1F937}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      tipping_hand_woman: {
        keywords: ["female", "girl", "woman", "human", "information"],
        char: "\u{1F481}",
        fitzpatrick_scale: true,
        category: "people"
      },
      tipping_hand_man: {
        keywords: ["male", "boy", "man", "human", "information"],
        char: "\u{1F481}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      no_good_woman: {
        keywords: ["female", "girl", "woman", "nope"],
        char: "\u{1F645}",
        fitzpatrick_scale: true,
        category: "people"
      },
      no_good_man: {
        keywords: ["male", "boy", "man", "nope"],
        char: "\u{1F645}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      ok_woman: {
        keywords: ["women", "girl", "female", "pink", "human", "woman"],
        char: "\u{1F646}",
        fitzpatrick_scale: true,
        category: "people"
      },
      ok_man: {
        keywords: ["men", "boy", "male", "blue", "human", "man"],
        char: "\u{1F646}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      raising_hand_woman: {
        keywords: ["female", "girl", "woman"],
        char: "\u{1F64B}",
        fitzpatrick_scale: true,
        category: "people"
      },
      raising_hand_man: {
        keywords: ["male", "boy", "man"],
        char: "\u{1F64B}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      pouting_woman: {
        keywords: ["female", "girl", "woman"],
        char: "\u{1F64E}",
        fitzpatrick_scale: true,
        category: "people"
      },
      pouting_man: {
        keywords: ["male", "boy", "man"],
        char: "\u{1F64E}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      frowning_woman: {
        keywords: ["female", "girl", "woman", "sad", "depressed", "discouraged", "unhappy"],
        char: "\u{1F64D}",
        fitzpatrick_scale: true,
        category: "people"
      },
      frowning_man: {
        keywords: ["male", "boy", "man", "sad", "depressed", "discouraged", "unhappy"],
        char: "\u{1F64D}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      haircut_woman: {
        keywords: ["female", "girl", "woman"],
        char: "\u{1F487}",
        fitzpatrick_scale: true,
        category: "people"
      },
      haircut_man: {
        keywords: ["male", "boy", "man"],
        char: "\u{1F487}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      massage_woman: {
        keywords: ["female", "girl", "woman", "head"],
        char: "\u{1F486}",
        fitzpatrick_scale: true,
        category: "people"
      },
      massage_man: {
        keywords: ["male", "boy", "man", "head"],
        char: "\u{1F486}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      woman_in_steamy_room: {
        keywords: ["female", "woman", "spa", "steamroom", "sauna"],
        char: "\u{1F9D6}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      man_in_steamy_room: {
        keywords: ["male", "man", "spa", "steamroom", "sauna"],
        char: "\u{1F9D6}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "people"
      },
      couple_with_heart_woman_man: {
        keywords: ["pair", "love", "like", "affection", "human", "dating", "valentines", "marriage"],
        char: "\u{1F491}",
        fitzpatrick_scale: false,
        category: "people"
      },
      couple_with_heart_woman_woman: {
        keywords: ["pair", "love", "like", "affection", "human", "dating", "valentines", "marriage"],
        char: "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}",
        fitzpatrick_scale: false,
        category: "people"
      },
      couple_with_heart_man_man: {
        keywords: ["pair", "love", "like", "affection", "human", "dating", "valentines", "marriage"],
        char: "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}",
        fitzpatrick_scale: false,
        category: "people"
      },
      couplekiss_man_woman: {
        keywords: ["pair", "valentines", "love", "like", "dating", "marriage"],
        char: "\u{1F48F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      couplekiss_woman_woman: {
        keywords: ["pair", "valentines", "love", "like", "dating", "marriage"],
        char: "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}",
        fitzpatrick_scale: false,
        category: "people"
      },
      couplekiss_man_man: {
        keywords: ["pair", "valentines", "love", "like", "dating", "marriage"],
        char: "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_woman_boy: {
        keywords: ["home", "parents", "child", "mom", "dad", "father", "mother", "people", "human"],
        char: "\u{1F46A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_woman_girl: {
        keywords: ["home", "parents", "people", "human", "child"],
        char: "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_woman_girl_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_woman_boy_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_woman_girl_girl: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_woman_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_woman_girl: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_woman_girl_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_woman_boy_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_woman_girl_girl: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_man_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_man_girl: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_man_girl_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_man_boy_boy: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_man_girl_girl: {
        keywords: ["home", "parents", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_boy: {
        keywords: ["home", "parent", "people", "human", "child"],
        char: "\u{1F469}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_girl: {
        keywords: ["home", "parent", "people", "human", "child"],
        char: "\u{1F469}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_girl_boy: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_boy_boy: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_woman_girl_girl: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_boy: {
        keywords: ["home", "parent", "people", "human", "child"],
        char: "\u{1F468}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_girl: {
        keywords: ["home", "parent", "people", "human", "child"],
        char: "\u{1F468}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_girl_boy: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F467}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_boy_boy: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F466}\u200D\u{1F466}",
        fitzpatrick_scale: false,
        category: "people"
      },
      family_man_girl_girl: {
        keywords: ["home", "parent", "people", "human", "children"],
        char: "\u{1F468}\u200D\u{1F467}\u200D\u{1F467}",
        fitzpatrick_scale: false,
        category: "people"
      },
      yarn: {
        keywords: ["ball", "crochet", "knit"],
        char: "\u{1F9F6}",
        fitzpatrick_scale: false,
        category: "people"
      },
      thread: {
        keywords: ["needle", "sewing", "spool", "string"],
        char: "\u{1F9F5}",
        fitzpatrick_scale: false,
        category: "people"
      },
      coat: {
        keywords: ["jacket"],
        char: "\u{1F9E5}",
        fitzpatrick_scale: false,
        category: "people"
      },
      labcoat: {
        keywords: ["doctor", "experiment", "scientist", "chemist"],
        char: "\u{1F97C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      womans_clothes: {
        keywords: ["fashion", "shopping_bags", "female"],
        char: "\u{1F45A}",
        fitzpatrick_scale: false,
        category: "people"
      },
      tshirt: {
        keywords: ["fashion", "cloth", "casual", "shirt", "tee"],
        char: "\u{1F455}",
        fitzpatrick_scale: false,
        category: "people"
      },
      jeans: {
        keywords: ["fashion", "shopping"],
        char: "\u{1F456}",
        fitzpatrick_scale: false,
        category: "people"
      },
      necktie: {
        keywords: ["shirt", "suitup", "formal", "fashion", "cloth", "business"],
        char: "\u{1F454}",
        fitzpatrick_scale: false,
        category: "people"
      },
      dress: {
        keywords: ["clothes", "fashion", "shopping"],
        char: "\u{1F457}",
        fitzpatrick_scale: false,
        category: "people"
      },
      bikini: {
        keywords: ["swimming", "female", "woman", "girl", "fashion", "beach", "summer"],
        char: "\u{1F459}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kimono: {
        keywords: ["dress", "fashion", "women", "female", "japanese"],
        char: "\u{1F458}",
        fitzpatrick_scale: false,
        category: "people"
      },
      lipstick: {
        keywords: ["female", "girl", "fashion", "woman"],
        char: "\u{1F484}",
        fitzpatrick_scale: false,
        category: "people"
      },
      kiss: {
        keywords: ["face", "lips", "love", "like", "affection", "valentines"],
        char: "\u{1F48B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      footprints: {
        keywords: ["feet", "tracking", "walking", "beach"],
        char: "\u{1F463}",
        fitzpatrick_scale: false,
        category: "people"
      },
      flat_shoe: {
        keywords: ["ballet", "slip-on", "slipper"],
        char: "\u{1F97F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      high_heel: {
        keywords: ["fashion", "shoes", "female", "pumps", "stiletto"],
        char: "\u{1F460}",
        fitzpatrick_scale: false,
        category: "people"
      },
      sandal: {
        keywords: ["shoes", "fashion", "flip flops"],
        char: "\u{1F461}",
        fitzpatrick_scale: false,
        category: "people"
      },
      boot: {
        keywords: ["shoes", "fashion"],
        char: "\u{1F462}",
        fitzpatrick_scale: false,
        category: "people"
      },
      mans_shoe: {
        keywords: ["fashion", "male"],
        char: "\u{1F45E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      athletic_shoe: {
        keywords: ["shoes", "sports", "sneakers"],
        char: "\u{1F45F}",
        fitzpatrick_scale: false,
        category: "people"
      },
      hiking_boot: {
        keywords: ["backpacking", "camping", "hiking"],
        char: "\u{1F97E}",
        fitzpatrick_scale: false,
        category: "people"
      },
      socks: {
        keywords: ["stockings", "clothes"],
        char: "\u{1F9E6}",
        fitzpatrick_scale: false,
        category: "people"
      },
      gloves: {
        keywords: ["hands", "winter", "clothes"],
        char: "\u{1F9E4}",
        fitzpatrick_scale: false,
        category: "people"
      },
      scarf: {
        keywords: ["neck", "winter", "clothes"],
        char: "\u{1F9E3}",
        fitzpatrick_scale: false,
        category: "people"
      },
      womans_hat: {
        keywords: ["fashion", "accessories", "female", "lady", "spring"],
        char: "\u{1F452}",
        fitzpatrick_scale: false,
        category: "people"
      },
      tophat: {
        keywords: ["magic", "gentleman", "classy", "circus"],
        char: "\u{1F3A9}",
        fitzpatrick_scale: false,
        category: "people"
      },
      billed_hat: {
        keywords: ["cap", "baseball"],
        char: "\u{1F9E2}",
        fitzpatrick_scale: false,
        category: "people"
      },
      rescue_worker_helmet: {
        keywords: ["construction", "build"],
        char: "\u26D1",
        fitzpatrick_scale: false,
        category: "people"
      },
      mortar_board: {
        keywords: ["school", "college", "degree", "university", "graduation", "cap", "hat", "legal", "learn", "education"],
        char: "\u{1F393}",
        fitzpatrick_scale: false,
        category: "people"
      },
      crown: {
        keywords: ["king", "kod", "leader", "royalty", "lord"],
        char: "\u{1F451}",
        fitzpatrick_scale: false,
        category: "people"
      },
      school_satchel: {
        keywords: ["student", "education", "bag", "backpack"],
        char: "\u{1F392}",
        fitzpatrick_scale: false,
        category: "people"
      },
      luggage: {
        keywords: ["packing", "travel"],
        char: "\u{1F9F3}",
        fitzpatrick_scale: false,
        category: "people"
      },
      pouch: {
        keywords: ["bag", "accessories", "shopping"],
        char: "\u{1F45D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      purse: {
        keywords: ["fashion", "accessories", "money", "sales", "shopping"],
        char: "\u{1F45B}",
        fitzpatrick_scale: false,
        category: "people"
      },
      handbag: {
        keywords: ["fashion", "accessory", "accessories", "shopping"],
        char: "\u{1F45C}",
        fitzpatrick_scale: false,
        category: "people"
      },
      briefcase: {
        keywords: ["business", "documents", "work", "law", "legal", "job", "career"],
        char: "\u{1F4BC}",
        fitzpatrick_scale: false,
        category: "people"
      },
      eyeglasses: {
        keywords: ["fashion", "accessories", "eyesight", "nerdy", "dork", "geek"],
        char: "\u{1F453}",
        fitzpatrick_scale: false,
        category: "people"
      },
      dark_sunglasses: {
        keywords: ["face", "cool", "accessories"],
        char: "\u{1F576}",
        fitzpatrick_scale: false,
        category: "people"
      },
      goggles: {
        keywords: ["eyes", "protection", "safety"],
        char: "\u{1F97D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      ring: {
        keywords: ["wedding", "propose", "marriage", "valentines", "diamond", "fashion", "jewelry", "gem", "engagement"],
        char: "\u{1F48D}",
        fitzpatrick_scale: false,
        category: "people"
      },
      closed_umbrella: {
        keywords: ["weather", "rain", "drizzle"],
        char: "\u{1F302}",
        fitzpatrick_scale: false,
        category: "people"
      },
      dog: {
        keywords: ["animal", "friend", "nature", "woof", "puppy", "pet", "faithful"],
        char: "\u{1F436}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cat: {
        keywords: ["animal", "meow", "nature", "pet", "kitten"],
        char: "\u{1F431}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      mouse: {
        keywords: ["animal", "nature", "cheese_wedge", "rodent"],
        char: "\u{1F42D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hamster: {
        keywords: ["animal", "nature"],
        char: "\u{1F439}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rabbit: {
        keywords: ["animal", "nature", "pet", "spring", "magic", "bunny"],
        char: "\u{1F430}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      fox_face: {
        keywords: ["animal", "nature", "face"],
        char: "\u{1F98A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bear: {
        keywords: ["animal", "nature", "wild"],
        char: "\u{1F43B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      panda_face: {
        keywords: ["animal", "nature", "panda"],
        char: "\u{1F43C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      koala: {
        keywords: ["animal", "nature"],
        char: "\u{1F428}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tiger: {
        keywords: ["animal", "cat", "danger", "wild", "nature", "roar"],
        char: "\u{1F42F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      lion: {
        keywords: ["animal", "nature"],
        char: "\u{1F981}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cow: {
        keywords: ["beef", "ox", "animal", "nature", "moo", "milk"],
        char: "\u{1F42E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      pig: {
        keywords: ["animal", "oink", "nature"],
        char: "\u{1F437}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      pig_nose: {
        keywords: ["animal", "oink"],
        char: "\u{1F43D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      frog: {
        keywords: ["animal", "nature", "croak", "toad"],
        char: "\u{1F438}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      squid: {
        keywords: ["animal", "nature", "ocean", "sea"],
        char: "\u{1F991}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      octopus: {
        keywords: ["animal", "creature", "ocean", "sea", "nature", "beach"],
        char: "\u{1F419}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      shrimp: {
        keywords: ["animal", "ocean", "nature", "seafood"],
        char: "\u{1F990}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      monkey_face: {
        keywords: ["animal", "nature", "circus"],
        char: "\u{1F435}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      gorilla: {
        keywords: ["animal", "nature", "circus"],
        char: "\u{1F98D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      see_no_evil: {
        keywords: ["monkey", "animal", "nature", "haha"],
        char: "\u{1F648}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hear_no_evil: {
        keywords: ["animal", "monkey", "nature"],
        char: "\u{1F649}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      speak_no_evil: {
        keywords: ["monkey", "animal", "nature", "omg"],
        char: "\u{1F64A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      monkey: {
        keywords: ["animal", "nature", "banana", "circus"],
        char: "\u{1F412}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      chicken: {
        keywords: ["animal", "cluck", "nature", "bird"],
        char: "\u{1F414}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      penguin: {
        keywords: ["animal", "nature"],
        char: "\u{1F427}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bird: {
        keywords: ["animal", "nature", "fly", "tweet", "spring"],
        char: "\u{1F426}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      baby_chick: {
        keywords: ["animal", "chicken", "bird"],
        char: "\u{1F424}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hatching_chick: {
        keywords: ["animal", "chicken", "egg", "born", "baby", "bird"],
        char: "\u{1F423}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hatched_chick: {
        keywords: ["animal", "chicken", "baby", "bird"],
        char: "\u{1F425}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      duck: {
        keywords: ["animal", "nature", "bird", "mallard"],
        char: "\u{1F986}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      eagle: {
        keywords: ["animal", "nature", "bird"],
        char: "\u{1F985}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      owl: {
        keywords: ["animal", "nature", "bird", "hoot"],
        char: "\u{1F989}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bat: {
        keywords: ["animal", "nature", "blind", "vampire"],
        char: "\u{1F987}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      wolf: {
        keywords: ["animal", "nature", "wild"],
        char: "\u{1F43A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      boar: {
        keywords: ["animal", "nature"],
        char: "\u{1F417}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      horse: {
        keywords: ["animal", "brown", "nature"],
        char: "\u{1F434}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      unicorn: {
        keywords: ["animal", "nature", "mystical"],
        char: "\u{1F984}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      honeybee: {
        keywords: ["animal", "insect", "nature", "bug", "spring", "honey"],
        char: "\u{1F41D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bug: {
        keywords: ["animal", "insect", "nature", "worm"],
        char: "\u{1F41B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      butterfly: {
        keywords: ["animal", "insect", "nature", "caterpillar"],
        char: "\u{1F98B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      snail: {
        keywords: ["slow", "animal", "shell"],
        char: "\u{1F40C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      beetle: {
        keywords: ["animal", "insect", "nature", "ladybug"],
        char: "\u{1F41E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      ant: {
        keywords: ["animal", "insect", "nature", "bug"],
        char: "\u{1F41C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      grasshopper: {
        keywords: ["animal", "cricket", "chirp"],
        char: "\u{1F997}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      spider: {
        keywords: ["animal", "arachnid"],
        char: "\u{1F577}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      scorpion: {
        keywords: ["animal", "arachnid"],
        char: "\u{1F982}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      crab: {
        keywords: ["animal", "crustacean"],
        char: "\u{1F980}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      snake: {
        keywords: ["animal", "evil", "nature", "hiss", "python"],
        char: "\u{1F40D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      lizard: {
        keywords: ["animal", "nature", "reptile"],
        char: "\u{1F98E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      "t-rex": {
        keywords: ["animal", "nature", "dinosaur", "tyrannosaurus", "extinct"],
        char: "\u{1F996}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sauropod: {
        keywords: ["animal", "nature", "dinosaur", "brachiosaurus", "brontosaurus", "diplodocus", "extinct"],
        char: "\u{1F995}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      turtle: {
        keywords: ["animal", "slow", "nature", "tortoise"],
        char: "\u{1F422}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tropical_fish: {
        keywords: ["animal", "swim", "ocean", "beach", "nemo"],
        char: "\u{1F420}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      fish: {
        keywords: ["animal", "food", "nature"],
        char: "\u{1F41F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      blowfish: {
        keywords: ["animal", "nature", "food", "sea", "ocean"],
        char: "\u{1F421}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dolphin: {
        keywords: ["animal", "nature", "fish", "sea", "ocean", "flipper", "fins", "beach"],
        char: "\u{1F42C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      shark: {
        keywords: ["animal", "nature", "fish", "sea", "ocean", "jaws", "fins", "beach"],
        char: "\u{1F988}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      whale: {
        keywords: ["animal", "nature", "sea", "ocean"],
        char: "\u{1F433}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      whale2: {
        keywords: ["animal", "nature", "sea", "ocean"],
        char: "\u{1F40B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      crocodile: {
        keywords: ["animal", "nature", "reptile", "lizard", "alligator"],
        char: "\u{1F40A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      leopard: {
        keywords: ["animal", "nature"],
        char: "\u{1F406}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      zebra: {
        keywords: ["animal", "nature", "stripes", "safari"],
        char: "\u{1F993}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tiger2: {
        keywords: ["animal", "nature", "roar"],
        char: "\u{1F405}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      water_buffalo: {
        keywords: ["animal", "nature", "ox", "cow"],
        char: "\u{1F403}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      ox: {
        keywords: ["animal", "cow", "beef"],
        char: "\u{1F402}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cow2: {
        keywords: ["beef", "ox", "animal", "nature", "moo", "milk"],
        char: "\u{1F404}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      deer: {
        keywords: ["animal", "nature", "horns", "venison"],
        char: "\u{1F98C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dromedary_camel: {
        keywords: ["animal", "hot", "desert", "hump"],
        char: "\u{1F42A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      camel: {
        keywords: ["animal", "nature", "hot", "desert", "hump"],
        char: "\u{1F42B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      giraffe: {
        keywords: ["animal", "nature", "spots", "safari"],
        char: "\u{1F992}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      elephant: {
        keywords: ["animal", "nature", "nose", "th", "circus"],
        char: "\u{1F418}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rhinoceros: {
        keywords: ["animal", "nature", "horn"],
        char: "\u{1F98F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      goat: {
        keywords: ["animal", "nature"],
        char: "\u{1F410}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      ram: {
        keywords: ["animal", "sheep", "nature"],
        char: "\u{1F40F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sheep: {
        keywords: ["animal", "nature", "wool", "shipit"],
        char: "\u{1F411}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      racehorse: {
        keywords: ["animal", "gamble", "luck"],
        char: "\u{1F40E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      pig2: {
        keywords: ["animal", "nature"],
        char: "\u{1F416}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rat: {
        keywords: ["animal", "mouse", "rodent"],
        char: "\u{1F400}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      mouse2: {
        keywords: ["animal", "nature", "rodent"],
        char: "\u{1F401}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rooster: {
        keywords: ["animal", "nature", "chicken"],
        char: "\u{1F413}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      turkey: {
        keywords: ["animal", "bird"],
        char: "\u{1F983}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dove: {
        keywords: ["animal", "bird"],
        char: "\u{1F54A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dog2: {
        keywords: ["animal", "nature", "friend", "doge", "pet", "faithful"],
        char: "\u{1F415}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      poodle: {
        keywords: ["dog", "animal", "101", "nature", "pet"],
        char: "\u{1F429}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cat2: {
        keywords: ["animal", "meow", "pet", "cats"],
        char: "\u{1F408}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rabbit2: {
        keywords: ["animal", "nature", "pet", "magic", "spring"],
        char: "\u{1F407}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      chipmunk: {
        keywords: ["animal", "nature", "rodent", "squirrel"],
        char: "\u{1F43F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hedgehog: {
        keywords: ["animal", "nature", "spiny"],
        char: "\u{1F994}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      raccoon: {
        keywords: ["animal", "nature"],
        char: "\u{1F99D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      llama: {
        keywords: ["animal", "nature", "alpaca"],
        char: "\u{1F999}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hippopotamus: {
        keywords: ["animal", "nature"],
        char: "\u{1F99B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      kangaroo: {
        keywords: ["animal", "nature", "australia", "joey", "hop", "marsupial"],
        char: "\u{1F998}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      badger: {
        keywords: ["animal", "nature", "honey"],
        char: "\u{1F9A1}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      swan: {
        keywords: ["animal", "nature", "bird"],
        char: "\u{1F9A2}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      peacock: {
        keywords: ["animal", "nature", "peahen", "bird"],
        char: "\u{1F99A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      parrot: {
        keywords: ["animal", "nature", "bird", "pirate", "talk"],
        char: "\u{1F99C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      lobster: {
        keywords: ["animal", "nature", "bisque", "claws", "seafood"],
        char: "\u{1F99E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      mosquito: {
        keywords: ["animal", "nature", "insect", "malaria"],
        char: "\u{1F99F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      paw_prints: {
        keywords: ["animal", "tracking", "footprints", "dog", "cat", "pet", "feet"],
        char: "\u{1F43E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dragon: {
        keywords: ["animal", "myth", "nature", "chinese", "green"],
        char: "\u{1F409}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dragon_face: {
        keywords: ["animal", "myth", "nature", "chinese", "green"],
        char: "\u{1F432}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cactus: {
        keywords: ["vegetable", "plant", "nature"],
        char: "\u{1F335}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      christmas_tree: {
        keywords: ["festival", "vacation", "december", "xmas", "celebration"],
        char: "\u{1F384}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      evergreen_tree: {
        keywords: ["plant", "nature"],
        char: "\u{1F332}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      deciduous_tree: {
        keywords: ["plant", "nature"],
        char: "\u{1F333}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      palm_tree: {
        keywords: ["plant", "vegetable", "nature", "summer", "beach", "mojito", "tropical"],
        char: "\u{1F334}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      seedling: {
        keywords: ["plant", "nature", "grass", "lawn", "spring"],
        char: "\u{1F331}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      herb: {
        keywords: ["vegetable", "plant", "medicine", "weed", "grass", "lawn"],
        char: "\u{1F33F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      shamrock: {
        keywords: ["vegetable", "plant", "nature", "irish", "clover"],
        char: "\u2618",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      four_leaf_clover: {
        keywords: ["vegetable", "plant", "nature", "lucky", "irish"],
        char: "\u{1F340}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bamboo: {
        keywords: ["plant", "nature", "vegetable", "panda", "pine_decoration"],
        char: "\u{1F38D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tanabata_tree: {
        keywords: ["plant", "nature", "branch", "summer"],
        char: "\u{1F38B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      leaves: {
        keywords: ["nature", "plant", "tree", "vegetable", "grass", "lawn", "spring"],
        char: "\u{1F343}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      fallen_leaf: {
        keywords: ["nature", "plant", "vegetable", "leaves"],
        char: "\u{1F342}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      maple_leaf: {
        keywords: ["nature", "plant", "vegetable", "ca", "fall"],
        char: "\u{1F341}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      ear_of_rice: {
        keywords: ["nature", "plant"],
        char: "\u{1F33E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      hibiscus: {
        keywords: ["plant", "vegetable", "flowers", "beach"],
        char: "\u{1F33A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sunflower: {
        keywords: ["nature", "plant", "fall"],
        char: "\u{1F33B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      rose: {
        keywords: ["flowers", "valentines", "love", "spring"],
        char: "\u{1F339}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      wilted_flower: {
        keywords: ["plant", "nature", "flower"],
        char: "\u{1F940}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tulip: {
        keywords: ["flowers", "plant", "nature", "summer", "spring"],
        char: "\u{1F337}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      blossom: {
        keywords: ["nature", "flowers", "yellow"],
        char: "\u{1F33C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cherry_blossom: {
        keywords: ["nature", "plant", "spring", "flower"],
        char: "\u{1F338}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      bouquet: {
        keywords: ["flowers", "nature", "spring"],
        char: "\u{1F490}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      mushroom: {
        keywords: ["plant", "vegetable"],
        char: "\u{1F344}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      chestnut: {
        keywords: ["food", "squirrel"],
        char: "\u{1F330}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      jack_o_lantern: {
        keywords: ["halloween", "light", "pumpkin", "creepy", "fall"],
        char: "\u{1F383}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      shell: {
        keywords: ["nature", "sea", "beach"],
        char: "\u{1F41A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      spider_web: {
        keywords: ["animal", "insect", "arachnid", "silk"],
        char: "\u{1F578}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      earth_americas: {
        keywords: ["globe", "world", "USA", "international"],
        char: "\u{1F30E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      earth_africa: {
        keywords: ["globe", "world", "international"],
        char: "\u{1F30D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      earth_asia: {
        keywords: ["globe", "world", "east", "international"],
        char: "\u{1F30F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      full_moon: {
        keywords: ["nature", "yellow", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F315}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      waning_gibbous_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep", "waxing_gibbous_moon"],
        char: "\u{1F316}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      last_quarter_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F317}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      waning_crescent_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F318}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      new_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F311}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      waxing_crescent_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F312}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      first_quarter_moon: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F313}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      waxing_gibbous_moon: {
        keywords: ["nature", "night", "sky", "gray", "twilight", "planet", "space", "evening", "sleep"],
        char: "\u{1F314}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      new_moon_with_face: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F31A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      full_moon_with_face: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F31D}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      first_quarter_moon_with_face: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F31B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      last_quarter_moon_with_face: {
        keywords: ["nature", "twilight", "planet", "space", "night", "evening", "sleep"],
        char: "\u{1F31C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sun_with_face: {
        keywords: ["nature", "morning", "sky"],
        char: "\u{1F31E}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      crescent_moon: {
        keywords: ["night", "sleep", "sky", "evening", "magic"],
        char: "\u{1F319}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      star: {
        keywords: ["night", "yellow"],
        char: "\u2B50",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      star2: {
        keywords: ["night", "sparkle", "awesome", "good", "magic"],
        char: "\u{1F31F}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dizzy: {
        keywords: ["star", "sparkle", "shoot", "magic"],
        char: "\u{1F4AB}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sparkles: {
        keywords: ["stars", "shine", "shiny", "cool", "awesome", "good", "magic"],
        char: "\u2728",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      comet: {
        keywords: ["space"],
        char: "\u2604",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sunny: {
        keywords: ["weather", "nature", "brightness", "summer", "beach", "spring"],
        char: "\u2600\uFE0F",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sun_behind_small_cloud: {
        keywords: ["weather"],
        char: "\u{1F324}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      partly_sunny: {
        keywords: ["weather", "nature", "cloudy", "morning", "fall", "spring"],
        char: "\u26C5",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sun_behind_large_cloud: {
        keywords: ["weather"],
        char: "\u{1F325}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sun_behind_rain_cloud: {
        keywords: ["weather"],
        char: "\u{1F326}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cloud: {
        keywords: ["weather", "sky"],
        char: "\u2601\uFE0F",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cloud_with_rain: {
        keywords: ["weather"],
        char: "\u{1F327}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cloud_with_lightning_and_rain: {
        keywords: ["weather", "lightning"],
        char: "\u26C8",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cloud_with_lightning: {
        keywords: ["weather", "thunder"],
        char: "\u{1F329}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      zap: {
        keywords: ["thunder", "weather", "lightning bolt", "fast"],
        char: "\u26A1",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      fire: {
        keywords: ["hot", "cook", "flame"],
        char: "\u{1F525}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      boom: {
        keywords: ["bomb", "explode", "explosion", "collision", "blown"],
        char: "\u{1F4A5}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      snowflake: {
        keywords: ["winter", "season", "cold", "weather", "christmas", "xmas"],
        char: "\u2744\uFE0F",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      cloud_with_snow: {
        keywords: ["weather"],
        char: "\u{1F328}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      snowman: {
        keywords: ["winter", "season", "cold", "weather", "christmas", "xmas", "frozen", "without_snow"],
        char: "\u26C4",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      snowman_with_snow: {
        keywords: ["winter", "season", "cold", "weather", "christmas", "xmas", "frozen"],
        char: "\u2603",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      wind_face: {
        keywords: ["gust", "air"],
        char: "\u{1F32C}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      dash: {
        keywords: ["wind", "air", "fast", "shoo", "fart", "smoke", "puff"],
        char: "\u{1F4A8}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      tornado: {
        keywords: ["weather", "cyclone", "twister"],
        char: "\u{1F32A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      fog: {
        keywords: ["weather"],
        char: "\u{1F32B}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      open_umbrella: {
        keywords: ["weather", "spring"],
        char: "\u2602",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      umbrella: {
        keywords: ["rainy", "weather", "spring"],
        char: "\u2614",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      droplet: {
        keywords: ["water", "drip", "faucet", "spring"],
        char: "\u{1F4A7}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      sweat_drops: {
        keywords: ["water", "drip", "oops"],
        char: "\u{1F4A6}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      ocean: {
        keywords: ["sea", "water", "wave", "nature", "tsunami", "disaster"],
        char: "\u{1F30A}",
        fitzpatrick_scale: false,
        category: "animals_and_nature"
      },
      green_apple: {
        keywords: ["fruit", "nature"],
        char: "\u{1F34F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      apple: {
        keywords: ["fruit", "mac", "school"],
        char: "\u{1F34E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pear: {
        keywords: ["fruit", "nature", "food"],
        char: "\u{1F350}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      tangerine: {
        keywords: ["food", "fruit", "nature", "orange"],
        char: "\u{1F34A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      lemon: {
        keywords: ["fruit", "nature"],
        char: "\u{1F34B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      banana: {
        keywords: ["fruit", "food", "monkey"],
        char: "\u{1F34C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      watermelon: {
        keywords: ["fruit", "food", "picnic", "summer"],
        char: "\u{1F349}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      grapes: {
        keywords: ["fruit", "food", "wine"],
        char: "\u{1F347}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      strawberry: {
        keywords: ["fruit", "food", "nature"],
        char: "\u{1F353}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      melon: {
        keywords: ["fruit", "nature", "food"],
        char: "\u{1F348}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cherries: {
        keywords: ["food", "fruit"],
        char: "\u{1F352}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      peach: {
        keywords: ["fruit", "nature", "food"],
        char: "\u{1F351}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pineapple: {
        keywords: ["fruit", "nature", "food"],
        char: "\u{1F34D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      coconut: {
        keywords: ["fruit", "nature", "food", "palm"],
        char: "\u{1F965}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      kiwi_fruit: {
        keywords: ["fruit", "food"],
        char: "\u{1F95D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      mango: {
        keywords: ["fruit", "food", "tropical"],
        char: "\u{1F96D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      avocado: {
        keywords: ["fruit", "food"],
        char: "\u{1F951}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      broccoli: {
        keywords: ["fruit", "food", "vegetable"],
        char: "\u{1F966}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      tomato: {
        keywords: ["fruit", "vegetable", "nature", "food"],
        char: "\u{1F345}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      eggplant: {
        keywords: ["vegetable", "nature", "food", "aubergine"],
        char: "\u{1F346}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cucumber: {
        keywords: ["fruit", "food", "pickle"],
        char: "\u{1F952}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      carrot: {
        keywords: ["vegetable", "food", "orange"],
        char: "\u{1F955}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      hot_pepper: {
        keywords: ["food", "spicy", "chilli", "chili"],
        char: "\u{1F336}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      potato: {
        keywords: ["food", "tuber", "vegatable", "starch"],
        char: "\u{1F954}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      corn: {
        keywords: ["food", "vegetable", "plant"],
        char: "\u{1F33D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      leafy_greens: {
        keywords: ["food", "vegetable", "plant", "bok choy", "cabbage", "kale", "lettuce"],
        char: "\u{1F96C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      sweet_potato: {
        keywords: ["food", "nature"],
        char: "\u{1F360}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      peanuts: {
        keywords: ["food", "nut"],
        char: "\u{1F95C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      honey_pot: {
        keywords: ["bees", "sweet", "kitchen"],
        char: "\u{1F36F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      croissant: {
        keywords: ["food", "bread", "french"],
        char: "\u{1F950}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bread: {
        keywords: ["food", "wheat", "breakfast", "toast"],
        char: "\u{1F35E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      baguette_bread: {
        keywords: ["food", "bread", "french"],
        char: "\u{1F956}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bagel: {
        keywords: ["food", "bread", "bakery", "schmear"],
        char: "\u{1F96F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pretzel: {
        keywords: ["food", "bread", "twisted"],
        char: "\u{1F968}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cheese: {
        keywords: ["food", "chadder"],
        char: "\u{1F9C0}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      egg: {
        keywords: ["food", "chicken", "breakfast"],
        char: "\u{1F95A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bacon: {
        keywords: ["food", "breakfast", "pork", "pig", "meat"],
        char: "\u{1F953}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      steak: {
        keywords: ["food", "cow", "meat", "cut", "chop", "lambchop", "porkchop"],
        char: "\u{1F969}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pancakes: {
        keywords: ["food", "breakfast", "flapjacks", "hotcakes"],
        char: "\u{1F95E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      poultry_leg: {
        keywords: ["food", "meat", "drumstick", "bird", "chicken", "turkey"],
        char: "\u{1F357}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      meat_on_bone: {
        keywords: ["good", "food", "drumstick"],
        char: "\u{1F356}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bone: {
        keywords: ["skeleton"],
        char: "\u{1F9B4}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fried_shrimp: {
        keywords: ["food", "animal", "appetizer", "summer"],
        char: "\u{1F364}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fried_egg: {
        keywords: ["food", "breakfast", "kitchen", "egg"],
        char: "\u{1F373}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      hamburger: {
        keywords: ["meat", "fast food", "beef", "cheeseburger", "mcdonalds", "burger king"],
        char: "\u{1F354}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fries: {
        keywords: ["chips", "snack", "fast food"],
        char: "\u{1F35F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      stuffed_flatbread: {
        keywords: ["food", "flatbread", "stuffed", "gyro"],
        char: "\u{1F959}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      hotdog: {
        keywords: ["food", "frankfurter"],
        char: "\u{1F32D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pizza: {
        keywords: ["food", "party"],
        char: "\u{1F355}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      sandwich: {
        keywords: ["food", "lunch", "bread"],
        char: "\u{1F96A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      canned_food: {
        keywords: ["food", "soup"],
        char: "\u{1F96B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      spaghetti: {
        keywords: ["food", "italian", "noodle"],
        char: "\u{1F35D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      taco: {
        keywords: ["food", "mexican"],
        char: "\u{1F32E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      burrito: {
        keywords: ["food", "mexican"],
        char: "\u{1F32F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      green_salad: {
        keywords: ["food", "healthy", "lettuce"],
        char: "\u{1F957}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      shallow_pan_of_food: {
        keywords: ["food", "cooking", "casserole", "paella"],
        char: "\u{1F958}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      ramen: {
        keywords: ["food", "japanese", "noodle", "chopsticks"],
        char: "\u{1F35C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      stew: {
        keywords: ["food", "meat", "soup"],
        char: "\u{1F372}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fish_cake: {
        keywords: ["food", "japan", "sea", "beach", "narutomaki", "pink", "swirl", "kamaboko", "surimi", "ramen"],
        char: "\u{1F365}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fortune_cookie: {
        keywords: ["food", "prophecy"],
        char: "\u{1F960}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      sushi: {
        keywords: ["food", "fish", "japanese", "rice"],
        char: "\u{1F363}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bento: {
        keywords: ["food", "japanese", "box"],
        char: "\u{1F371}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      curry: {
        keywords: ["food", "spicy", "hot", "indian"],
        char: "\u{1F35B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      rice_ball: {
        keywords: ["food", "japanese"],
        char: "\u{1F359}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      rice: {
        keywords: ["food", "china", "asian"],
        char: "\u{1F35A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      rice_cracker: {
        keywords: ["food", "japanese"],
        char: "\u{1F358}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      oden: {
        keywords: ["food", "japanese"],
        char: "\u{1F362}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      dango: {
        keywords: ["food", "dessert", "sweet", "japanese", "barbecue", "meat"],
        char: "\u{1F361}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      shaved_ice: {
        keywords: ["hot", "dessert", "summer"],
        char: "\u{1F367}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      ice_cream: {
        keywords: ["food", "hot", "dessert"],
        char: "\u{1F368}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      icecream: {
        keywords: ["food", "hot", "dessert", "summer"],
        char: "\u{1F366}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      pie: {
        keywords: ["food", "dessert", "pastry"],
        char: "\u{1F967}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cake: {
        keywords: ["food", "dessert"],
        char: "\u{1F370}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cupcake: {
        keywords: ["food", "dessert", "bakery", "sweet"],
        char: "\u{1F9C1}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      moon_cake: {
        keywords: ["food", "autumn"],
        char: "\u{1F96E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      birthday: {
        keywords: ["food", "dessert", "cake"],
        char: "\u{1F382}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      custard: {
        keywords: ["dessert", "food"],
        char: "\u{1F36E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      candy: {
        keywords: ["snack", "dessert", "sweet", "lolly"],
        char: "\u{1F36C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      lollipop: {
        keywords: ["food", "snack", "candy", "sweet"],
        char: "\u{1F36D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      chocolate_bar: {
        keywords: ["food", "snack", "dessert", "sweet"],
        char: "\u{1F36B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      popcorn: {
        keywords: ["food", "movie theater", "films", "snack"],
        char: "\u{1F37F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      dumpling: {
        keywords: ["food", "empanada", "pierogi", "potsticker"],
        char: "\u{1F95F}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      doughnut: {
        keywords: ["food", "dessert", "snack", "sweet", "donut"],
        char: "\u{1F369}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cookie: {
        keywords: ["food", "snack", "oreo", "chocolate", "sweet", "dessert"],
        char: "\u{1F36A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      milk_glass: {
        keywords: ["beverage", "drink", "cow"],
        char: "\u{1F95B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      beer: {
        keywords: ["relax", "beverage", "drink", "drunk", "party", "pub", "summer", "alcohol", "booze"],
        char: "\u{1F37A}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      beers: {
        keywords: ["relax", "beverage", "drink", "drunk", "party", "pub", "summer", "alcohol", "booze"],
        char: "\u{1F37B}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      clinking_glasses: {
        keywords: ["beverage", "drink", "party", "alcohol", "celebrate", "cheers", "wine", "champagne", "toast"],
        char: "\u{1F942}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      wine_glass: {
        keywords: ["drink", "beverage", "drunk", "alcohol", "booze"],
        char: "\u{1F377}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      tumbler_glass: {
        keywords: ["drink", "beverage", "drunk", "alcohol", "liquor", "booze", "bourbon", "scotch", "whisky", "glass", "shot"],
        char: "\u{1F943}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cocktail: {
        keywords: ["drink", "drunk", "alcohol", "beverage", "booze", "mojito"],
        char: "\u{1F378}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      tropical_drink: {
        keywords: ["beverage", "cocktail", "summer", "beach", "alcohol", "booze", "mojito"],
        char: "\u{1F379}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      champagne: {
        keywords: ["drink", "wine", "bottle", "celebration"],
        char: "\u{1F37E}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      sake: {
        keywords: ["wine", "drink", "drunk", "beverage", "japanese", "alcohol", "booze"],
        char: "\u{1F376}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      tea: {
        keywords: ["drink", "bowl", "breakfast", "green", "british"],
        char: "\u{1F375}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      cup_with_straw: {
        keywords: ["drink", "soda"],
        char: "\u{1F964}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      coffee: {
        keywords: ["beverage", "caffeine", "latte", "espresso"],
        char: "\u2615",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      baby_bottle: {
        keywords: ["food", "container", "milk"],
        char: "\u{1F37C}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      salt: {
        keywords: ["condiment", "shaker"],
        char: "\u{1F9C2}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      spoon: {
        keywords: ["cutlery", "kitchen", "tableware"],
        char: "\u{1F944}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      fork_and_knife: {
        keywords: ["cutlery", "kitchen"],
        char: "\u{1F374}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      plate_with_cutlery: {
        keywords: ["food", "eat", "meal", "lunch", "dinner", "restaurant"],
        char: "\u{1F37D}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      bowl_with_spoon: {
        keywords: ["food", "breakfast", "cereal", "oatmeal", "porridge"],
        char: "\u{1F963}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      takeout_box: {
        keywords: ["food", "leftovers"],
        char: "\u{1F961}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      chopsticks: {
        keywords: ["food"],
        char: "\u{1F962}",
        fitzpatrick_scale: false,
        category: "food_and_drink"
      },
      soccer: {
        keywords: ["sports", "football"],
        char: "\u26BD",
        fitzpatrick_scale: false,
        category: "activity"
      },
      basketball: {
        keywords: ["sports", "balls", "NBA"],
        char: "\u{1F3C0}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      football: {
        keywords: ["sports", "balls", "NFL"],
        char: "\u{1F3C8}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      baseball: {
        keywords: ["sports", "balls"],
        char: "\u26BE",
        fitzpatrick_scale: false,
        category: "activity"
      },
      softball: {
        keywords: ["sports", "balls"],
        char: "\u{1F94E}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      tennis: {
        keywords: ["sports", "balls", "green"],
        char: "\u{1F3BE}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      volleyball: {
        keywords: ["sports", "balls"],
        char: "\u{1F3D0}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      rugby_football: {
        keywords: ["sports", "team"],
        char: "\u{1F3C9}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      flying_disc: {
        keywords: ["sports", "frisbee", "ultimate"],
        char: "\u{1F94F}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      "8ball": {
        keywords: ["pool", "hobby", "game", "luck", "magic"],
        char: "\u{1F3B1}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      golf: {
        keywords: ["sports", "business", "flag", "hole", "summer"],
        char: "\u26F3",
        fitzpatrick_scale: false,
        category: "activity"
      },
      golfing_woman: {
        keywords: ["sports", "business", "woman", "female"],
        char: "\u{1F3CC}\uFE0F\u200D\u2640\uFE0F",
        fitzpatrick_scale: false,
        category: "activity"
      },
      golfing_man: {
        keywords: ["sports", "business"],
        char: "\u{1F3CC}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      ping_pong: {
        keywords: ["sports", "pingpong"],
        char: "\u{1F3D3}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      badminton: {
        keywords: ["sports"],
        char: "\u{1F3F8}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      goal_net: {
        keywords: ["sports"],
        char: "\u{1F945}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      ice_hockey: {
        keywords: ["sports"],
        char: "\u{1F3D2}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      field_hockey: {
        keywords: ["sports"],
        char: "\u{1F3D1}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      lacrosse: {
        keywords: ["sports", "ball", "stick"],
        char: "\u{1F94D}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      cricket: {
        keywords: ["sports"],
        char: "\u{1F3CF}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      ski: {
        keywords: ["sports", "winter", "cold", "snow"],
        char: "\u{1F3BF}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      skier: {
        keywords: ["sports", "winter", "snow"],
        char: "\u26F7",
        fitzpatrick_scale: false,
        category: "activity"
      },
      snowboarder: {
        keywords: ["sports", "winter"],
        char: "\u{1F3C2}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      person_fencing: {
        keywords: ["sports", "fencing", "sword"],
        char: "\u{1F93A}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      women_wrestling: {
        keywords: ["sports", "wrestlers"],
        char: "\u{1F93C}\u200D\u2640\uFE0F",
        fitzpatrick_scale: false,
        category: "activity"
      },
      men_wrestling: {
        keywords: ["sports", "wrestlers"],
        char: "\u{1F93C}\u200D\u2642\uFE0F",
        fitzpatrick_scale: false,
        category: "activity"
      },
      woman_cartwheeling: {
        keywords: ["gymnastics"],
        char: "\u{1F938}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      man_cartwheeling: {
        keywords: ["gymnastics"],
        char: "\u{1F938}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      woman_playing_handball: {
        keywords: ["sports"],
        char: "\u{1F93E}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      man_playing_handball: {
        keywords: ["sports"],
        char: "\u{1F93E}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      ice_skate: {
        keywords: ["sports"],
        char: "\u26F8",
        fitzpatrick_scale: false,
        category: "activity"
      },
      curling_stone: {
        keywords: ["sports"],
        char: "\u{1F94C}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      skateboard: {
        keywords: ["board"],
        char: "\u{1F6F9}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      sled: {
        keywords: ["sleigh", "luge", "toboggan"],
        char: "\u{1F6F7}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      bow_and_arrow: {
        keywords: ["sports"],
        char: "\u{1F3F9}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      fishing_pole_and_fish: {
        keywords: ["food", "hobby", "summer"],
        char: "\u{1F3A3}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      boxing_glove: {
        keywords: ["sports", "fighting"],
        char: "\u{1F94A}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      martial_arts_uniform: {
        keywords: ["judo", "karate", "taekwondo"],
        char: "\u{1F94B}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      rowing_woman: {
        keywords: ["sports", "hobby", "water", "ship", "woman", "female"],
        char: "\u{1F6A3}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      rowing_man: {
        keywords: ["sports", "hobby", "water", "ship"],
        char: "\u{1F6A3}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      climbing_woman: {
        keywords: ["sports", "hobby", "woman", "female", "rock"],
        char: "\u{1F9D7}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      climbing_man: {
        keywords: ["sports", "hobby", "man", "male", "rock"],
        char: "\u{1F9D7}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      swimming_woman: {
        keywords: ["sports", "exercise", "human", "athlete", "water", "summer", "woman", "female"],
        char: "\u{1F3CA}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      swimming_man: {
        keywords: ["sports", "exercise", "human", "athlete", "water", "summer"],
        char: "\u{1F3CA}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      woman_playing_water_polo: {
        keywords: ["sports", "pool"],
        char: "\u{1F93D}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      man_playing_water_polo: {
        keywords: ["sports", "pool"],
        char: "\u{1F93D}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      woman_in_lotus_position: {
        keywords: ["woman", "female", "meditation", "yoga", "serenity", "zen", "mindfulness"],
        char: "\u{1F9D8}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      man_in_lotus_position: {
        keywords: ["man", "male", "meditation", "yoga", "serenity", "zen", "mindfulness"],
        char: "\u{1F9D8}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      surfing_woman: {
        keywords: ["sports", "ocean", "sea", "summer", "beach", "woman", "female"],
        char: "\u{1F3C4}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      surfing_man: {
        keywords: ["sports", "ocean", "sea", "summer", "beach"],
        char: "\u{1F3C4}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      bath: {
        keywords: ["clean", "shower", "bathroom"],
        char: "\u{1F6C0}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      basketball_woman: {
        keywords: ["sports", "human", "woman", "female"],
        char: "\u26F9\uFE0F\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      basketball_man: {
        keywords: ["sports", "human"],
        char: "\u26F9",
        fitzpatrick_scale: true,
        category: "activity"
      },
      weight_lifting_woman: {
        keywords: ["sports", "training", "exercise", "woman", "female"],
        char: "\u{1F3CB}\uFE0F\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      weight_lifting_man: {
        keywords: ["sports", "training", "exercise"],
        char: "\u{1F3CB}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      biking_woman: {
        keywords: ["sports", "bike", "exercise", "hipster", "woman", "female"],
        char: "\u{1F6B4}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      biking_man: {
        keywords: ["sports", "bike", "exercise", "hipster"],
        char: "\u{1F6B4}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      mountain_biking_woman: {
        keywords: ["transportation", "sports", "human", "race", "bike", "woman", "female"],
        char: "\u{1F6B5}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      mountain_biking_man: {
        keywords: ["transportation", "sports", "human", "race", "bike"],
        char: "\u{1F6B5}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      horse_racing: {
        keywords: ["animal", "betting", "competition", "gambling", "luck"],
        char: "\u{1F3C7}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      business_suit_levitating: {
        keywords: ["suit", "business", "levitate", "hover", "jump"],
        char: "\u{1F574}",
        fitzpatrick_scale: true,
        category: "activity"
      },
      trophy: {
        keywords: ["win", "award", "contest", "place", "ftw", "ceremony"],
        char: "\u{1F3C6}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      running_shirt_with_sash: {
        keywords: ["play", "pageant"],
        char: "\u{1F3BD}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      medal_sports: {
        keywords: ["award", "winning"],
        char: "\u{1F3C5}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      medal_military: {
        keywords: ["award", "winning", "army"],
        char: "\u{1F396}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      "1st_place_medal": {
        keywords: ["award", "winning", "first"],
        char: "\u{1F947}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      "2nd_place_medal": {
        keywords: ["award", "second"],
        char: "\u{1F948}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      "3rd_place_medal": {
        keywords: ["award", "third"],
        char: "\u{1F949}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      reminder_ribbon: {
        keywords: ["sports", "cause", "support", "awareness"],
        char: "\u{1F397}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      rosette: {
        keywords: ["flower", "decoration", "military"],
        char: "\u{1F3F5}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      ticket: {
        keywords: ["event", "concert", "pass"],
        char: "\u{1F3AB}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      tickets: {
        keywords: ["sports", "concert", "entrance"],
        char: "\u{1F39F}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      performing_arts: {
        keywords: ["acting", "theater", "drama"],
        char: "\u{1F3AD}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      art: {
        keywords: ["design", "paint", "draw", "colors"],
        char: "\u{1F3A8}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      circus_tent: {
        keywords: ["festival", "carnival", "party"],
        char: "\u{1F3AA}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      woman_juggling: {
        keywords: ["juggle", "balance", "skill", "multitask"],
        char: "\u{1F939}\u200D\u2640\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      man_juggling: {
        keywords: ["juggle", "balance", "skill", "multitask"],
        char: "\u{1F939}\u200D\u2642\uFE0F",
        fitzpatrick_scale: true,
        category: "activity"
      },
      microphone: {
        keywords: ["sound", "music", "PA", "sing", "talkshow"],
        char: "\u{1F3A4}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      headphones: {
        keywords: ["music", "score", "gadgets"],
        char: "\u{1F3A7}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      musical_score: {
        keywords: ["treble", "clef", "compose"],
        char: "\u{1F3BC}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      musical_keyboard: {
        keywords: ["piano", "instrument", "compose"],
        char: "\u{1F3B9}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      drum: {
        keywords: ["music", "instrument", "drumsticks", "snare"],
        char: "\u{1F941}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      saxophone: {
        keywords: ["music", "instrument", "jazz", "blues"],
        char: "\u{1F3B7}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      trumpet: {
        keywords: ["music", "brass"],
        char: "\u{1F3BA}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      guitar: {
        keywords: ["music", "instrument"],
        char: "\u{1F3B8}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      violin: {
        keywords: ["music", "instrument", "orchestra", "symphony"],
        char: "\u{1F3BB}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      clapper: {
        keywords: ["movie", "film", "record"],
        char: "\u{1F3AC}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      video_game: {
        keywords: ["play", "console", "PS4", "controller"],
        char: "\u{1F3AE}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      space_invader: {
        keywords: ["game", "arcade", "play"],
        char: "\u{1F47E}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      dart: {
        keywords: ["game", "play", "bar", "target", "bullseye"],
        char: "\u{1F3AF}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      game_die: {
        keywords: ["dice", "random", "tabletop", "play", "luck"],
        char: "\u{1F3B2}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      chess_pawn: {
        keywords: ["expendable"],
        char: "\u265F",
        fitzpatrick_scale: false,
        category: "activity"
      },
      slot_machine: {
        keywords: ["bet", "gamble", "vegas", "fruit machine", "luck", "casino"],
        char: "\u{1F3B0}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      jigsaw: {
        keywords: ["interlocking", "puzzle", "piece"],
        char: "\u{1F9E9}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      bowling: {
        keywords: ["sports", "fun", "play"],
        char: "\u{1F3B3}",
        fitzpatrick_scale: false,
        category: "activity"
      },
      red_car: {
        keywords: ["red", "transportation", "vehicle"],
        char: "\u{1F697}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      taxi: {
        keywords: ["uber", "vehicle", "cars", "transportation"],
        char: "\u{1F695}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      blue_car: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F699}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bus: {
        keywords: ["car", "vehicle", "transportation"],
        char: "\u{1F68C}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      trolleybus: {
        keywords: ["bart", "transportation", "vehicle"],
        char: "\u{1F68E}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      racing_car: {
        keywords: ["sports", "race", "fast", "formula", "f1"],
        char: "\u{1F3CE}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      police_car: {
        keywords: ["vehicle", "cars", "transportation", "law", "legal", "enforcement"],
        char: "\u{1F693}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      ambulance: {
        keywords: ["health", "911", "hospital"],
        char: "\u{1F691}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      fire_engine: {
        keywords: ["transportation", "cars", "vehicle"],
        char: "\u{1F692}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      minibus: {
        keywords: ["vehicle", "car", "transportation"],
        char: "\u{1F690}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      truck: {
        keywords: ["cars", "transportation"],
        char: "\u{1F69A}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      articulated_lorry: {
        keywords: ["vehicle", "cars", "transportation", "express"],
        char: "\u{1F69B}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      tractor: {
        keywords: ["vehicle", "car", "farming", "agriculture"],
        char: "\u{1F69C}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      kick_scooter: {
        keywords: ["vehicle", "kick", "razor"],
        char: "\u{1F6F4}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      motorcycle: {
        keywords: ["race", "sports", "fast"],
        char: "\u{1F3CD}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bike: {
        keywords: ["sports", "bicycle", "exercise", "hipster"],
        char: "\u{1F6B2}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      motor_scooter: {
        keywords: ["vehicle", "vespa", "sasha"],
        char: "\u{1F6F5}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      rotating_light: {
        keywords: ["police", "ambulance", "911", "emergency", "alert", "error", "pinged", "law", "legal"],
        char: "\u{1F6A8}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      oncoming_police_car: {
        keywords: ["vehicle", "law", "legal", "enforcement", "911"],
        char: "\u{1F694}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      oncoming_bus: {
        keywords: ["vehicle", "transportation"],
        char: "\u{1F68D}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      oncoming_automobile: {
        keywords: ["car", "vehicle", "transportation"],
        char: "\u{1F698}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      oncoming_taxi: {
        keywords: ["vehicle", "cars", "uber"],
        char: "\u{1F696}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      aerial_tramway: {
        keywords: ["transportation", "vehicle", "ski"],
        char: "\u{1F6A1}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mountain_cableway: {
        keywords: ["transportation", "vehicle", "ski"],
        char: "\u{1F6A0}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      suspension_railway: {
        keywords: ["vehicle", "transportation"],
        char: "\u{1F69F}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      railway_car: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F683}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      train: {
        keywords: ["transportation", "vehicle", "carriage", "public", "travel"],
        char: "\u{1F68B}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      monorail: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F69D}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bullettrain_side: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F684}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bullettrain_front: {
        keywords: ["transportation", "vehicle", "speed", "fast", "public", "travel"],
        char: "\u{1F685}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      light_rail: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F688}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mountain_railway: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F69E}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      steam_locomotive: {
        keywords: ["transportation", "vehicle", "train"],
        char: "\u{1F682}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      train2: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F686}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      metro: {
        keywords: ["transportation", "blue-square", "mrt", "underground", "tube"],
        char: "\u{1F687}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      tram: {
        keywords: ["transportation", "vehicle"],
        char: "\u{1F68A}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      station: {
        keywords: ["transportation", "vehicle", "public"],
        char: "\u{1F689}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      flying_saucer: {
        keywords: ["transportation", "vehicle", "ufo"],
        char: "\u{1F6F8}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      helicopter: {
        keywords: ["transportation", "vehicle", "fly"],
        char: "\u{1F681}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      small_airplane: {
        keywords: ["flight", "transportation", "fly", "vehicle"],
        char: "\u{1F6E9}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      airplane: {
        keywords: ["vehicle", "transportation", "flight", "fly"],
        char: "\u2708\uFE0F",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      flight_departure: {
        keywords: ["airport", "flight", "landing"],
        char: "\u{1F6EB}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      flight_arrival: {
        keywords: ["airport", "flight", "boarding"],
        char: "\u{1F6EC}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      sailboat: {
        keywords: ["ship", "summer", "transportation", "water", "sailing"],
        char: "\u26F5",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      motor_boat: {
        keywords: ["ship"],
        char: "\u{1F6E5}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      speedboat: {
        keywords: ["ship", "transportation", "vehicle", "summer"],
        char: "\u{1F6A4}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      ferry: {
        keywords: ["boat", "ship", "yacht"],
        char: "\u26F4",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      passenger_ship: {
        keywords: ["yacht", "cruise", "ferry"],
        char: "\u{1F6F3}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      rocket: {
        keywords: ["launch", "ship", "staffmode", "NASA", "outer space", "outer_space", "fly"],
        char: "\u{1F680}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      artificial_satellite: {
        keywords: ["communication", "gps", "orbit", "spaceflight", "NASA", "ISS"],
        char: "\u{1F6F0}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      seat: {
        keywords: ["sit", "airplane", "transport", "bus", "flight", "fly"],
        char: "\u{1F4BA}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      canoe: {
        keywords: ["boat", "paddle", "water", "ship"],
        char: "\u{1F6F6}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      anchor: {
        keywords: ["ship", "ferry", "sea", "boat"],
        char: "\u2693",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      construction: {
        keywords: ["wip", "progress", "caution", "warning"],
        char: "\u{1F6A7}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      fuelpump: {
        keywords: ["gas station", "petroleum"],
        char: "\u26FD",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      busstop: {
        keywords: ["transportation", "wait"],
        char: "\u{1F68F}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      vertical_traffic_light: {
        keywords: ["transportation", "driving"],
        char: "\u{1F6A6}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      traffic_light: {
        keywords: ["transportation", "signal"],
        char: "\u{1F6A5}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      checkered_flag: {
        keywords: ["contest", "finishline", "race", "gokart"],
        char: "\u{1F3C1}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      ship: {
        keywords: ["transportation", "titanic", "deploy"],
        char: "\u{1F6A2}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      ferris_wheel: {
        keywords: ["photo", "carnival", "londoneye"],
        char: "\u{1F3A1}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      roller_coaster: {
        keywords: ["carnival", "playground", "photo", "fun"],
        char: "\u{1F3A2}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      carousel_horse: {
        keywords: ["photo", "carnival"],
        char: "\u{1F3A0}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      building_construction: {
        keywords: ["wip", "working", "progress"],
        char: "\u{1F3D7}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      foggy: {
        keywords: ["photo", "mountain"],
        char: "\u{1F301}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      tokyo_tower: {
        keywords: ["photo", "japanese"],
        char: "\u{1F5FC}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      factory: {
        keywords: ["building", "industry", "pollution", "smoke"],
        char: "\u{1F3ED}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      fountain: {
        keywords: ["photo", "summer", "water", "fresh"],
        char: "\u26F2",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      rice_scene: {
        keywords: ["photo", "japan", "asia", "tsukimi"],
        char: "\u{1F391}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mountain: {
        keywords: ["photo", "nature", "environment"],
        char: "\u26F0",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mountain_snow: {
        keywords: ["photo", "nature", "environment", "winter", "cold"],
        char: "\u{1F3D4}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mount_fuji: {
        keywords: ["photo", "mountain", "nature", "japanese"],
        char: "\u{1F5FB}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      volcano: {
        keywords: ["photo", "nature", "disaster"],
        char: "\u{1F30B}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      japan: {
        keywords: ["nation", "country", "japanese", "asia"],
        char: "\u{1F5FE}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      camping: {
        keywords: ["photo", "outdoors", "tent"],
        char: "\u{1F3D5}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      tent: {
        keywords: ["photo", "camping", "outdoors"],
        char: "\u26FA",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      national_park: {
        keywords: ["photo", "environment", "nature"],
        char: "\u{1F3DE}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      motorway: {
        keywords: ["road", "cupertino", "interstate", "highway"],
        char: "\u{1F6E3}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      railway_track: {
        keywords: ["train", "transportation"],
        char: "\u{1F6E4}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      sunrise: {
        keywords: ["morning", "view", "vacation", "photo"],
        char: "\u{1F305}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      sunrise_over_mountains: {
        keywords: ["view", "vacation", "photo"],
        char: "\u{1F304}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      desert: {
        keywords: ["photo", "warm", "saharah"],
        char: "\u{1F3DC}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      beach_umbrella: {
        keywords: ["weather", "summer", "sunny", "sand", "mojito"],
        char: "\u{1F3D6}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      desert_island: {
        keywords: ["photo", "tropical", "mojito"],
        char: "\u{1F3DD}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      city_sunrise: {
        keywords: ["photo", "good morning", "dawn"],
        char: "\u{1F307}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      city_sunset: {
        keywords: ["photo", "evening", "sky", "buildings"],
        char: "\u{1F306}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      cityscape: {
        keywords: ["photo", "night life", "urban"],
        char: "\u{1F3D9}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      night_with_stars: {
        keywords: ["evening", "city", "downtown"],
        char: "\u{1F303}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bridge_at_night: {
        keywords: ["photo", "sanfrancisco"],
        char: "\u{1F309}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      milky_way: {
        keywords: ["photo", "space", "stars"],
        char: "\u{1F30C}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      stars: {
        keywords: ["night", "photo"],
        char: "\u{1F320}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      sparkler: {
        keywords: ["stars", "night", "shine"],
        char: "\u{1F387}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      fireworks: {
        keywords: ["photo", "festival", "carnival", "congratulations"],
        char: "\u{1F386}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      rainbow: {
        keywords: ["nature", "happy", "unicorn_face", "photo", "sky", "spring"],
        char: "\u{1F308}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      houses: {
        keywords: ["buildings", "photo"],
        char: "\u{1F3D8}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      european_castle: {
        keywords: ["building", "royalty", "history"],
        char: "\u{1F3F0}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      japanese_castle: {
        keywords: ["photo", "building"],
        char: "\u{1F3EF}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      stadium: {
        keywords: ["photo", "place", "sports", "concert", "venue"],
        char: "\u{1F3DF}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      statue_of_liberty: {
        keywords: ["american", "newyork"],
        char: "\u{1F5FD}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      house: {
        keywords: ["building", "home"],
        char: "\u{1F3E0}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      house_with_garden: {
        keywords: ["home", "plant", "nature"],
        char: "\u{1F3E1}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      derelict_house: {
        keywords: ["abandon", "evict", "broken", "building"],
        char: "\u{1F3DA}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      office: {
        keywords: ["building", "bureau", "work"],
        char: "\u{1F3E2}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      department_store: {
        keywords: ["building", "shopping", "mall"],
        char: "\u{1F3EC}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      post_office: {
        keywords: ["building", "envelope", "communication"],
        char: "\u{1F3E3}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      european_post_office: {
        keywords: ["building", "email"],
        char: "\u{1F3E4}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      hospital: {
        keywords: ["building", "health", "surgery", "doctor"],
        char: "\u{1F3E5}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      bank: {
        keywords: ["building", "money", "sales", "cash", "business", "enterprise"],
        char: "\u{1F3E6}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      hotel: {
        keywords: ["building", "accomodation", "checkin"],
        char: "\u{1F3E8}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      convenience_store: {
        keywords: ["building", "shopping", "groceries"],
        char: "\u{1F3EA}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      school: {
        keywords: ["building", "student", "education", "learn", "teach"],
        char: "\u{1F3EB}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      love_hotel: {
        keywords: ["like", "affection", "dating"],
        char: "\u{1F3E9}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      wedding: {
        keywords: ["love", "like", "affection", "couple", "marriage", "bride", "groom"],
        char: "\u{1F492}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      classical_building: {
        keywords: ["art", "culture", "history"],
        char: "\u{1F3DB}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      church: {
        keywords: ["building", "religion", "christ"],
        char: "\u26EA",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      mosque: {
        keywords: ["islam", "worship", "minaret"],
        char: "\u{1F54C}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      synagogue: {
        keywords: ["judaism", "worship", "temple", "jewish"],
        char: "\u{1F54D}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      kaaba: {
        keywords: ["mecca", "mosque", "islam"],
        char: "\u{1F54B}",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      shinto_shrine: {
        keywords: ["temple", "japan", "kyoto"],
        char: "\u26E9",
        fitzpatrick_scale: false,
        category: "travel_and_places"
      },
      watch: {
        keywords: ["time", "accessories"],
        char: "\u231A",
        fitzpatrick_scale: false,
        category: "objects"
      },
      iphone: {
        keywords: ["technology", "apple", "gadgets", "dial"],
        char: "\u{1F4F1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      calling: {
        keywords: ["iphone", "incoming"],
        char: "\u{1F4F2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      computer: {
        keywords: ["technology", "laptop", "screen", "display", "monitor"],
        char: "\u{1F4BB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      keyboard: {
        keywords: ["technology", "computer", "type", "input", "text"],
        char: "\u2328",
        fitzpatrick_scale: false,
        category: "objects"
      },
      desktop_computer: {
        keywords: ["technology", "computing", "screen"],
        char: "\u{1F5A5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      printer: {
        keywords: ["paper", "ink"],
        char: "\u{1F5A8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      computer_mouse: {
        keywords: ["click"],
        char: "\u{1F5B1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      trackball: {
        keywords: ["technology", "trackpad"],
        char: "\u{1F5B2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      joystick: {
        keywords: ["game", "play"],
        char: "\u{1F579}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      clamp: {
        keywords: ["tool"],
        char: "\u{1F5DC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      minidisc: {
        keywords: ["technology", "record", "data", "disk", "90s"],
        char: "\u{1F4BD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      floppy_disk: {
        keywords: ["oldschool", "technology", "save", "90s", "80s"],
        char: "\u{1F4BE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      cd: {
        keywords: ["technology", "dvd", "disk", "disc", "90s"],
        char: "\u{1F4BF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      dvd: {
        keywords: ["cd", "disk", "disc"],
        char: "\u{1F4C0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      vhs: {
        keywords: ["record", "video", "oldschool", "90s", "80s"],
        char: "\u{1F4FC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      camera: {
        keywords: ["gadgets", "photography"],
        char: "\u{1F4F7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      camera_flash: {
        keywords: ["photography", "gadgets"],
        char: "\u{1F4F8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      video_camera: {
        keywords: ["film", "record"],
        char: "\u{1F4F9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      movie_camera: {
        keywords: ["film", "record"],
        char: "\u{1F3A5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      film_projector: {
        keywords: ["video", "tape", "record", "movie"],
        char: "\u{1F4FD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      film_strip: {
        keywords: ["movie"],
        char: "\u{1F39E}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      telephone_receiver: {
        keywords: ["technology", "communication", "dial"],
        char: "\u{1F4DE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      phone: {
        keywords: ["technology", "communication", "dial", "telephone"],
        char: "\u260E\uFE0F",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pager: {
        keywords: ["bbcall", "oldschool", "90s"],
        char: "\u{1F4DF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      fax: {
        keywords: ["communication", "technology"],
        char: "\u{1F4E0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      tv: {
        keywords: ["technology", "program", "oldschool", "show", "television"],
        char: "\u{1F4FA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      radio: {
        keywords: ["communication", "music", "podcast", "program"],
        char: "\u{1F4FB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      studio_microphone: {
        keywords: ["sing", "recording", "artist", "talkshow"],
        char: "\u{1F399}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      level_slider: {
        keywords: ["scale"],
        char: "\u{1F39A}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      control_knobs: {
        keywords: ["dial"],
        char: "\u{1F39B}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      compass: {
        keywords: ["magnetic", "navigation", "orienteering"],
        char: "\u{1F9ED}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      stopwatch: {
        keywords: ["time", "deadline"],
        char: "\u23F1",
        fitzpatrick_scale: false,
        category: "objects"
      },
      timer_clock: {
        keywords: ["alarm"],
        char: "\u23F2",
        fitzpatrick_scale: false,
        category: "objects"
      },
      alarm_clock: {
        keywords: ["time", "wake"],
        char: "\u23F0",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mantelpiece_clock: {
        keywords: ["time"],
        char: "\u{1F570}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hourglass_flowing_sand: {
        keywords: ["oldschool", "time", "countdown"],
        char: "\u23F3",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hourglass: {
        keywords: ["time", "clock", "oldschool", "limit", "exam", "quiz", "test"],
        char: "\u231B",
        fitzpatrick_scale: false,
        category: "objects"
      },
      satellite: {
        keywords: ["communication", "future", "radio", "space"],
        char: "\u{1F4E1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      battery: {
        keywords: ["power", "energy", "sustain"],
        char: "\u{1F50B}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      electric_plug: {
        keywords: ["charger", "power"],
        char: "\u{1F50C}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bulb: {
        keywords: ["light", "electricity", "idea"],
        char: "\u{1F4A1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      flashlight: {
        keywords: ["dark", "camping", "sight", "night"],
        char: "\u{1F526}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      candle: {
        keywords: ["fire", "wax"],
        char: "\u{1F56F}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      fire_extinguisher: {
        keywords: ["quench"],
        char: "\u{1F9EF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      wastebasket: {
        keywords: ["bin", "trash", "rubbish", "garbage", "toss"],
        char: "\u{1F5D1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      oil_drum: {
        keywords: ["barrell"],
        char: "\u{1F6E2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      money_with_wings: {
        keywords: ["dollar", "bills", "payment", "sale"],
        char: "\u{1F4B8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      dollar: {
        keywords: ["money", "sales", "bill", "currency"],
        char: "\u{1F4B5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      yen: {
        keywords: ["money", "sales", "japanese", "dollar", "currency"],
        char: "\u{1F4B4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      euro: {
        keywords: ["money", "sales", "dollar", "currency"],
        char: "\u{1F4B6}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pound: {
        keywords: ["british", "sterling", "money", "sales", "bills", "uk", "england", "currency"],
        char: "\u{1F4B7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      moneybag: {
        keywords: ["dollar", "payment", "coins", "sale"],
        char: "\u{1F4B0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      credit_card: {
        keywords: ["money", "sales", "dollar", "bill", "payment", "shopping"],
        char: "\u{1F4B3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      gem: {
        keywords: ["blue", "ruby", "diamond", "jewelry"],
        char: "\u{1F48E}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      balance_scale: {
        keywords: ["law", "fairness", "weight"],
        char: "\u2696",
        fitzpatrick_scale: false,
        category: "objects"
      },
      toolbox: {
        keywords: ["tools", "diy", "fix", "maintainer", "mechanic"],
        char: "\u{1F9F0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      wrench: {
        keywords: ["tools", "diy", "ikea", "fix", "maintainer"],
        char: "\u{1F527}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hammer: {
        keywords: ["tools", "build", "create"],
        char: "\u{1F528}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hammer_and_pick: {
        keywords: ["tools", "build", "create"],
        char: "\u2692",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hammer_and_wrench: {
        keywords: ["tools", "build", "create"],
        char: "\u{1F6E0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pick: {
        keywords: ["tools", "dig"],
        char: "\u26CF",
        fitzpatrick_scale: false,
        category: "objects"
      },
      nut_and_bolt: {
        keywords: ["handy", "tools", "fix"],
        char: "\u{1F529}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      gear: {
        keywords: ["cog"],
        char: "\u2699",
        fitzpatrick_scale: false,
        category: "objects"
      },
      brick: {
        keywords: ["bricks"],
        char: "\u{1F9F1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      chains: {
        keywords: ["lock", "arrest"],
        char: "\u26D3",
        fitzpatrick_scale: false,
        category: "objects"
      },
      magnet: {
        keywords: ["attraction", "magnetic"],
        char: "\u{1F9F2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      gun: {
        keywords: ["violence", "weapon", "pistol", "revolver"],
        char: "\u{1F52B}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bomb: {
        keywords: ["boom", "explode", "explosion", "terrorism"],
        char: "\u{1F4A3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      firecracker: {
        keywords: ["dynamite", "boom", "explode", "explosion", "explosive"],
        char: "\u{1F9E8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hocho: {
        keywords: ["knife", "blade", "cutlery", "kitchen", "weapon"],
        char: "\u{1F52A}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      dagger: {
        keywords: ["weapon"],
        char: "\u{1F5E1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      crossed_swords: {
        keywords: ["weapon"],
        char: "\u2694",
        fitzpatrick_scale: false,
        category: "objects"
      },
      shield: {
        keywords: ["protection", "security"],
        char: "\u{1F6E1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      smoking: {
        keywords: ["kills", "tobacco", "cigarette", "joint", "smoke"],
        char: "\u{1F6AC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      skull_and_crossbones: {
        keywords: ["poison", "danger", "deadly", "scary", "death", "pirate", "evil"],
        char: "\u2620",
        fitzpatrick_scale: false,
        category: "objects"
      },
      coffin: {
        keywords: ["vampire", "dead", "die", "death", "rip", "graveyard", "cemetery", "casket", "funeral", "box"],
        char: "\u26B0",
        fitzpatrick_scale: false,
        category: "objects"
      },
      funeral_urn: {
        keywords: ["dead", "die", "death", "rip", "ashes"],
        char: "\u26B1",
        fitzpatrick_scale: false,
        category: "objects"
      },
      amphora: {
        keywords: ["vase", "jar"],
        char: "\u{1F3FA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      crystal_ball: {
        keywords: ["disco", "party", "magic", "circus", "fortune_teller"],
        char: "\u{1F52E}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      prayer_beads: {
        keywords: ["dhikr", "religious"],
        char: "\u{1F4FF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      nazar_amulet: {
        keywords: ["bead", "charm"],
        char: "\u{1F9FF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      barber: {
        keywords: ["hair", "salon", "style"],
        char: "\u{1F488}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      alembic: {
        keywords: ["distilling", "science", "experiment", "chemistry"],
        char: "\u2697",
        fitzpatrick_scale: false,
        category: "objects"
      },
      telescope: {
        keywords: ["stars", "space", "zoom", "science", "astronomy"],
        char: "\u{1F52D}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      microscope: {
        keywords: ["laboratory", "experiment", "zoomin", "science", "study"],
        char: "\u{1F52C}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      hole: {
        keywords: ["embarrassing"],
        char: "\u{1F573}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pill: {
        keywords: ["health", "medicine", "doctor", "pharmacy", "drug"],
        char: "\u{1F48A}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      syringe: {
        keywords: ["health", "hospital", "drugs", "blood", "medicine", "needle", "doctor", "nurse"],
        char: "\u{1F489}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      dna: {
        keywords: ["biologist", "genetics", "life"],
        char: "\u{1F9EC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      microbe: {
        keywords: ["amoeba", "bacteria", "germs"],
        char: "\u{1F9A0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      petri_dish: {
        keywords: ["bacteria", "biology", "culture", "lab"],
        char: "\u{1F9EB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      test_tube: {
        keywords: ["chemistry", "experiment", "lab", "science"],
        char: "\u{1F9EA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      thermometer: {
        keywords: ["weather", "temperature", "hot", "cold"],
        char: "\u{1F321}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      broom: {
        keywords: ["cleaning", "sweeping", "witch"],
        char: "\u{1F9F9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      basket: {
        keywords: ["laundry"],
        char: "\u{1F9FA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      toilet_paper: {
        keywords: ["roll"],
        char: "\u{1F9FB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      label: {
        keywords: ["sale", "tag"],
        char: "\u{1F3F7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bookmark: {
        keywords: ["favorite", "label", "save"],
        char: "\u{1F516}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      toilet: {
        keywords: ["restroom", "wc", "washroom", "bathroom", "potty"],
        char: "\u{1F6BD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      shower: {
        keywords: ["clean", "water", "bathroom"],
        char: "\u{1F6BF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bathtub: {
        keywords: ["clean", "shower", "bathroom"],
        char: "\u{1F6C1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      soap: {
        keywords: ["bar", "bathing", "cleaning", "lather"],
        char: "\u{1F9FC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      sponge: {
        keywords: ["absorbing", "cleaning", "porous"],
        char: "\u{1F9FD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      lotion_bottle: {
        keywords: ["moisturizer", "sunscreen"],
        char: "\u{1F9F4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      key: {
        keywords: ["lock", "door", "password"],
        char: "\u{1F511}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      old_key: {
        keywords: ["lock", "door", "password"],
        char: "\u{1F5DD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      couch_and_lamp: {
        keywords: ["read", "chill"],
        char: "\u{1F6CB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      sleeping_bed: {
        keywords: ["bed", "rest"],
        char: "\u{1F6CC}",
        fitzpatrick_scale: true,
        category: "objects"
      },
      bed: {
        keywords: ["sleep", "rest"],
        char: "\u{1F6CF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      door: {
        keywords: ["house", "entry", "exit"],
        char: "\u{1F6AA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bellhop_bell: {
        keywords: ["service"],
        char: "\u{1F6CE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      teddy_bear: {
        keywords: ["plush", "stuffed"],
        char: "\u{1F9F8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      framed_picture: {
        keywords: ["photography"],
        char: "\u{1F5BC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      world_map: {
        keywords: ["location", "direction"],
        char: "\u{1F5FA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      parasol_on_ground: {
        keywords: ["weather", "summer"],
        char: "\u26F1",
        fitzpatrick_scale: false,
        category: "objects"
      },
      moyai: {
        keywords: ["rock", "easter island", "moai"],
        char: "\u{1F5FF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      shopping: {
        keywords: ["mall", "buy", "purchase"],
        char: "\u{1F6CD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      shopping_cart: {
        keywords: ["trolley"],
        char: "\u{1F6D2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      balloon: {
        keywords: ["party", "celebration", "birthday", "circus"],
        char: "\u{1F388}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      flags: {
        keywords: ["fish", "japanese", "koinobori", "carp", "banner"],
        char: "\u{1F38F}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      ribbon: {
        keywords: ["decoration", "pink", "girl", "bowtie"],
        char: "\u{1F380}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      gift: {
        keywords: ["present", "birthday", "christmas", "xmas"],
        char: "\u{1F381}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      confetti_ball: {
        keywords: ["festival", "party", "birthday", "circus"],
        char: "\u{1F38A}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      tada: {
        keywords: ["party", "congratulations", "birthday", "magic", "circus", "celebration"],
        char: "\u{1F389}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      dolls: {
        keywords: ["japanese", "toy", "kimono"],
        char: "\u{1F38E}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      wind_chime: {
        keywords: ["nature", "ding", "spring", "bell"],
        char: "\u{1F390}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      crossed_flags: {
        keywords: ["japanese", "nation", "country", "border"],
        char: "\u{1F38C}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      izakaya_lantern: {
        keywords: ["light", "paper", "halloween", "spooky"],
        char: "\u{1F3EE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      red_envelope: {
        keywords: ["gift"],
        char: "\u{1F9E7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      email: {
        keywords: ["letter", "postal", "inbox", "communication"],
        char: "\u2709\uFE0F",
        fitzpatrick_scale: false,
        category: "objects"
      },
      envelope_with_arrow: {
        keywords: ["email", "communication"],
        char: "\u{1F4E9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      incoming_envelope: {
        keywords: ["email", "inbox"],
        char: "\u{1F4E8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      "e-mail": {
        keywords: ["communication", "inbox"],
        char: "\u{1F4E7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      love_letter: {
        keywords: ["email", "like", "affection", "envelope", "valentines"],
        char: "\u{1F48C}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      postbox: {
        keywords: ["email", "letter", "envelope"],
        char: "\u{1F4EE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mailbox_closed: {
        keywords: ["email", "communication", "inbox"],
        char: "\u{1F4EA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mailbox: {
        keywords: ["email", "inbox", "communication"],
        char: "\u{1F4EB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mailbox_with_mail: {
        keywords: ["email", "inbox", "communication"],
        char: "\u{1F4EC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mailbox_with_no_mail: {
        keywords: ["email", "inbox"],
        char: "\u{1F4ED}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      package: {
        keywords: ["mail", "gift", "cardboard", "box", "moving"],
        char: "\u{1F4E6}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      postal_horn: {
        keywords: ["instrument", "music"],
        char: "\u{1F4EF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      inbox_tray: {
        keywords: ["email", "documents"],
        char: "\u{1F4E5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      outbox_tray: {
        keywords: ["inbox", "email"],
        char: "\u{1F4E4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      scroll: {
        keywords: ["documents", "ancient", "history", "paper"],
        char: "\u{1F4DC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      page_with_curl: {
        keywords: ["documents", "office", "paper"],
        char: "\u{1F4C3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bookmark_tabs: {
        keywords: ["favorite", "save", "order", "tidy"],
        char: "\u{1F4D1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      receipt: {
        keywords: ["accounting", "expenses"],
        char: "\u{1F9FE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      bar_chart: {
        keywords: ["graph", "presentation", "stats"],
        char: "\u{1F4CA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      chart_with_upwards_trend: {
        keywords: ["graph", "presentation", "stats", "recovery", "business", "economics", "money", "sales", "good", "success"],
        char: "\u{1F4C8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      chart_with_downwards_trend: {
        keywords: ["graph", "presentation", "stats", "recession", "business", "economics", "money", "sales", "bad", "failure"],
        char: "\u{1F4C9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      page_facing_up: {
        keywords: ["documents", "office", "paper", "information"],
        char: "\u{1F4C4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      date: {
        keywords: ["calendar", "schedule"],
        char: "\u{1F4C5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      calendar: {
        keywords: ["schedule", "date", "planning"],
        char: "\u{1F4C6}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      spiral_calendar: {
        keywords: ["date", "schedule", "planning"],
        char: "\u{1F5D3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      card_index: {
        keywords: ["business", "stationery"],
        char: "\u{1F4C7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      card_file_box: {
        keywords: ["business", "stationery"],
        char: "\u{1F5C3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      ballot_box: {
        keywords: ["election", "vote"],
        char: "\u{1F5F3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      file_cabinet: {
        keywords: ["filing", "organizing"],
        char: "\u{1F5C4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      clipboard: {
        keywords: ["stationery", "documents"],
        char: "\u{1F4CB}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      spiral_notepad: {
        keywords: ["memo", "stationery"],
        char: "\u{1F5D2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      file_folder: {
        keywords: ["documents", "business", "office"],
        char: "\u{1F4C1}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      open_file_folder: {
        keywords: ["documents", "load"],
        char: "\u{1F4C2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      card_index_dividers: {
        keywords: ["organizing", "business", "stationery"],
        char: "\u{1F5C2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      newspaper_roll: {
        keywords: ["press", "headline"],
        char: "\u{1F5DE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      newspaper: {
        keywords: ["press", "headline"],
        char: "\u{1F4F0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      notebook: {
        keywords: ["stationery", "record", "notes", "paper", "study"],
        char: "\u{1F4D3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      closed_book: {
        keywords: ["read", "library", "knowledge", "textbook", "learn"],
        char: "\u{1F4D5}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      green_book: {
        keywords: ["read", "library", "knowledge", "study"],
        char: "\u{1F4D7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      blue_book: {
        keywords: ["read", "library", "knowledge", "learn", "study"],
        char: "\u{1F4D8}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      orange_book: {
        keywords: ["read", "library", "knowledge", "textbook", "study"],
        char: "\u{1F4D9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      notebook_with_decorative_cover: {
        keywords: ["classroom", "notes", "record", "paper", "study"],
        char: "\u{1F4D4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      ledger: {
        keywords: ["notes", "paper"],
        char: "\u{1F4D2}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      books: {
        keywords: ["literature", "library", "study"],
        char: "\u{1F4DA}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      open_book: {
        keywords: ["book", "read", "library", "knowledge", "literature", "learn", "study"],
        char: "\u{1F4D6}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      safety_pin: {
        keywords: ["diaper"],
        char: "\u{1F9F7}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      link: {
        keywords: ["rings", "url"],
        char: "\u{1F517}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      paperclip: {
        keywords: ["documents", "stationery"],
        char: "\u{1F4CE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      paperclips: {
        keywords: ["documents", "stationery"],
        char: "\u{1F587}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      scissors: {
        keywords: ["stationery", "cut"],
        char: "\u2702\uFE0F",
        fitzpatrick_scale: false,
        category: "objects"
      },
      triangular_ruler: {
        keywords: ["stationery", "math", "architect", "sketch"],
        char: "\u{1F4D0}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      straight_ruler: {
        keywords: ["stationery", "calculate", "length", "math", "school", "drawing", "architect", "sketch"],
        char: "\u{1F4CF}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      abacus: {
        keywords: ["calculation"],
        char: "\u{1F9EE}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pushpin: {
        keywords: ["stationery", "mark", "here"],
        char: "\u{1F4CC}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      round_pushpin: {
        keywords: ["stationery", "location", "map", "here"],
        char: "\u{1F4CD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      triangular_flag_on_post: {
        keywords: ["mark", "milestone", "place"],
        char: "\u{1F6A9}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      white_flag: {
        keywords: ["losing", "loser", "lost", "surrender", "give up", "fail"],
        char: "\u{1F3F3}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      black_flag: {
        keywords: ["pirate"],
        char: "\u{1F3F4}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      rainbow_flag: {
        keywords: ["flag", "rainbow", "pride", "gay", "lgbt", "glbt", "queer", "homosexual", "lesbian", "bisexual", "transgender"],
        char: "\u{1F3F3}\uFE0F\u200D\u{1F308}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      closed_lock_with_key: {
        keywords: ["security", "privacy"],
        char: "\u{1F510}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      lock: {
        keywords: ["security", "password", "padlock"],
        char: "\u{1F512}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      unlock: {
        keywords: ["privacy", "security"],
        char: "\u{1F513}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      lock_with_ink_pen: {
        keywords: ["security", "secret"],
        char: "\u{1F50F}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pen: {
        keywords: ["stationery", "writing", "write"],
        char: "\u{1F58A}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      fountain_pen: {
        keywords: ["stationery", "writing", "write"],
        char: "\u{1F58B}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      black_nib: {
        keywords: ["pen", "stationery", "writing", "write"],
        char: "\u2712\uFE0F",
        fitzpatrick_scale: false,
        category: "objects"
      },
      memo: {
        keywords: ["write", "documents", "stationery", "pencil", "paper", "writing", "legal", "exam", "quiz", "test", "study", "compose"],
        char: "\u{1F4DD}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      pencil2: {
        keywords: ["stationery", "write", "paper", "writing", "school", "study"],
        char: "\u270F\uFE0F",
        fitzpatrick_scale: false,
        category: "objects"
      },
      crayon: {
        keywords: ["drawing", "creativity"],
        char: "\u{1F58D}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      paintbrush: {
        keywords: ["drawing", "creativity", "art"],
        char: "\u{1F58C}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mag: {
        keywords: ["search", "zoom", "find", "detective"],
        char: "\u{1F50D}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      mag_right: {
        keywords: ["search", "zoom", "find", "detective"],
        char: "\u{1F50E}",
        fitzpatrick_scale: false,
        category: "objects"
      },
      heart: {
        keywords: ["love", "like", "valentines"],
        char: "\u2764\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      orange_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F9E1}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      yellow_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F49B}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      green_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F49A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      blue_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F499}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      purple_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F49C}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_heart: {
        keywords: ["evil"],
        char: "\u{1F5A4}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      broken_heart: {
        keywords: ["sad", "sorry", "break", "heart", "heartbreak"],
        char: "\u{1F494}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_heart_exclamation: {
        keywords: ["decoration", "love"],
        char: "\u2763",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      two_hearts: {
        keywords: ["love", "like", "affection", "valentines", "heart"],
        char: "\u{1F495}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      revolving_hearts: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F49E}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heartbeat: {
        keywords: ["love", "like", "affection", "valentines", "pink", "heart"],
        char: "\u{1F493}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heartpulse: {
        keywords: ["like", "love", "affection", "valentines", "pink"],
        char: "\u{1F497}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sparkling_heart: {
        keywords: ["love", "like", "affection", "valentines"],
        char: "\u{1F496}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cupid: {
        keywords: ["love", "like", "heart", "affection", "valentines"],
        char: "\u{1F498}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      gift_heart: {
        keywords: ["love", "valentines"],
        char: "\u{1F49D}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heart_decoration: {
        keywords: ["purple-square", "love", "like"],
        char: "\u{1F49F}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      peace_symbol: {
        keywords: ["hippie"],
        char: "\u262E",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      latin_cross: {
        keywords: ["christianity"],
        char: "\u271D",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      star_and_crescent: {
        keywords: ["islam"],
        char: "\u262A",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      om: {
        keywords: ["hinduism", "buddhism", "sikhism", "jainism"],
        char: "\u{1F549}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      wheel_of_dharma: {
        keywords: ["hinduism", "buddhism", "sikhism", "jainism"],
        char: "\u2638",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      star_of_david: {
        keywords: ["judaism"],
        char: "\u2721",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      six_pointed_star: {
        keywords: ["purple-square", "religion", "jewish", "hexagram"],
        char: "\u{1F52F}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      menorah: {
        keywords: ["hanukkah", "candles", "jewish"],
        char: "\u{1F54E}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      yin_yang: {
        keywords: ["balance"],
        char: "\u262F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      orthodox_cross: {
        keywords: ["suppedaneum", "religion"],
        char: "\u2626",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      place_of_worship: {
        keywords: ["religion", "church", "temple", "prayer"],
        char: "\u{1F6D0}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ophiuchus: {
        keywords: ["sign", "purple-square", "constellation", "astrology"],
        char: "\u26CE",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      aries: {
        keywords: ["sign", "purple-square", "zodiac", "astrology"],
        char: "\u2648",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      taurus: {
        keywords: ["purple-square", "sign", "zodiac", "astrology"],
        char: "\u2649",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      gemini: {
        keywords: ["sign", "zodiac", "purple-square", "astrology"],
        char: "\u264A",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cancer: {
        keywords: ["sign", "zodiac", "purple-square", "astrology"],
        char: "\u264B",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      leo: {
        keywords: ["sign", "purple-square", "zodiac", "astrology"],
        char: "\u264C",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      virgo: {
        keywords: ["sign", "zodiac", "purple-square", "astrology"],
        char: "\u264D",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      libra: {
        keywords: ["sign", "purple-square", "zodiac", "astrology"],
        char: "\u264E",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      scorpius: {
        keywords: ["sign", "zodiac", "purple-square", "astrology", "scorpio"],
        char: "\u264F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sagittarius: {
        keywords: ["sign", "zodiac", "purple-square", "astrology"],
        char: "\u2650",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      capricorn: {
        keywords: ["sign", "zodiac", "purple-square", "astrology"],
        char: "\u2651",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      aquarius: {
        keywords: ["sign", "purple-square", "zodiac", "astrology"],
        char: "\u2652",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      pisces: {
        keywords: ["purple-square", "sign", "zodiac", "astrology"],
        char: "\u2653",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      id: {
        keywords: ["purple-square", "words"],
        char: "\u{1F194}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      atom_symbol: {
        keywords: ["science", "physics", "chemistry"],
        char: "\u269B",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u7a7a: {
        keywords: ["kanji", "japanese", "chinese", "empty", "sky", "blue-square"],
        char: "\u{1F233}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u5272: {
        keywords: ["cut", "divide", "chinese", "kanji", "pink-square"],
        char: "\u{1F239}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      radioactive: {
        keywords: ["nuclear", "danger"],
        char: "\u2622",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      biohazard: {
        keywords: ["danger"],
        char: "\u2623",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      mobile_phone_off: {
        keywords: ["mute", "orange-square", "silence", "quiet"],
        char: "\u{1F4F4}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      vibration_mode: {
        keywords: ["orange-square", "phone"],
        char: "\u{1F4F3}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u6709: {
        keywords: ["orange-square", "chinese", "have", "kanji"],
        char: "\u{1F236}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u7121: {
        keywords: ["nothing", "chinese", "kanji", "japanese", "orange-square"],
        char: "\u{1F21A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u7533: {
        keywords: ["chinese", "japanese", "kanji", "orange-square"],
        char: "\u{1F238}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u55b6: {
        keywords: ["japanese", "opening hours", "orange-square"],
        char: "\u{1F23A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u6708: {
        keywords: ["chinese", "month", "moon", "japanese", "orange-square", "kanji"],
        char: "\u{1F237}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      eight_pointed_black_star: {
        keywords: ["orange-square", "shape", "polygon"],
        char: "\u2734\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      vs: {
        keywords: ["words", "orange-square"],
        char: "\u{1F19A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      accept: {
        keywords: ["ok", "good", "chinese", "kanji", "agree", "yes", "orange-circle"],
        char: "\u{1F251}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_flower: {
        keywords: ["japanese", "spring"],
        char: "\u{1F4AE}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ideograph_advantage: {
        keywords: ["chinese", "kanji", "obtain", "get", "circle"],
        char: "\u{1F250}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      secret: {
        keywords: ["privacy", "chinese", "sshh", "kanji", "red-circle"],
        char: "\u3299\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      congratulations: {
        keywords: ["chinese", "kanji", "japanese", "red-circle"],
        char: "\u3297\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u5408: {
        keywords: ["japanese", "chinese", "join", "kanji", "red-square"],
        char: "\u{1F234}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u6e80: {
        keywords: ["full", "chinese", "japanese", "red-square", "kanji"],
        char: "\u{1F235}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u7981: {
        keywords: ["kanji", "japanese", "chinese", "forbidden", "limit", "restricted", "red-square"],
        char: "\u{1F232}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      a: {
        keywords: ["red-square", "alphabet", "letter"],
        char: "\u{1F170}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      b: {
        keywords: ["red-square", "alphabet", "letter"],
        char: "\u{1F171}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ab: {
        keywords: ["red-square", "alphabet"],
        char: "\u{1F18E}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cl: {
        keywords: ["alphabet", "words", "red-square"],
        char: "\u{1F191}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      o2: {
        keywords: ["alphabet", "red-square", "letter"],
        char: "\u{1F17E}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sos: {
        keywords: ["help", "red-square", "words", "emergency", "911"],
        char: "\u{1F198}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_entry: {
        keywords: ["limit", "security", "privacy", "bad", "denied", "stop", "circle"],
        char: "\u26D4",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      name_badge: {
        keywords: ["fire", "forbid"],
        char: "\u{1F4DB}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_entry_sign: {
        keywords: ["forbid", "stop", "limit", "denied", "disallow", "circle"],
        char: "\u{1F6AB}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      x: {
        keywords: ["no", "delete", "remove", "cancel", "red"],
        char: "\u274C",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      o: {
        keywords: ["circle", "round"],
        char: "\u2B55",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      stop_sign: {
        keywords: ["stop"],
        char: "\u{1F6D1}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      anger: {
        keywords: ["angry", "mad"],
        char: "\u{1F4A2}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      hotsprings: {
        keywords: ["bath", "warm", "relax"],
        char: "\u2668\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_pedestrians: {
        keywords: ["rules", "crossing", "walking", "circle"],
        char: "\u{1F6B7}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      do_not_litter: {
        keywords: ["trash", "bin", "garbage", "circle"],
        char: "\u{1F6AF}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_bicycles: {
        keywords: ["cyclist", "prohibited", "circle"],
        char: "\u{1F6B3}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      "non-potable_water": {
        keywords: ["drink", "faucet", "tap", "circle"],
        char: "\u{1F6B1}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      underage: {
        keywords: ["18", "drink", "pub", "night", "minor", "circle"],
        char: "\u{1F51E}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_mobile_phones: {
        keywords: ["iphone", "mute", "circle"],
        char: "\u{1F4F5}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      exclamation: {
        keywords: ["heavy_exclamation_mark", "danger", "surprise", "punctuation", "wow", "warning"],
        char: "\u2757",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      grey_exclamation: {
        keywords: ["surprise", "punctuation", "gray", "wow", "warning"],
        char: "\u2755",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      question: {
        keywords: ["doubt", "confused"],
        char: "\u2753",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      grey_question: {
        keywords: ["doubts", "gray", "huh", "confused"],
        char: "\u2754",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      bangbang: {
        keywords: ["exclamation", "surprise"],
        char: "\u203C\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      interrobang: {
        keywords: ["wat", "punctuation", "surprise"],
        char: "\u2049\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      "100": {
        keywords: ["score", "perfect", "numbers", "century", "exam", "quiz", "test", "pass", "hundred"],
        char: "\u{1F4AF}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      low_brightness: {
        keywords: ["sun", "afternoon", "warm", "summer"],
        char: "\u{1F505}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      high_brightness: {
        keywords: ["sun", "light"],
        char: "\u{1F506}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      trident: {
        keywords: ["weapon", "spear"],
        char: "\u{1F531}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      fleur_de_lis: {
        keywords: ["decorative", "scout"],
        char: "\u269C",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      part_alternation_mark: {
        keywords: ["graph", "presentation", "stats", "business", "economics", "bad"],
        char: "\u303D\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      warning: {
        keywords: ["exclamation", "wip", "alert", "error", "problem", "issue"],
        char: "\u26A0\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      children_crossing: {
        keywords: ["school", "warning", "danger", "sign", "driving", "yellow-diamond"],
        char: "\u{1F6B8}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      beginner: {
        keywords: ["badge", "shield"],
        char: "\u{1F530}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      recycle: {
        keywords: ["arrow", "environment", "garbage", "trash"],
        char: "\u267B\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      u6307: {
        keywords: ["chinese", "point", "green-square", "kanji"],
        char: "\u{1F22F}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      chart: {
        keywords: ["green-square", "graph", "presentation", "stats"],
        char: "\u{1F4B9}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sparkle: {
        keywords: ["stars", "green-square", "awesome", "good", "fireworks"],
        char: "\u2747\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      eight_spoked_asterisk: {
        keywords: ["star", "sparkle", "green-square"],
        char: "\u2733\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      negative_squared_cross_mark: {
        keywords: ["x", "green-square", "no", "deny"],
        char: "\u274E",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_check_mark: {
        keywords: ["green-square", "ok", "agree", "vote", "election", "answer", "tick"],
        char: "\u2705",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      diamond_shape_with_a_dot_inside: {
        keywords: ["jewel", "blue", "gem", "crystal", "fancy"],
        char: "\u{1F4A0}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cyclone: {
        keywords: ["weather", "swirl", "blue", "cloud", "vortex", "spiral", "whirlpool", "spin", "tornado", "hurricane", "typhoon"],
        char: "\u{1F300}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      loop: {
        keywords: ["tape", "cassette"],
        char: "\u27BF",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      globe_with_meridians: {
        keywords: ["earth", "international", "world", "internet", "interweb", "i18n"],
        char: "\u{1F310}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      m: {
        keywords: ["alphabet", "blue-circle", "letter"],
        char: "\u24C2\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      atm: {
        keywords: ["money", "sales", "cash", "blue-square", "payment", "bank"],
        char: "\u{1F3E7}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sa: {
        keywords: ["japanese", "blue-square", "katakana"],
        char: "\u{1F202}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      passport_control: {
        keywords: ["custom", "blue-square"],
        char: "\u{1F6C2}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      customs: {
        keywords: ["passport", "border", "blue-square"],
        char: "\u{1F6C3}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      baggage_claim: {
        keywords: ["blue-square", "airport", "transport"],
        char: "\u{1F6C4}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      left_luggage: {
        keywords: ["blue-square", "travel"],
        char: "\u{1F6C5}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      wheelchair: {
        keywords: ["blue-square", "disabled", "a11y", "accessibility"],
        char: "\u267F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_smoking: {
        keywords: ["cigarette", "blue-square", "smell", "smoke"],
        char: "\u{1F6AD}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      wc: {
        keywords: ["toilet", "restroom", "blue-square"],
        char: "\u{1F6BE}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      parking: {
        keywords: ["cars", "blue-square", "alphabet", "letter"],
        char: "\u{1F17F}\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      potable_water: {
        keywords: ["blue-square", "liquid", "restroom", "cleaning", "faucet"],
        char: "\u{1F6B0}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      mens: {
        keywords: ["toilet", "restroom", "wc", "blue-square", "gender", "male"],
        char: "\u{1F6B9}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      womens: {
        keywords: ["purple-square", "woman", "female", "toilet", "loo", "restroom", "gender"],
        char: "\u{1F6BA}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      baby_symbol: {
        keywords: ["orange-square", "child"],
        char: "\u{1F6BC}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      restroom: {
        keywords: ["blue-square", "toilet", "refresh", "wc", "gender"],
        char: "\u{1F6BB}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      put_litter_in_its_place: {
        keywords: ["blue-square", "sign", "human", "info"],
        char: "\u{1F6AE}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cinema: {
        keywords: ["blue-square", "record", "film", "movie", "curtain", "stage", "theater"],
        char: "\u{1F3A6}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      signal_strength: {
        keywords: ["blue-square", "reception", "phone", "internet", "connection", "wifi", "bluetooth", "bars"],
        char: "\u{1F4F6}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      koko: {
        keywords: ["blue-square", "here", "katakana", "japanese", "destination"],
        char: "\u{1F201}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ng: {
        keywords: ["blue-square", "words", "shape", "icon"],
        char: "\u{1F196}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ok: {
        keywords: ["good", "agree", "yes", "blue-square"],
        char: "\u{1F197}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      up: {
        keywords: ["blue-square", "above", "high"],
        char: "\u{1F199}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      cool: {
        keywords: ["words", "blue-square"],
        char: "\u{1F192}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      new: {
        keywords: ["blue-square", "words", "start"],
        char: "\u{1F195}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      free: {
        keywords: ["blue-square", "words"],
        char: "\u{1F193}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      zero: {
        keywords: ["0", "numbers", "blue-square", "null"],
        char: "0\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      one: {
        keywords: ["blue-square", "numbers", "1"],
        char: "1\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      two: {
        keywords: ["numbers", "2", "prime", "blue-square"],
        char: "2\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      three: {
        keywords: ["3", "numbers", "prime", "blue-square"],
        char: "3\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      four: {
        keywords: ["4", "numbers", "blue-square"],
        char: "4\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      five: {
        keywords: ["5", "numbers", "blue-square", "prime"],
        char: "5\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      six: {
        keywords: ["6", "numbers", "blue-square"],
        char: "6\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      seven: {
        keywords: ["7", "numbers", "blue-square", "prime"],
        char: "7\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      eight: {
        keywords: ["8", "blue-square", "numbers"],
        char: "8\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      nine: {
        keywords: ["blue-square", "numbers", "9"],
        char: "9\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      keycap_ten: {
        keywords: ["numbers", "10", "blue-square"],
        char: "\u{1F51F}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      asterisk: {
        keywords: ["star", "keycap"],
        char: "*\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      "1234": {
        keywords: ["numbers", "blue-square"],
        char: "\u{1F522}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      eject_button: {
        keywords: ["blue-square"],
        char: "\u23CF\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_forward: {
        keywords: ["blue-square", "right", "direction", "play"],
        char: "\u25B6\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      pause_button: {
        keywords: ["pause", "blue-square"],
        char: "\u23F8",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      next_track_button: {
        keywords: ["forward", "next", "blue-square"],
        char: "\u23ED",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      stop_button: {
        keywords: ["blue-square"],
        char: "\u23F9",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      record_button: {
        keywords: ["blue-square"],
        char: "\u23FA",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      play_or_pause_button: {
        keywords: ["blue-square", "play", "pause"],
        char: "\u23EF",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      previous_track_button: {
        keywords: ["backward"],
        char: "\u23EE",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      fast_forward: {
        keywords: ["blue-square", "play", "speed", "continue"],
        char: "\u23E9",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      rewind: {
        keywords: ["play", "blue-square"],
        char: "\u23EA",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      twisted_rightwards_arrows: {
        keywords: ["blue-square", "shuffle", "music", "random"],
        char: "\u{1F500}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      repeat: {
        keywords: ["loop", "record"],
        char: "\u{1F501}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      repeat_one: {
        keywords: ["blue-square", "loop"],
        char: "\u{1F502}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_backward: {
        keywords: ["blue-square", "left", "direction"],
        char: "\u25C0\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_up_small: {
        keywords: ["blue-square", "triangle", "direction", "point", "forward", "top"],
        char: "\u{1F53C}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_down_small: {
        keywords: ["blue-square", "direction", "bottom"],
        char: "\u{1F53D}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_double_up: {
        keywords: ["blue-square", "direction", "top"],
        char: "\u23EB",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_double_down: {
        keywords: ["blue-square", "direction", "bottom"],
        char: "\u23EC",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_right: {
        keywords: ["blue-square", "next"],
        char: "\u27A1\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_left: {
        keywords: ["blue-square", "previous", "back"],
        char: "\u2B05\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_up: {
        keywords: ["blue-square", "continue", "top", "direction"],
        char: "\u2B06\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_down: {
        keywords: ["blue-square", "direction", "bottom"],
        char: "\u2B07\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_upper_right: {
        keywords: ["blue-square", "point", "direction", "diagonal", "northeast"],
        char: "\u2197\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_lower_right: {
        keywords: ["blue-square", "direction", "diagonal", "southeast"],
        char: "\u2198\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_lower_left: {
        keywords: ["blue-square", "direction", "diagonal", "southwest"],
        char: "\u2199\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_upper_left: {
        keywords: ["blue-square", "point", "direction", "diagonal", "northwest"],
        char: "\u2196\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_up_down: {
        keywords: ["blue-square", "direction", "way", "vertical"],
        char: "\u2195\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      left_right_arrow: {
        keywords: ["shape", "direction", "horizontal", "sideways"],
        char: "\u2194\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrows_counterclockwise: {
        keywords: ["blue-square", "sync", "cycle"],
        char: "\u{1F504}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_right_hook: {
        keywords: ["blue-square", "return", "rotate", "direction"],
        char: "\u21AA\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      leftwards_arrow_with_hook: {
        keywords: ["back", "return", "blue-square", "undo", "enter"],
        char: "\u21A9\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_heading_up: {
        keywords: ["blue-square", "direction", "top"],
        char: "\u2934\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrow_heading_down: {
        keywords: ["blue-square", "direction", "bottom"],
        char: "\u2935\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      hash: {
        keywords: ["symbol", "blue-square", "twitter"],
        char: "#\uFE0F\u20E3",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      information_source: {
        keywords: ["blue-square", "alphabet", "letter"],
        char: "\u2139\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      abc: {
        keywords: ["blue-square", "alphabet"],
        char: "\u{1F524}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      abcd: {
        keywords: ["blue-square", "alphabet"],
        char: "\u{1F521}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      capital_abcd: {
        keywords: ["alphabet", "words", "blue-square"],
        char: "\u{1F520}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      symbols: {
        keywords: ["blue-square", "music", "note", "ampersand", "percent", "glyphs", "characters"],
        char: "\u{1F523}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      musical_note: {
        keywords: ["score", "tone", "sound"],
        char: "\u{1F3B5}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      notes: {
        keywords: ["music", "score"],
        char: "\u{1F3B6}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      wavy_dash: {
        keywords: ["draw", "line", "moustache", "mustache", "squiggle", "scribble"],
        char: "\u3030\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      curly_loop: {
        keywords: ["scribble", "draw", "shape", "squiggle"],
        char: "\u27B0",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_check_mark: {
        keywords: ["ok", "nike", "answer", "yes", "tick"],
        char: "\u2714\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      arrows_clockwise: {
        keywords: ["sync", "cycle", "round", "repeat"],
        char: "\u{1F503}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_plus_sign: {
        keywords: ["math", "calculation", "addition", "more", "increase"],
        char: "\u2795",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_minus_sign: {
        keywords: ["math", "calculation", "subtract", "less"],
        char: "\u2796",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_division_sign: {
        keywords: ["divide", "math", "calculation"],
        char: "\u2797",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_multiplication_x: {
        keywords: ["math", "calculation"],
        char: "\u2716\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      infinity: {
        keywords: ["forever"],
        char: "\u267E",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      heavy_dollar_sign: {
        keywords: ["money", "sales", "payment", "currency", "buck"],
        char: "\u{1F4B2}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      currency_exchange: {
        keywords: ["money", "sales", "dollar", "travel"],
        char: "\u{1F4B1}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      copyright: {
        keywords: ["ip", "license", "circle", "law", "legal"],
        char: "\xA9\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      registered: {
        keywords: ["alphabet", "circle"],
        char: "\xAE\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      tm: {
        keywords: ["trademark", "brand", "law", "legal"],
        char: "\u2122\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      end: {
        keywords: ["words", "arrow"],
        char: "\u{1F51A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      back: {
        keywords: ["arrow", "words", "return"],
        char: "\u{1F519}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      on: {
        keywords: ["arrow", "words"],
        char: "\u{1F51B}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      top: {
        keywords: ["words", "blue-square"],
        char: "\u{1F51D}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      soon: {
        keywords: ["arrow", "words"],
        char: "\u{1F51C}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      ballot_box_with_check: {
        keywords: ["ok", "agree", "confirm", "black-square", "vote", "election", "yes", "tick"],
        char: "\u2611\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      radio_button: {
        keywords: ["input", "old", "music", "circle"],
        char: "\u{1F518}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_circle: {
        keywords: ["shape", "round"],
        char: "\u26AA",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_circle: {
        keywords: ["shape", "button", "round"],
        char: "\u26AB",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      red_circle: {
        keywords: ["shape", "error", "danger"],
        char: "\u{1F534}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      large_blue_circle: {
        keywords: ["shape", "icon", "button"],
        char: "\u{1F535}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      small_orange_diamond: {
        keywords: ["shape", "jewel", "gem"],
        char: "\u{1F538}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      small_blue_diamond: {
        keywords: ["shape", "jewel", "gem"],
        char: "\u{1F539}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      large_orange_diamond: {
        keywords: ["shape", "jewel", "gem"],
        char: "\u{1F536}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      large_blue_diamond: {
        keywords: ["shape", "jewel", "gem"],
        char: "\u{1F537}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      small_red_triangle: {
        keywords: ["shape", "direction", "up", "top"],
        char: "\u{1F53A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_small_square: {
        keywords: ["shape", "icon"],
        char: "\u25AA\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_small_square: {
        keywords: ["shape", "icon"],
        char: "\u25AB\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_large_square: {
        keywords: ["shape", "icon", "button"],
        char: "\u2B1B",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_large_square: {
        keywords: ["shape", "icon", "stone", "button"],
        char: "\u2B1C",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      small_red_triangle_down: {
        keywords: ["shape", "direction", "bottom"],
        char: "\u{1F53B}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_medium_square: {
        keywords: ["shape", "button", "icon"],
        char: "\u25FC\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_medium_square: {
        keywords: ["shape", "stone", "icon"],
        char: "\u25FB\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_medium_small_square: {
        keywords: ["icon", "shape", "button"],
        char: "\u25FE",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_medium_small_square: {
        keywords: ["shape", "stone", "icon", "button"],
        char: "\u25FD",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_square_button: {
        keywords: ["shape", "input", "frame"],
        char: "\u{1F532}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      white_square_button: {
        keywords: ["shape", "input"],
        char: "\u{1F533}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      speaker: {
        keywords: ["sound", "volume", "silence", "broadcast"],
        char: "\u{1F508}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      sound: {
        keywords: ["volume", "speaker", "broadcast"],
        char: "\u{1F509}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      loud_sound: {
        keywords: ["volume", "noise", "noisy", "speaker", "broadcast"],
        char: "\u{1F50A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      mute: {
        keywords: ["sound", "volume", "silence", "quiet"],
        char: "\u{1F507}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      mega: {
        keywords: ["sound", "speaker", "volume"],
        char: "\u{1F4E3}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      loudspeaker: {
        keywords: ["volume", "sound"],
        char: "\u{1F4E2}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      bell: {
        keywords: ["sound", "notification", "christmas", "xmas", "chime"],
        char: "\u{1F514}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      no_bell: {
        keywords: ["sound", "volume", "mute", "quiet", "silent"],
        char: "\u{1F515}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      black_joker: {
        keywords: ["poker", "cards", "game", "play", "magic"],
        char: "\u{1F0CF}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      mahjong: {
        keywords: ["game", "play", "chinese", "kanji"],
        char: "\u{1F004}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      spades: {
        keywords: ["poker", "cards", "suits", "magic"],
        char: "\u2660\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clubs: {
        keywords: ["poker", "cards", "magic", "suits"],
        char: "\u2663\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      hearts: {
        keywords: ["poker", "cards", "magic", "suits"],
        char: "\u2665\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      diamonds: {
        keywords: ["poker", "cards", "magic", "suits"],
        char: "\u2666\uFE0F",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      flower_playing_cards: {
        keywords: ["game", "sunset", "red"],
        char: "\u{1F3B4}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      thought_balloon: {
        keywords: ["bubble", "cloud", "speech", "thinking", "dream"],
        char: "\u{1F4AD}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      right_anger_bubble: {
        keywords: ["caption", "speech", "thinking", "mad"],
        char: "\u{1F5EF}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      speech_balloon: {
        keywords: ["bubble", "words", "message", "talk", "chatting"],
        char: "\u{1F4AC}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      left_speech_bubble: {
        keywords: ["words", "message", "talk", "chatting"],
        char: "\u{1F5E8}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock1: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F550}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock2: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F551}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock3: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F552}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock4: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F553}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock5: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F554}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock6: {
        keywords: ["time", "late", "early", "schedule", "dawn", "dusk"],
        char: "\u{1F555}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock7: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F556}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock8: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F557}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock9: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F558}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock10: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F559}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock11: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F55A}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock12: {
        keywords: ["time", "noon", "midnight", "midday", "late", "early", "schedule"],
        char: "\u{1F55B}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock130: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F55C}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock230: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F55D}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock330: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F55E}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock430: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F55F}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock530: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F560}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock630: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F561}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock730: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F562}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock830: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F563}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock930: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F564}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock1030: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F565}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock1130: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F566}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      clock1230: {
        keywords: ["time", "late", "early", "schedule"],
        char: "\u{1F567}",
        fitzpatrick_scale: false,
        category: "symbols"
      },
      afghanistan: {
        keywords: ["af", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      aland_islands: {
        keywords: ["\xC5land", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1FD}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      albania: {
        keywords: ["al", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      algeria: {
        keywords: ["dz", "flag", "nation", "country", "banner"],
        char: "\u{1F1E9}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      american_samoa: {
        keywords: ["american", "ws", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      andorra: {
        keywords: ["ad", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      angola: {
        keywords: ["ao", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      anguilla: {
        keywords: ["ai", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      antarctica: {
        keywords: ["aq", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      antigua_barbuda: {
        keywords: ["antigua", "barbuda", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      argentina: {
        keywords: ["ar", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      armenia: {
        keywords: ["am", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      aruba: {
        keywords: ["aw", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      australia: {
        keywords: ["au", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      austria: {
        keywords: ["at", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      azerbaijan: {
        keywords: ["az", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bahamas: {
        keywords: ["bs", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bahrain: {
        keywords: ["bh", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bangladesh: {
        keywords: ["bd", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      barbados: {
        keywords: ["bb", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1E7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      belarus: {
        keywords: ["by", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      belgium: {
        keywords: ["be", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      belize: {
        keywords: ["bz", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      benin: {
        keywords: ["bj", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1EF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bermuda: {
        keywords: ["bm", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bhutan: {
        keywords: ["bt", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bolivia: {
        keywords: ["bo", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      caribbean_netherlands: {
        keywords: ["bonaire", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bosnia_herzegovina: {
        keywords: ["bosnia", "herzegovina", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      botswana: {
        keywords: ["bw", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      brazil: {
        keywords: ["br", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      british_indian_ocean_territory: {
        keywords: ["british", "indian", "ocean", "territory", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      british_virgin_islands: {
        keywords: ["british", "virgin", "islands", "bvi", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      brunei: {
        keywords: ["bn", "darussalam", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      bulgaria: {
        keywords: ["bg", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      burkina_faso: {
        keywords: ["burkina", "faso", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      burundi: {
        keywords: ["bi", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cape_verde: {
        keywords: ["cabo", "verde", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cambodia: {
        keywords: ["kh", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cameroon: {
        keywords: ["cm", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      canada: {
        keywords: ["ca", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      canary_islands: {
        keywords: ["canary", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cayman_islands: {
        keywords: ["cayman", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      central_african_republic: {
        keywords: ["central", "african", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      chad: {
        keywords: ["td", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      chile: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cn: {
        keywords: ["china", "chinese", "prc", "flag", "country", "nation", "banner"],
        char: "\u{1F1E8}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      christmas_island: {
        keywords: ["christmas", "island", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FD}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cocos_islands: {
        keywords: ["cocos", "keeling", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      colombia: {
        keywords: ["co", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      comoros: {
        keywords: ["km", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      congo_brazzaville: {
        keywords: ["congo", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      congo_kinshasa: {
        keywords: ["congo", "democratic", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cook_islands: {
        keywords: ["cook", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      costa_rica: {
        keywords: ["costa", "rica", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      croatia: {
        keywords: ["hr", "flag", "nation", "country", "banner"],
        char: "\u{1F1ED}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cuba: {
        keywords: ["cu", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      curacao: {
        keywords: ["cura\xE7ao", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cyprus: {
        keywords: ["cy", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      czech_republic: {
        keywords: ["cz", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      denmark: {
        keywords: ["dk", "flag", "nation", "country", "banner"],
        char: "\u{1F1E9}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      djibouti: {
        keywords: ["dj", "flag", "nation", "country", "banner"],
        char: "\u{1F1E9}\u{1F1EF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      dominica: {
        keywords: ["dm", "flag", "nation", "country", "banner"],
        char: "\u{1F1E9}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      dominican_republic: {
        keywords: ["dominican", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1E9}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ecuador: {
        keywords: ["ec", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      egypt: {
        keywords: ["eg", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      el_salvador: {
        keywords: ["el", "salvador", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1FB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      equatorial_guinea: {
        keywords: ["equatorial", "gn", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      eritrea: {
        keywords: ["er", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      estonia: {
        keywords: ["ee", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ethiopia: {
        keywords: ["et", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      eu: {
        keywords: ["european", "union", "flag", "banner"],
        char: "\u{1F1EA}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      falkland_islands: {
        keywords: ["falkland", "islands", "malvinas", "flag", "nation", "country", "banner"],
        char: "\u{1F1EB}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      faroe_islands: {
        keywords: ["faroe", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1EB}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      fiji: {
        keywords: ["fj", "flag", "nation", "country", "banner"],
        char: "\u{1F1EB}\u{1F1EF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      finland: {
        keywords: ["fi", "flag", "nation", "country", "banner"],
        char: "\u{1F1EB}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      fr: {
        keywords: ["banner", "flag", "nation", "france", "french", "country"],
        char: "\u{1F1EB}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      french_guiana: {
        keywords: ["french", "guiana", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      french_polynesia: {
        keywords: ["french", "polynesia", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      french_southern_territories: {
        keywords: ["french", "southern", "territories", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      gabon: {
        keywords: ["ga", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      gambia: {
        keywords: ["gm", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      georgia: {
        keywords: ["ge", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      de: {
        keywords: ["german", "nation", "flag", "country", "banner"],
        char: "\u{1F1E9}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ghana: {
        keywords: ["gh", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      gibraltar: {
        keywords: ["gi", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      greece: {
        keywords: ["gr", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      greenland: {
        keywords: ["gl", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      grenada: {
        keywords: ["gd", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guadeloupe: {
        keywords: ["gp", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F5}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guam: {
        keywords: ["gu", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guatemala: {
        keywords: ["gt", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guernsey: {
        keywords: ["gg", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guinea: {
        keywords: ["gn", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guinea_bissau: {
        keywords: ["gw", "bissau", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      guyana: {
        keywords: ["gy", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      haiti: {
        keywords: ["ht", "flag", "nation", "country", "banner"],
        char: "\u{1F1ED}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      honduras: {
        keywords: ["hn", "flag", "nation", "country", "banner"],
        char: "\u{1F1ED}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      hong_kong: {
        keywords: ["hong", "kong", "flag", "nation", "country", "banner"],
        char: "\u{1F1ED}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      hungary: {
        keywords: ["hu", "flag", "nation", "country", "banner"],
        char: "\u{1F1ED}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      iceland: {
        keywords: ["is", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      india: {
        keywords: ["in", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      indonesia: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      iran: {
        keywords: ["iran,", "islamic", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      iraq: {
        keywords: ["iq", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ireland: {
        keywords: ["ie", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      isle_of_man: {
        keywords: ["isle", "man", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      israel: {
        keywords: ["il", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      it: {
        keywords: ["italy", "flag", "nation", "country", "banner"],
        char: "\u{1F1EE}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      cote_divoire: {
        keywords: ["ivory", "coast", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      jamaica: {
        keywords: ["jm", "flag", "nation", "country", "banner"],
        char: "\u{1F1EF}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      jp: {
        keywords: ["japanese", "nation", "flag", "country", "banner"],
        char: "\u{1F1EF}\u{1F1F5}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      jersey: {
        keywords: ["je", "flag", "nation", "country", "banner"],
        char: "\u{1F1EF}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      jordan: {
        keywords: ["jo", "flag", "nation", "country", "banner"],
        char: "\u{1F1EF}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kazakhstan: {
        keywords: ["kz", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kenya: {
        keywords: ["ke", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kiribati: {
        keywords: ["ki", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kosovo: {
        keywords: ["xk", "flag", "nation", "country", "banner"],
        char: "\u{1F1FD}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kuwait: {
        keywords: ["kw", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kyrgyzstan: {
        keywords: ["kg", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      laos: {
        keywords: ["lao", "democratic", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      latvia: {
        keywords: ["lv", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1FB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      lebanon: {
        keywords: ["lb", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1E7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      lesotho: {
        keywords: ["ls", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      liberia: {
        keywords: ["lr", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      libya: {
        keywords: ["ly", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      liechtenstein: {
        keywords: ["li", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      lithuania: {
        keywords: ["lt", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      luxembourg: {
        keywords: ["lu", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      macau: {
        keywords: ["macao", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      macedonia: {
        keywords: ["macedonia,", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      madagascar: {
        keywords: ["mg", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      malawi: {
        keywords: ["mw", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      malaysia: {
        keywords: ["my", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      maldives: {
        keywords: ["mv", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mali: {
        keywords: ["ml", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      malta: {
        keywords: ["mt", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      marshall_islands: {
        keywords: ["marshall", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      martinique: {
        keywords: ["mq", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mauritania: {
        keywords: ["mr", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mauritius: {
        keywords: ["mu", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mayotte: {
        keywords: ["yt", "flag", "nation", "country", "banner"],
        char: "\u{1F1FE}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mexico: {
        keywords: ["mx", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FD}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      micronesia: {
        keywords: ["micronesia,", "federated", "states", "flag", "nation", "country", "banner"],
        char: "\u{1F1EB}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      moldova: {
        keywords: ["moldova,", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      monaco: {
        keywords: ["mc", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mongolia: {
        keywords: ["mn", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      montenegro: {
        keywords: ["me", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      montserrat: {
        keywords: ["ms", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      morocco: {
        keywords: ["ma", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      mozambique: {
        keywords: ["mz", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      myanmar: {
        keywords: ["mm", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      namibia: {
        keywords: ["na", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      nauru: {
        keywords: ["nr", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      nepal: {
        keywords: ["np", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1F5}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      netherlands: {
        keywords: ["nl", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      new_caledonia: {
        keywords: ["new", "caledonia", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      new_zealand: {
        keywords: ["new", "zealand", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      nicaragua: {
        keywords: ["ni", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      niger: {
        keywords: ["ne", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      nigeria: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      niue: {
        keywords: ["nu", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      norfolk_island: {
        keywords: ["norfolk", "island", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      northern_mariana_islands: {
        keywords: ["northern", "mariana", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1F2}\u{1F1F5}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      north_korea: {
        keywords: ["north", "korea", "nation", "flag", "country", "banner"],
        char: "\u{1F1F0}\u{1F1F5}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      norway: {
        keywords: ["no", "flag", "nation", "country", "banner"],
        char: "\u{1F1F3}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      oman: {
        keywords: ["om_symbol", "flag", "nation", "country", "banner"],
        char: "\u{1F1F4}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      pakistan: {
        keywords: ["pk", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      palau: {
        keywords: ["pw", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      palestinian_territories: {
        keywords: ["palestine", "palestinian", "territories", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      panama: {
        keywords: ["pa", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      papua_new_guinea: {
        keywords: ["papua", "new", "guinea", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      paraguay: {
        keywords: ["py", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      peru: {
        keywords: ["pe", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      philippines: {
        keywords: ["ph", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      pitcairn_islands: {
        keywords: ["pitcairn", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      poland: {
        keywords: ["pl", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      portugal: {
        keywords: ["pt", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      puerto_rico: {
        keywords: ["puerto", "rico", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      qatar: {
        keywords: ["qa", "flag", "nation", "country", "banner"],
        char: "\u{1F1F6}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      reunion: {
        keywords: ["r\xE9union", "flag", "nation", "country", "banner"],
        char: "\u{1F1F7}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      romania: {
        keywords: ["ro", "flag", "nation", "country", "banner"],
        char: "\u{1F1F7}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ru: {
        keywords: ["russian", "federation", "flag", "nation", "country", "banner"],
        char: "\u{1F1F7}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      rwanda: {
        keywords: ["rw", "flag", "nation", "country", "banner"],
        char: "\u{1F1F7}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_barthelemy: {
        keywords: ["saint", "barth\xE9lemy", "flag", "nation", "country", "banner"],
        char: "\u{1F1E7}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_helena: {
        keywords: ["saint", "helena", "ascension", "tristan", "cunha", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_kitts_nevis: {
        keywords: ["saint", "kitts", "nevis", "flag", "nation", "country", "banner"],
        char: "\u{1F1F0}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_lucia: {
        keywords: ["saint", "lucia", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_pierre_miquelon: {
        keywords: ["saint", "pierre", "miquelon", "flag", "nation", "country", "banner"],
        char: "\u{1F1F5}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      st_vincent_grenadines: {
        keywords: ["saint", "vincent", "grenadines", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      samoa: {
        keywords: ["ws", "flag", "nation", "country", "banner"],
        char: "\u{1F1FC}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      san_marino: {
        keywords: ["san", "marino", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sao_tome_principe: {
        keywords: ["sao", "tome", "principe", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      saudi_arabia: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      senegal: {
        keywords: ["sn", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      serbia: {
        keywords: ["rs", "flag", "nation", "country", "banner"],
        char: "\u{1F1F7}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      seychelles: {
        keywords: ["sc", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sierra_leone: {
        keywords: ["sierra", "leone", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      singapore: {
        keywords: ["sg", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sint_maarten: {
        keywords: ["sint", "maarten", "dutch", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1FD}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      slovakia: {
        keywords: ["sk", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      slovenia: {
        keywords: ["si", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      solomon_islands: {
        keywords: ["solomon", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1E7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      somalia: {
        keywords: ["so", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      south_africa: {
        keywords: ["south", "africa", "flag", "nation", "country", "banner"],
        char: "\u{1F1FF}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      south_georgia_south_sandwich_islands: {
        keywords: ["south", "georgia", "sandwich", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1EC}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      kr: {
        keywords: ["south", "korea", "nation", "flag", "country", "banner"],
        char: "\u{1F1F0}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      south_sudan: {
        keywords: ["south", "sd", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      es: {
        keywords: ["spain", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sri_lanka: {
        keywords: ["sri", "lanka", "flag", "nation", "country", "banner"],
        char: "\u{1F1F1}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sudan: {
        keywords: ["sd", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1E9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      suriname: {
        keywords: ["sr", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      swaziland: {
        keywords: ["sz", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      sweden: {
        keywords: ["se", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      switzerland: {
        keywords: ["ch", "flag", "nation", "country", "banner"],
        char: "\u{1F1E8}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      syria: {
        keywords: ["syrian", "arab", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1F8}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      taiwan: {
        keywords: ["tw", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tajikistan: {
        keywords: ["tj", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1EF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tanzania: {
        keywords: ["tanzania,", "united", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      thailand: {
        keywords: ["th", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      timor_leste: {
        keywords: ["timor", "leste", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F1}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      togo: {
        keywords: ["tg", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tokelau: {
        keywords: ["tk", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F0}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tonga: {
        keywords: ["to", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F4}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      trinidad_tobago: {
        keywords: ["trinidad", "tobago", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F9}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tunisia: {
        keywords: ["tn", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tr: {
        keywords: ["turkey", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      turkmenistan: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      turks_caicos_islands: {
        keywords: ["turks", "caicos", "islands", "flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1E8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      tuvalu: {
        keywords: ["flag", "nation", "country", "banner"],
        char: "\u{1F1F9}\u{1F1FB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      uganda: {
        keywords: ["ug", "flag", "nation", "country", "banner"],
        char: "\u{1F1FA}\u{1F1EC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      ukraine: {
        keywords: ["ua", "flag", "nation", "country", "banner"],
        char: "\u{1F1FA}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      united_arab_emirates: {
        keywords: ["united", "arab", "emirates", "flag", "nation", "country", "banner"],
        char: "\u{1F1E6}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      uk: {
        keywords: ["united", "kingdom", "great", "britain", "northern", "ireland", "flag", "nation", "country", "banner", "british", "UK", "english", "england", "union jack"],
        char: "\u{1F1EC}\u{1F1E7}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      england: {
        keywords: ["flag", "english"],
        char: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      scotland: {
        keywords: ["flag", "scottish"],
        char: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      wales: {
        keywords: ["flag", "welsh"],
        char: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      us: {
        keywords: ["united", "states", "america", "flag", "nation", "country", "banner"],
        char: "\u{1F1FA}\u{1F1F8}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      us_virgin_islands: {
        keywords: ["virgin", "islands", "us", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1EE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      uruguay: {
        keywords: ["uy", "flag", "nation", "country", "banner"],
        char: "\u{1F1FA}\u{1F1FE}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      uzbekistan: {
        keywords: ["uz", "flag", "nation", "country", "banner"],
        char: "\u{1F1FA}\u{1F1FF}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      vanuatu: {
        keywords: ["vu", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1FA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      vatican_city: {
        keywords: ["vatican", "city", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1E6}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      venezuela: {
        keywords: ["ve", "bolivarian", "republic", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      vietnam: {
        keywords: ["viet", "nam", "flag", "nation", "country", "banner"],
        char: "\u{1F1FB}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      wallis_futuna: {
        keywords: ["wallis", "futuna", "flag", "nation", "country", "banner"],
        char: "\u{1F1FC}\u{1F1EB}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      western_sahara: {
        keywords: ["western", "sahara", "flag", "nation", "country", "banner"],
        char: "\u{1F1EA}\u{1F1ED}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      yemen: {
        keywords: ["ye", "flag", "nation", "country", "banner"],
        char: "\u{1F1FE}\u{1F1EA}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      zambia: {
        keywords: ["zm", "flag", "nation", "country", "banner"],
        char: "\u{1F1FF}\u{1F1F2}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      zimbabwe: {
        keywords: ["zw", "flag", "nation", "country", "banner"],
        char: "\u{1F1FF}\u{1F1FC}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      united_nations: {
        keywords: ["un", "flag", "banner"],
        char: "\u{1F1FA}\u{1F1F3}",
        fitzpatrick_scale: false,
        category: "flags"
      },
      pirate_flag: {
        keywords: ["skull", "crossbones", "flag", "banner"],
        char: "\u{1F3F4}\u200D\u2620\uFE0F",
        fitzpatrick_scale: false,
        category: "flags"
      }
    };
  }
});

// node_modules/emojilib/ordered.json
var require_ordered = __commonJS({
  "node_modules/emojilib/ordered.json"(exports, module2) {
    module2.exports = [
      "grinning",
      "smiley",
      "smile",
      "grin",
      "laughing",
      "sweat_smile",
      "joy",
      "rofl",
      "relaxed",
      "blush",
      "innocent",
      "slightly_smiling_face",
      "upside_down_face",
      "wink",
      "relieved",
      "heart_eyes",
      "smiling_face_with_three_hearts",
      "kissing_heart",
      "kissing",
      "kissing_smiling_eyes",
      "kissing_closed_eyes",
      "yum",
      "stuck_out_tongue",
      "stuck_out_tongue_closed_eyes",
      "stuck_out_tongue_winking_eye",
      "zany",
      "raised_eyebrow",
      "monocle",
      "nerd_face",
      "sunglasses",
      "star_struck",
      "partying",
      "smirk",
      "unamused",
      "disappointed",
      "pensive",
      "worried",
      "confused",
      "slightly_frowning_face",
      "frowning_face",
      "persevere",
      "confounded",
      "tired_face",
      "weary",
      "pleading",
      "cry",
      "sob",
      "triumph",
      "angry",
      "rage",
      "symbols_over_mouth",
      "exploding_head",
      "flushed",
      "hot",
      "cold",
      "scream",
      "fearful",
      "cold_sweat",
      "disappointed_relieved",
      "sweat",
      "hugs",
      "thinking",
      "hand_over_mouth",
      "shushing",
      "lying_face",
      "no_mouth",
      "neutral_face",
      "expressionless",
      "grimacing",
      "roll_eyes",
      "hushed",
      "frowning",
      "anguished",
      "open_mouth",
      "astonished",
      "sleeping",
      "drooling_face",
      "sleepy",
      "dizzy_face",
      "zipper_mouth_face",
      "woozy",
      "nauseated_face",
      "vomiting",
      "sneezing_face",
      "mask",
      "face_with_thermometer",
      "face_with_head_bandage",
      "money_mouth_face",
      "cowboy_hat_face",
      "smiling_imp",
      "imp",
      "japanese_ogre",
      "japanese_goblin",
      "clown_face",
      "poop",
      "ghost",
      "skull",
      "skull_and_crossbones",
      "alien",
      "space_invader",
      "robot",
      "jack_o_lantern",
      "smiley_cat",
      "smile_cat",
      "joy_cat",
      "heart_eyes_cat",
      "smirk_cat",
      "kissing_cat",
      "scream_cat",
      "crying_cat_face",
      "pouting_cat",
      "palms_up",
      "open_hands",
      "raised_hands",
      "clap",
      "handshake",
      "+1",
      "-1",
      "facepunch",
      "fist",
      "fist_left",
      "fist_right",
      "crossed_fingers",
      "v",
      "love_you",
      "metal",
      "ok_hand",
      "point_left",
      "point_right",
      "point_up",
      "point_down",
      "point_up_2",
      "raised_hand",
      "raised_back_of_hand",
      "raised_hand_with_fingers_splayed",
      "vulcan_salute",
      "wave",
      "call_me_hand",
      "muscle",
      "fu",
      "writing_hand",
      "pray",
      "foot",
      "leg",
      "ring",
      "lipstick",
      "kiss",
      "lips",
      "tooth",
      "tongue",
      "ear",
      "nose",
      "footprints",
      "eye",
      "eyes",
      "brain",
      "speaking_head",
      "bust_in_silhouette",
      "busts_in_silhouette",
      "baby",
      "girl",
      "child",
      "boy",
      "woman",
      "adult",
      "man",
      "blonde_woman",
      "blonde_man",
      "bearded_person",
      "older_woman",
      "older_adult",
      "older_man",
      "man_with_gua_pi_mao",
      "woman_with_headscarf",
      "woman_with_turban",
      "man_with_turban",
      "policewoman",
      "policeman",
      "construction_worker_woman",
      "construction_worker_man",
      "guardswoman",
      "guardsman",
      "female_detective",
      "male_detective",
      "woman_health_worker",
      "man_health_worker",
      "woman_farmer",
      "man_farmer",
      "woman_cook",
      "man_cook",
      "woman_student",
      "man_student",
      "woman_singer",
      "man_singer",
      "woman_teacher",
      "man_teacher",
      "woman_factory_worker",
      "man_factory_worker",
      "woman_technologist",
      "man_technologist",
      "woman_office_worker",
      "man_office_worker",
      "woman_mechanic",
      "man_mechanic",
      "woman_scientist",
      "man_scientist",
      "woman_artist",
      "man_artist",
      "woman_firefighter",
      "man_firefighter",
      "woman_pilot",
      "man_pilot",
      "woman_astronaut",
      "man_astronaut",
      "woman_judge",
      "man_judge",
      "bride_with_veil",
      "man_in_tuxedo",
      "princess",
      "prince",
      "woman_superhero",
      "man_superhero",
      "woman_supervillain",
      "man_supervillain",
      "mrs_claus",
      "santa",
      "sorceress",
      "wizard",
      "woman_elf",
      "man_elf",
      "woman_vampire",
      "man_vampire",
      "woman_zombie",
      "man_zombie",
      "woman_genie",
      "man_genie",
      "mermaid",
      "merman",
      "woman_fairy",
      "man_fairy",
      "angel",
      "pregnant_woman",
      "breastfeeding",
      "bowing_woman",
      "bowing_man",
      "tipping_hand_woman",
      "tipping_hand_man",
      "no_good_woman",
      "no_good_man",
      "ok_woman",
      "ok_man",
      "raising_hand_woman",
      "raising_hand_man",
      "woman_facepalming",
      "man_facepalming",
      "woman_shrugging",
      "man_shrugging",
      "pouting_woman",
      "pouting_man",
      "frowning_woman",
      "frowning_man",
      "haircut_woman",
      "haircut_man",
      "massage_woman",
      "massage_man",
      "woman_in_steamy_room",
      "man_in_steamy_room",
      "nail_care",
      "selfie",
      "dancer",
      "man_dancing",
      "dancing_women",
      "dancing_men",
      "business_suit_levitating",
      "walking_woman",
      "walking_man",
      "running_woman",
      "running_man",
      "couple",
      "two_women_holding_hands",
      "two_men_holding_hands",
      "couple_with_heart_woman_man",
      "couple_with_heart_woman_woman",
      "couple_with_heart_man_man",
      "couplekiss_man_woman",
      "couplekiss_woman_woman",
      "couplekiss_man_man",
      "family_man_woman_boy",
      "family_man_woman_girl",
      "family_man_woman_girl_boy",
      "family_man_woman_boy_boy",
      "family_man_woman_girl_girl",
      "family_woman_woman_boy",
      "family_woman_woman_girl",
      "family_woman_woman_girl_boy",
      "family_woman_woman_boy_boy",
      "family_woman_woman_girl_girl",
      "family_man_man_boy",
      "family_man_man_girl",
      "family_man_man_girl_boy",
      "family_man_man_boy_boy",
      "family_man_man_girl_girl",
      "family_woman_boy",
      "family_woman_girl",
      "family_woman_girl_boy",
      "family_woman_boy_boy",
      "family_woman_girl_girl",
      "family_man_boy",
      "family_man_girl",
      "family_man_girl_boy",
      "family_man_boy_boy",
      "family_man_girl_girl",
      "yarn",
      "thread",
      "coat",
      "labcoat",
      "womans_clothes",
      "tshirt",
      "jeans",
      "necktie",
      "dress",
      "bikini",
      "kimono",
      "flat_shoe",
      "high_heel",
      "sandal",
      "boot",
      "mans_shoe",
      "athletic_shoe",
      "hiking_boot",
      "socks",
      "gloves",
      "scarf",
      "tophat",
      "billed_hat",
      "womans_hat",
      "mortar_board",
      "rescue_worker_helmet",
      "crown",
      "pouch",
      "purse",
      "handbag",
      "briefcase",
      "school_satchel",
      "luggage",
      "eyeglasses",
      "dark_sunglasses",
      "goggles",
      "closed_umbrella",
      "dog",
      "cat",
      "mouse",
      "hamster",
      "rabbit",
      "fox_face",
      "bear",
      "panda_face",
      "koala",
      "tiger",
      "lion",
      "cow",
      "pig",
      "pig_nose",
      "frog",
      "monkey_face",
      "see_no_evil",
      "hear_no_evil",
      "speak_no_evil",
      "monkey",
      "chicken",
      "penguin",
      "bird",
      "baby_chick",
      "hatching_chick",
      "hatched_chick",
      "duck",
      "eagle",
      "owl",
      "bat",
      "wolf",
      "boar",
      "horse",
      "unicorn",
      "honeybee",
      "bug",
      "butterfly",
      "snail",
      "shell",
      "beetle",
      "ant",
      "mosquito",
      "grasshopper",
      "spider",
      "spider_web",
      "scorpion",
      "turtle",
      "snake",
      "lizard",
      "t-rex",
      "sauropod",
      "octopus",
      "squid",
      "shrimp",
      "lobster",
      "crab",
      "blowfish",
      "tropical_fish",
      "fish",
      "dolphin",
      "whale",
      "whale2",
      "shark",
      "crocodile",
      "tiger2",
      "leopard",
      "zebra",
      "gorilla",
      "elephant",
      "hippopotamus",
      "rhinoceros",
      "dromedary_camel",
      "giraffe",
      "kangaroo",
      "camel",
      "water_buffalo",
      "ox",
      "cow2",
      "racehorse",
      "pig2",
      "ram",
      "sheep",
      "llama",
      "goat",
      "deer",
      "dog2",
      "poodle",
      "cat2",
      "rooster",
      "turkey",
      "peacock",
      "parrot",
      "swan",
      "dove",
      "rabbit2",
      "raccoon",
      "badger",
      "rat",
      "mouse2",
      "chipmunk",
      "hedgehog",
      "paw_prints",
      "dragon",
      "dragon_face",
      "cactus",
      "christmas_tree",
      "evergreen_tree",
      "deciduous_tree",
      "palm_tree",
      "seedling",
      "herb",
      "shamrock",
      "four_leaf_clover",
      "bamboo",
      "tanabata_tree",
      "leaves",
      "fallen_leaf",
      "maple_leaf",
      "ear_of_rice",
      "hibiscus",
      "sunflower",
      "rose",
      "wilted_flower",
      "tulip",
      "blossom",
      "cherry_blossom",
      "bouquet",
      "mushroom",
      "earth_americas",
      "earth_africa",
      "earth_asia",
      "full_moon",
      "waning_gibbous_moon",
      "last_quarter_moon",
      "waning_crescent_moon",
      "new_moon",
      "waxing_crescent_moon",
      "first_quarter_moon",
      "waxing_gibbous_moon",
      "new_moon_with_face",
      "full_moon_with_face",
      "first_quarter_moon_with_face",
      "last_quarter_moon_with_face",
      "sun_with_face",
      "crescent_moon",
      "star",
      "star2",
      "dizzy",
      "sparkles",
      "comet",
      "sunny",
      "sun_behind_small_cloud",
      "partly_sunny",
      "sun_behind_large_cloud",
      "sun_behind_rain_cloud",
      "cloud",
      "cloud_with_rain",
      "cloud_with_lightning_and_rain",
      "cloud_with_lightning",
      "zap",
      "fire",
      "boom",
      "snowflake",
      "cloud_with_snow",
      "snowman",
      "snowman_with_snow",
      "wind_face",
      "dash",
      "tornado",
      "fog",
      "open_umbrella",
      "umbrella",
      "droplet",
      "sweat_drops",
      "ocean",
      "green_apple",
      "apple",
      "pear",
      "tangerine",
      "lemon",
      "banana",
      "watermelon",
      "grapes",
      "strawberry",
      "melon",
      "cherries",
      "peach",
      "mango",
      "pineapple",
      "coconut",
      "kiwi_fruit",
      "tomato",
      "eggplant",
      "avocado",
      "broccoli",
      "leafy_greens",
      "cucumber",
      "hot_pepper",
      "corn",
      "carrot",
      "potato",
      "sweet_potato",
      "croissant",
      "bagel",
      "bread",
      "baguette_bread",
      "pretzel",
      "cheese",
      "egg",
      "fried_egg",
      "pancakes",
      "bacon",
      "steak",
      "poultry_leg",
      "meat_on_bone",
      "bone",
      "hotdog",
      "hamburger",
      "fries",
      "pizza",
      "sandwich",
      "stuffed_flatbread",
      "taco",
      "burrito",
      "green_salad",
      "shallow_pan_of_food",
      "canned_food",
      "spaghetti",
      "ramen",
      "stew",
      "curry",
      "sushi",
      "bento",
      "fried_shrimp",
      "rice_ball",
      "rice",
      "rice_cracker",
      "fish_cake",
      "fortune_cookie",
      "moon_cake",
      "oden",
      "dango",
      "shaved_ice",
      "ice_cream",
      "icecream",
      "pie",
      "cupcake",
      "cake",
      "birthday",
      "custard",
      "lollipop",
      "candy",
      "chocolate_bar",
      "popcorn",
      "doughnut",
      "dumpling",
      "cookie",
      "chestnut",
      "peanuts",
      "honey_pot",
      "milk_glass",
      "baby_bottle",
      "coffee",
      "tea",
      "cup_with_straw",
      "sake",
      "beer",
      "beers",
      "clinking_glasses",
      "wine_glass",
      "tumbler_glass",
      "cocktail",
      "tropical_drink",
      "champagne",
      "spoon",
      "fork_and_knife",
      "plate_with_cutlery",
      "bowl_with_spoon",
      "takeout_box",
      "chopsticks",
      "salt",
      "soccer",
      "basketball",
      "football",
      "baseball",
      "softball",
      "tennis",
      "volleyball",
      "rugby_football",
      "flying_disc",
      "8ball",
      "golf",
      "golfing_woman",
      "golfing_man",
      "ping_pong",
      "badminton",
      "goal_net",
      "ice_hockey",
      "field_hockey",
      "lacrosse",
      "cricket",
      "ski",
      "skier",
      "snowboarder",
      "person_fencing",
      "women_wrestling",
      "men_wrestling",
      "woman_cartwheeling",
      "man_cartwheeling",
      "woman_playing_handball",
      "man_playing_handball",
      "ice_skate",
      "curling_stone",
      "skateboard",
      "sled",
      "bow_and_arrow",
      "fishing_pole_and_fish",
      "boxing_glove",
      "martial_arts_uniform",
      "rowing_woman",
      "rowing_man",
      "climbing_woman",
      "climbing_man",
      "swimming_woman",
      "swimming_man",
      "woman_playing_water_polo",
      "man_playing_water_polo",
      "woman_in_lotus_position",
      "man_in_lotus_position",
      "surfing_woman",
      "surfing_man",
      "basketball_woman",
      "basketball_man",
      "weight_lifting_woman",
      "weight_lifting_man",
      "biking_woman",
      "biking_man",
      "mountain_biking_woman",
      "mountain_biking_man",
      "horse_racing",
      "trophy",
      "running_shirt_with_sash",
      "medal_sports",
      "medal_military",
      "1st_place_medal",
      "2nd_place_medal",
      "3rd_place_medal",
      "reminder_ribbon",
      "rosette",
      "ticket",
      "tickets",
      "performing_arts",
      "art",
      "circus_tent",
      "woman_juggling",
      "man_juggling",
      "microphone",
      "headphones",
      "musical_score",
      "musical_keyboard",
      "drum",
      "saxophone",
      "trumpet",
      "guitar",
      "violin",
      "clapper",
      "video_game",
      "dart",
      "game_die",
      "chess_pawn",
      "slot_machine",
      "jigsaw",
      "bowling",
      "red_car",
      "taxi",
      "blue_car",
      "bus",
      "trolleybus",
      "racing_car",
      "police_car",
      "ambulance",
      "fire_engine",
      "minibus",
      "truck",
      "articulated_lorry",
      "tractor",
      "kick_scooter",
      "motorcycle",
      "bike",
      "motor_scooter",
      "rotating_light",
      "oncoming_police_car",
      "oncoming_bus",
      "oncoming_automobile",
      "oncoming_taxi",
      "aerial_tramway",
      "mountain_cableway",
      "suspension_railway",
      "railway_car",
      "train",
      "monorail",
      "bullettrain_side",
      "bullettrain_front",
      "light_rail",
      "mountain_railway",
      "steam_locomotive",
      "train2",
      "metro",
      "tram",
      "station",
      "flying_saucer",
      "helicopter",
      "small_airplane",
      "airplane",
      "flight_departure",
      "flight_arrival",
      "sailboat",
      "motor_boat",
      "speedboat",
      "ferry",
      "passenger_ship",
      "rocket",
      "artificial_satellite",
      "seat",
      "canoe",
      "anchor",
      "construction",
      "fuelpump",
      "busstop",
      "vertical_traffic_light",
      "traffic_light",
      "ship",
      "ferris_wheel",
      "roller_coaster",
      "carousel_horse",
      "building_construction",
      "foggy",
      "tokyo_tower",
      "factory",
      "fountain",
      "rice_scene",
      "mountain",
      "mountain_snow",
      "mount_fuji",
      "volcano",
      "japan",
      "camping",
      "tent",
      "national_park",
      "motorway",
      "railway_track",
      "sunrise",
      "sunrise_over_mountains",
      "desert",
      "beach_umbrella",
      "desert_island",
      "city_sunrise",
      "city_sunset",
      "cityscape",
      "night_with_stars",
      "bridge_at_night",
      "milky_way",
      "stars",
      "sparkler",
      "fireworks",
      "rainbow",
      "houses",
      "european_castle",
      "japanese_castle",
      "stadium",
      "statue_of_liberty",
      "house",
      "house_with_garden",
      "derelict_house",
      "office",
      "department_store",
      "post_office",
      "european_post_office",
      "hospital",
      "bank",
      "hotel",
      "convenience_store",
      "school",
      "love_hotel",
      "wedding",
      "classical_building",
      "church",
      "mosque",
      "synagogue",
      "kaaba",
      "shinto_shrine",
      "watch",
      "iphone",
      "calling",
      "computer",
      "keyboard",
      "desktop_computer",
      "printer",
      "computer_mouse",
      "trackball",
      "joystick",
      "clamp",
      "minidisc",
      "floppy_disk",
      "cd",
      "dvd",
      "vhs",
      "camera",
      "camera_flash",
      "video_camera",
      "movie_camera",
      "film_projector",
      "film_strip",
      "telephone_receiver",
      "phone",
      "pager",
      "fax",
      "tv",
      "radio",
      "studio_microphone",
      "level_slider",
      "control_knobs",
      "compass",
      "stopwatch",
      "timer_clock",
      "alarm_clock",
      "mantelpiece_clock",
      "hourglass_flowing_sand",
      "hourglass",
      "satellite",
      "battery",
      "electric_plug",
      "bulb",
      "flashlight",
      "candle",
      "fire_extinguisher",
      "wastebasket",
      "oil_drum",
      "money_with_wings",
      "dollar",
      "yen",
      "euro",
      "pound",
      "moneybag",
      "credit_card",
      "gem",
      "balance_scale",
      "toolbox",
      "wrench",
      "hammer",
      "hammer_and_pick",
      "hammer_and_wrench",
      "pick",
      "nut_and_bolt",
      "gear",
      "brick",
      "chains",
      "magnet",
      "gun",
      "bomb",
      "firecracker",
      "hocho",
      "dagger",
      "crossed_swords",
      "shield",
      "smoking",
      "coffin",
      "funeral_urn",
      "amphora",
      "crystal_ball",
      "prayer_beads",
      "nazar_amulet",
      "barber",
      "alembic",
      "telescope",
      "microscope",
      "hole",
      "pill",
      "syringe",
      "dna",
      "microbe",
      "petri_dish",
      "test_tube",
      "thermometer",
      "broom",
      "basket",
      "toilet_paper",
      "label",
      "bookmark",
      "toilet",
      "shower",
      "bathtub",
      "bath",
      "soap",
      "sponge",
      "lotion_bottle",
      "key",
      "old_key",
      "couch_and_lamp",
      "sleeping_bed",
      "bed",
      "door",
      "bellhop_bell",
      "teddy_bear",
      "framed_picture",
      "world_map",
      "parasol_on_ground",
      "moyai",
      "shopping",
      "shopping_cart",
      "balloon",
      "flags",
      "ribbon",
      "gift",
      "confetti_ball",
      "tada",
      "dolls",
      "wind_chime",
      "crossed_flags",
      "izakaya_lantern",
      "red_envelope",
      "email",
      "envelope_with_arrow",
      "incoming_envelope",
      "e-mail",
      "love_letter",
      "postbox",
      "mailbox_closed",
      "mailbox",
      "mailbox_with_mail",
      "mailbox_with_no_mail",
      "package",
      "postal_horn",
      "inbox_tray",
      "outbox_tray",
      "scroll",
      "page_with_curl",
      "bookmark_tabs",
      "receipt",
      "bar_chart",
      "chart_with_upwards_trend",
      "chart_with_downwards_trend",
      "page_facing_up",
      "date",
      "calendar",
      "spiral_calendar",
      "card_index",
      "card_file_box",
      "ballot_box",
      "file_cabinet",
      "clipboard",
      "spiral_notepad",
      "file_folder",
      "open_file_folder",
      "card_index_dividers",
      "newspaper_roll",
      "newspaper",
      "notebook",
      "closed_book",
      "green_book",
      "blue_book",
      "orange_book",
      "notebook_with_decorative_cover",
      "ledger",
      "books",
      "open_book",
      "safety_pin",
      "link",
      "paperclip",
      "paperclips",
      "scissors",
      "triangular_ruler",
      "straight_ruler",
      "abacus",
      "pushpin",
      "round_pushpin",
      "closed_lock_with_key",
      "lock",
      "unlock",
      "lock_with_ink_pen",
      "pen",
      "fountain_pen",
      "black_nib",
      "memo",
      "pencil2",
      "crayon",
      "paintbrush",
      "mag",
      "mag_right",
      "heart",
      "orange_heart",
      "yellow_heart",
      "green_heart",
      "blue_heart",
      "purple_heart",
      "black_heart",
      "broken_heart",
      "heavy_heart_exclamation",
      "two_hearts",
      "revolving_hearts",
      "heartbeat",
      "heartpulse",
      "sparkling_heart",
      "cupid",
      "gift_heart",
      "heart_decoration",
      "peace_symbol",
      "latin_cross",
      "star_and_crescent",
      "om",
      "wheel_of_dharma",
      "star_of_david",
      "six_pointed_star",
      "menorah",
      "yin_yang",
      "orthodox_cross",
      "place_of_worship",
      "ophiuchus",
      "aries",
      "taurus",
      "gemini",
      "cancer",
      "leo",
      "virgo",
      "libra",
      "scorpius",
      "sagittarius",
      "capricorn",
      "aquarius",
      "pisces",
      "id",
      "atom_symbol",
      "u7a7a",
      "u5272",
      "radioactive",
      "biohazard",
      "mobile_phone_off",
      "vibration_mode",
      "u6709",
      "u7121",
      "u7533",
      "u55b6",
      "u6708",
      "eight_pointed_black_star",
      "vs",
      "accept",
      "white_flower",
      "ideograph_advantage",
      "secret",
      "congratulations",
      "u5408",
      "u6e80",
      "u7981",
      "a",
      "b",
      "ab",
      "cl",
      "o2",
      "sos",
      "no_entry",
      "name_badge",
      "no_entry_sign",
      "x",
      "o",
      "stop_sign",
      "anger",
      "hotsprings",
      "no_pedestrians",
      "do_not_litter",
      "no_bicycles",
      "non-potable_water",
      "underage",
      "no_mobile_phones",
      "exclamation",
      "grey_exclamation",
      "question",
      "grey_question",
      "bangbang",
      "interrobang",
      "100",
      "low_brightness",
      "high_brightness",
      "trident",
      "fleur_de_lis",
      "part_alternation_mark",
      "warning",
      "children_crossing",
      "beginner",
      "recycle",
      "u6307",
      "chart",
      "sparkle",
      "eight_spoked_asterisk",
      "negative_squared_cross_mark",
      "white_check_mark",
      "diamond_shape_with_a_dot_inside",
      "cyclone",
      "loop",
      "globe_with_meridians",
      "m",
      "atm",
      "zzz",
      "sa",
      "passport_control",
      "customs",
      "baggage_claim",
      "left_luggage",
      "wheelchair",
      "no_smoking",
      "wc",
      "parking",
      "potable_water",
      "mens",
      "womens",
      "baby_symbol",
      "restroom",
      "put_litter_in_its_place",
      "cinema",
      "signal_strength",
      "koko",
      "ng",
      "ok",
      "up",
      "cool",
      "new",
      "free",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "keycap_ten",
      "asterisk",
      "1234",
      "eject_button",
      "arrow_forward",
      "pause_button",
      "next_track_button",
      "stop_button",
      "record_button",
      "play_or_pause_button",
      "previous_track_button",
      "fast_forward",
      "rewind",
      "twisted_rightwards_arrows",
      "repeat",
      "repeat_one",
      "arrow_backward",
      "arrow_up_small",
      "arrow_down_small",
      "arrow_double_up",
      "arrow_double_down",
      "arrow_right",
      "arrow_left",
      "arrow_up",
      "arrow_down",
      "arrow_upper_right",
      "arrow_lower_right",
      "arrow_lower_left",
      "arrow_upper_left",
      "arrow_up_down",
      "left_right_arrow",
      "arrows_counterclockwise",
      "arrow_right_hook",
      "leftwards_arrow_with_hook",
      "arrow_heading_up",
      "arrow_heading_down",
      "hash",
      "information_source",
      "abc",
      "abcd",
      "capital_abcd",
      "symbols",
      "musical_note",
      "notes",
      "wavy_dash",
      "curly_loop",
      "heavy_check_mark",
      "arrows_clockwise",
      "heavy_plus_sign",
      "heavy_minus_sign",
      "heavy_division_sign",
      "heavy_multiplication_x",
      "infinity",
      "heavy_dollar_sign",
      "currency_exchange",
      "copyright",
      "registered",
      "tm",
      "end",
      "back",
      "on",
      "top",
      "soon",
      "ballot_box_with_check",
      "radio_button",
      "white_circle",
      "black_circle",
      "red_circle",
      "large_blue_circle",
      "small_orange_diamond",
      "small_blue_diamond",
      "large_orange_diamond",
      "large_blue_diamond",
      "small_red_triangle",
      "black_small_square",
      "white_small_square",
      "black_large_square",
      "white_large_square",
      "small_red_triangle_down",
      "black_medium_square",
      "white_medium_square",
      "black_medium_small_square",
      "white_medium_small_square",
      "black_square_button",
      "white_square_button",
      "speaker",
      "sound",
      "loud_sound",
      "mute",
      "mega",
      "loudspeaker",
      "bell",
      "no_bell",
      "black_joker",
      "mahjong",
      "spades",
      "clubs",
      "hearts",
      "diamonds",
      "flower_playing_cards",
      "thought_balloon",
      "right_anger_bubble",
      "speech_balloon",
      "left_speech_bubble",
      "clock1",
      "clock2",
      "clock3",
      "clock4",
      "clock5",
      "clock6",
      "clock7",
      "clock8",
      "clock9",
      "clock10",
      "clock11",
      "clock12",
      "clock130",
      "clock230",
      "clock330",
      "clock430",
      "clock530",
      "clock630",
      "clock730",
      "clock830",
      "clock930",
      "clock1030",
      "clock1130",
      "clock1230",
      "white_flag",
      "black_flag",
      "pirate_flag",
      "checkered_flag",
      "triangular_flag_on_post",
      "rainbow_flag",
      "united_nations",
      "afghanistan",
      "aland_islands",
      "albania",
      "algeria",
      "american_samoa",
      "andorra",
      "angola",
      "anguilla",
      "antarctica",
      "antigua_barbuda",
      "argentina",
      "armenia",
      "aruba",
      "australia",
      "austria",
      "azerbaijan",
      "bahamas",
      "bahrain",
      "bangladesh",
      "barbados",
      "belarus",
      "belgium",
      "belize",
      "benin",
      "bermuda",
      "bhutan",
      "bolivia",
      "caribbean_netherlands",
      "bosnia_herzegovina",
      "botswana",
      "brazil",
      "british_indian_ocean_territory",
      "british_virgin_islands",
      "brunei",
      "bulgaria",
      "burkina_faso",
      "burundi",
      "cape_verde",
      "cambodia",
      "cameroon",
      "canada",
      "canary_islands",
      "cayman_islands",
      "central_african_republic",
      "chad",
      "chile",
      "cn",
      "christmas_island",
      "cocos_islands",
      "colombia",
      "comoros",
      "congo_brazzaville",
      "congo_kinshasa",
      "cook_islands",
      "costa_rica",
      "croatia",
      "cuba",
      "curacao",
      "cyprus",
      "czech_republic",
      "denmark",
      "djibouti",
      "dominica",
      "dominican_republic",
      "ecuador",
      "egypt",
      "el_salvador",
      "equatorial_guinea",
      "eritrea",
      "estonia",
      "ethiopia",
      "eu",
      "falkland_islands",
      "faroe_islands",
      "fiji",
      "finland",
      "fr",
      "french_guiana",
      "french_polynesia",
      "french_southern_territories",
      "gabon",
      "gambia",
      "georgia",
      "de",
      "ghana",
      "gibraltar",
      "greece",
      "greenland",
      "grenada",
      "guadeloupe",
      "guam",
      "guatemala",
      "guernsey",
      "guinea",
      "guinea_bissau",
      "guyana",
      "haiti",
      "honduras",
      "hong_kong",
      "hungary",
      "iceland",
      "india",
      "indonesia",
      "iran",
      "iraq",
      "ireland",
      "isle_of_man",
      "israel",
      "it",
      "cote_divoire",
      "jamaica",
      "jp",
      "jersey",
      "jordan",
      "kazakhstan",
      "kenya",
      "kiribati",
      "kosovo",
      "kuwait",
      "kyrgyzstan",
      "laos",
      "latvia",
      "lebanon",
      "lesotho",
      "liberia",
      "libya",
      "liechtenstein",
      "lithuania",
      "luxembourg",
      "macau",
      "macedonia",
      "madagascar",
      "malawi",
      "malaysia",
      "maldives",
      "mali",
      "malta",
      "marshall_islands",
      "martinique",
      "mauritania",
      "mauritius",
      "mayotte",
      "mexico",
      "micronesia",
      "moldova",
      "monaco",
      "mongolia",
      "montenegro",
      "montserrat",
      "morocco",
      "mozambique",
      "myanmar",
      "namibia",
      "nauru",
      "nepal",
      "netherlands",
      "new_caledonia",
      "new_zealand",
      "nicaragua",
      "niger",
      "nigeria",
      "niue",
      "norfolk_island",
      "northern_mariana_islands",
      "north_korea",
      "norway",
      "oman",
      "pakistan",
      "palau",
      "palestinian_territories",
      "panama",
      "papua_new_guinea",
      "paraguay",
      "peru",
      "philippines",
      "pitcairn_islands",
      "poland",
      "portugal",
      "puerto_rico",
      "qatar",
      "reunion",
      "romania",
      "ru",
      "rwanda",
      "st_barthelemy",
      "st_helena",
      "st_kitts_nevis",
      "st_lucia",
      "st_pierre_miquelon",
      "st_vincent_grenadines",
      "samoa",
      "san_marino",
      "sao_tome_principe",
      "saudi_arabia",
      "senegal",
      "serbia",
      "seychelles",
      "sierra_leone",
      "singapore",
      "sint_maarten",
      "slovakia",
      "slovenia",
      "solomon_islands",
      "somalia",
      "south_africa",
      "south_georgia_south_sandwich_islands",
      "kr",
      "south_sudan",
      "es",
      "sri_lanka",
      "sudan",
      "suriname",
      "swaziland",
      "sweden",
      "switzerland",
      "syria",
      "taiwan",
      "tajikistan",
      "tanzania",
      "thailand",
      "timor_leste",
      "togo",
      "tokelau",
      "tonga",
      "trinidad_tobago",
      "tunisia",
      "tr",
      "turkmenistan",
      "turks_caicos_islands",
      "tuvalu",
      "uganda",
      "ukraine",
      "united_arab_emirates",
      "uk",
      "england",
      "scotland",
      "wales",
      "us",
      "us_virgin_islands",
      "uruguay",
      "uzbekistan",
      "vanuatu",
      "vatican_city",
      "venezuela",
      "vietnam",
      "wallis_futuna",
      "western_sahara",
      "yemen",
      "zambia",
      "zimbabwe"
    ];
  }
});

// node_modules/emojilib/index.js
var require_emojilib = __commonJS({
  "node_modules/emojilib/index.js"(exports, module2) {
    module2.exports = {
      lib: require_emojis(),
      ordered: require_ordered(),
      fitzpatrick_scale_modifiers: ["\u{1F3FB}", "\u{1F3FC}", "\u{1F3FD}", "\u{1F3FE}", "\u{1F3FF}"]
    };
  }
});

// node_modules/char-regex/index.js
var require_char_regex = __commonJS({
  "node_modules/char-regex/index.js"(exports, module2) {
    "use strict";
    module2.exports = () => {
      const astralRange = "\\ud800-\\udfff";
      const comboMarksRange = "\\u0300-\\u036f";
      const comboHalfMarksRange = "\\ufe20-\\ufe2f";
      const comboSymbolsRange = "\\u20d0-\\u20ff";
      const comboMarksExtendedRange = "\\u1ab0-\\u1aff";
      const comboMarksSupplementRange = "\\u1dc0-\\u1dff";
      const comboRange = comboMarksRange + comboHalfMarksRange + comboSymbolsRange + comboMarksExtendedRange + comboMarksSupplementRange;
      const varRange = "\\ufe0e\\ufe0f";
      const familyRange = "\\uD83D\\uDC69\\uD83C\\uDFFB\\u200D\\uD83C\\uDF93";
      const astral = `[${astralRange}]`;
      const combo = `[${comboRange}]`;
      const fitz = "\\ud83c[\\udffb-\\udfff]";
      const modifier = `(?:${combo}|${fitz})`;
      const nonAstral = `[^${astralRange}]`;
      const regional = "(?:\\uD83C[\\uDDE6-\\uDDFF]){2}";
      const surrogatePair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      const zwj = "\\u200d";
      const blackFlag = "(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40(?:\\udc65|\\udc73|\\udc77)\\udb40(?:\\udc6e|\\udc63|\\udc6c)\\udb40(?:\\udc67|\\udc74|\\udc73)\\udb40\\udc7f)";
      const family = `[${familyRange}]`;
      const optModifier = `${modifier}?`;
      const optVar = `[${varRange}]?`;
      const optJoin = `(?:${zwj}(?:${[nonAstral, regional, surrogatePair].join("|")})${optVar + optModifier})*`;
      const seq = optVar + optModifier + optJoin;
      const nonAstralCombo = `${nonAstral}${combo}?`;
      const symbol = `(?:${[nonAstralCombo, combo, regional, surrogatePair, astral, family].join("|")})`;
      return new RegExp(`${blackFlag}|${fitz}(?=${fitz})|${symbol + seq}`, "g");
    };
  }
});

// node_modules/unicode-emoji-modifier-base/index.js
var require_unicode_emoji_modifier_base = __commonJS({
  "node_modules/unicode-emoji-modifier-base/index.js"(exports, module2) {
    module2.exports = /* @__PURE__ */ new Set([
      9757,
      9977,
      9994,
      9995,
      9996,
      9997,
      127877,
      127939,
      127940,
      127946,
      127947,
      128066,
      128067,
      128070,
      128071,
      128072,
      128073,
      128074,
      128075,
      128076,
      128077,
      128078,
      128079,
      128080,
      128102,
      128103,
      128104,
      128105,
      128110,
      128112,
      128113,
      128114,
      128115,
      128116,
      128117,
      128118,
      128119,
      128120,
      128124,
      128129,
      128130,
      128131,
      128133,
      128134,
      128135,
      128170,
      128373,
      128378,
      128400,
      128405,
      128406,
      128581,
      128582,
      128583,
      128587,
      128588,
      128589,
      128590,
      128591,
      128675,
      128692,
      128693,
      128694,
      128704,
      129304,
      129305,
      129306,
      129307,
      129308,
      129309,
      129310,
      129318,
      129328,
      129331,
      129332,
      129333,
      129334,
      129335,
      129336,
      129337,
      129340,
      129341,
      129342
    ]);
  }
});

// node_modules/skin-tone/index.js
var require_skin_tone = __commonJS({
  "node_modules/skin-tone/index.js"(exports, module2) {
    "use strict";
    var emojiModifierBase = require_unicode_emoji_modifier_base();
    var skinTones = /* @__PURE__ */ new Map([
      ["none", ""],
      ["white", "\u{1F3FB}"],
      ["creamWhite", "\u{1F3FC}"],
      ["lightBrown", "\u{1F3FD}"],
      ["brown", "\u{1F3FE}"],
      ["darkBrown", "\u{1F3FF}"]
    ]);
    module2.exports = (emoji, tone) => {
      if (!skinTones.has(tone)) {
        throw new TypeError(`Unexpected \`skinTone\` name: ${tone}`);
      }
      emoji = emoji.replace(/[\u{1f3fb}-\u{1f3ff}]/u, "");
      if (emojiModifierBase.has(emoji.codePointAt(0)) && tone !== "none") {
        emoji += skinTones.get(tone);
      }
      return emoji;
    };
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module2) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module2) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module2.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module2) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module2.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module2.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module2) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module2.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module2) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module2.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module2) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module2.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module2) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module2.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module2) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module2.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module2) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module2.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module2.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module2) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module2.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module2) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module2.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module2) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module2.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module2) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module2.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module2) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module2.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module2) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module2.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module2.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module2) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module2.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module2) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module2.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module2.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module2.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module2) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module2.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module2) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module2.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module2) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module2.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module2) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module2.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module2.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module2.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module2) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module2.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module2) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module2) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module2.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module2) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module2.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module2) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module2.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module2) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module2.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module2) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module2.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module2) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module2.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module2) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module2) {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module2.exports = Uint8Array2;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module2) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module2.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module2) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module2.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module2.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module2) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module2) {
    var isArray = Array.isArray;
    module2.exports = isArray;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module2) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module2.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module2) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module2.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module2) {
    function stubArray() {
      return [];
    }
    module2.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module2) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module2.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module2) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module2.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module2.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module2) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module2.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module2) {
    function stubFalse() {
      return false;
    }
    module2.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module2) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module2.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module2.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module2.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module2) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module2.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module2.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module2) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module2.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module2) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module2) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module2.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module2) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module2) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module2.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module2) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module2) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module2.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module2) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module2) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module2.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module2) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module2.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module2.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module2.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module2.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module2) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module2.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module2) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module2.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module2) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module2.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module2) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    module2.exports = isEqual2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BannersPlugin,
  plug: () => plug
});
module.exports = __toCommonJS(main_exports);
var import_obsidian20 = require("obsidian");

// src/banner/index.ts
var import_obsidian10 = require("obsidian");

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function is_promise(value) {
  return !!value && (typeof value === "object" || typeof value === "function") && typeof /** @type {any} */
  value.then === "function";
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url)
    return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// node_modules/svelte/src/runtime/internal/environment.js
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;

// node_modules/svelte/src/runtime/internal/loop.js
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    return this._observer ?? (this._observer = new ResizeObserver((entries) => {
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        this._listeners.get(entry.target)?.(entry);
      }
    }));
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && /** @type {ShadowRoot} */
  root.host) {
    return (
      /** @type {ShadowRoot} */
      root
    );
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  style_element.textContent = "/* empty */";
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value, mounting) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  if (!mounting || value !== void 0) {
    select.selectedIndex = -1;
  }
}
var crossorigin;
function is_crossorigin() {
  if (crossorigin === void 0) {
    crossorigin = false;
    try {
      if (typeof window !== "undefined" && window.parent) {
        void window.parent.document;
      }
    } catch (error) {
      crossorigin = true;
    }
  }
  return crossorigin;
}
function add_iframe_resize_listener(node, fn) {
  const computed_style = getComputedStyle(node);
  if (computed_style.position === "static") {
    node.style.position = "relative";
  }
  const iframe = element("iframe");
  iframe.setAttribute(
    "style",
    "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"
  );
  iframe.setAttribute("aria-hidden", "true");
  iframe.tabIndex = -1;
  const crossorigin2 = is_crossorigin();
  let unsubscribe;
  if (crossorigin2) {
    iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>";
    unsubscribe = listen(
      window,
      "message",
      /** @param {MessageEvent} event */
      (event) => {
        if (event.source === iframe.contentWindow)
          fn();
      }
    );
  } else {
    iframe.src = "about:blank";
    iframe.onload = () => {
      unsubscribe = listen(iframe.contentWindow, "resize", fn);
      fn();
    };
  }
  append(node, iframe);
  return () => {
    if (crossorigin2) {
      unsubscribe();
    } else if (unsubscribe && iframe.contentWindow) {
      unsubscribe();
    }
    detach(iframe);
  };
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/svelte/src/runtime/internal/style_manager.js
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
  return context;
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn) => fn.call(this, event));
  }
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config = fn(node, params, options);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  let original_inert_value;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = (
      /** @type {Program['d']} */
      program.b - t
    );
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if ("inert" in node) {
      if (b) {
        if (original_inert_value !== void 0) {
          node.inert = original_inert_value;
        }
      } else {
        original_inert_value = /** @type {HTMLElement} */
        node.inert;
        node.inert = true;
      }
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(
              node,
              t,
              running_program.b,
              running_program.duration,
              0,
              easing,
              config.css
            );
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          const opts = { direction: b ? "in" : "out" };
          config = config(opts);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}

// node_modules/svelte/src/runtime/internal/await_block.js
function handle_promise(promise2, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise2)) {
    const current_component2 = get_current_component();
    promise2.then(
      (value) => {
        set_current_component(current_component2);
        update2(info.then, 1, info.value, value);
        set_current_component(null);
      },
      (error) => {
        set_current_component(current_component2);
        update2(info.catch, 2, info.error, error);
        set_current_component(null);
        if (!info.hasCatch) {
          throw error;
        }
      }
    );
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise2);
      return true;
    }
    info.resolved = /** @type {T} */
    promise2;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block3, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block3(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance18, create_fragment19, not_equal, props, append_styles = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance18 ? instance18(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment19 ? create_fragment19($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
      if (this.$$l[type]) {
        const idx = this.$$l[type].indexOf(listener);
        if (idx >= 0) {
          this.$$l[type].splice(idx, 1);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      if (this.$$r)
        return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      this.$$c?.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn && this.$$c) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  const type = props_definition[prop]?.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// src/banner/Banner.svelte
var import_obsidian9 = require("obsidian");

// src/bannerData/index.ts
var import_obsidian4 = require("obsidian");

// src/utils.ts
var doesLeafHaveMarkdownMode = (leaf, mode) => {
  const { type, state } = leaf.getViewState();
  if (type !== "markdown")
    return false;
  if (!mode)
    return true;
  return mode === "reading" ? state.mode === "preview" : state.mode === "source";
};
var iterateMarkdownLeaves = (cb, mode) => {
  let leaves = plug.app.workspace.getLeavesOfType("markdown");
  if (mode) {
    leaves = leaves.filter((leaf) => {
      const { state } = leaf.getViewState();
      return mode === "reading" ? state.mode === "preview" : state.mode === "source";
    });
  }
  for (const leaf of leaves)
    cb(leaf);
};
var registerSettingChangeEvent = (settings2, cb) => {
  const keys = typeof settings2 === "string" ? [settings2] : settings2;
  plug.registerEvent(
    plug.events.on("setting-change", (changed) => {
      if (keys.some((key) => Object.hasOwn(changed, key)))
        cb();
    })
  );
};

// src/settings/CssSettingsHandler.ts
var BANNERS_VAR_PREFIX = "--banners";
var CSS_VAR_SETTINGS_LIST = [
  { keys: "height", suffix: "height" },
  { keys: "mobileHeight", suffix: "mobile-height" },
  { keys: "internalEmbedHeight", suffix: "internal-embed-height" },
  { keys: "popoverHeight", suffix: "popover-height" },
  { keys: "headerSize", suffix: "header-font-size" },
  { keys: "iconSize", suffix: "icon-font-size" },
  {
    keys: [
      "headerHorizontalAlignment",
      "headerHorizontalTransform",
      "headerVerticalAlignment",
      "headerVerticalTransform"
    ],
    suffix: "header-transform",
    process: () => {
      const horizontal = getSetting("headerHorizontalAlignment");
      const hTransform = getSetting("headerHorizontalTransform");
      const vertical = getSetting("headerVerticalAlignment");
      const vTransform = getSetting("headerVerticalTransform");
      const h = horizontal === "custom" ? hTransform : "0px";
      const v = vertical === "custom" ? vTransform : "0px";
      return `translate(${h}, ${v})`;
    }
  }
];
var setCssVars = () => {
  for (const { keys, suffix, process } of CSS_VAR_SETTINGS_LIST) {
    const value = process ? process() : parseCssSetting(getSetting(Array.isArray(keys) ? keys[0] : keys));
    document.body.style.setProperty(`${BANNERS_VAR_PREFIX}-${suffix}`, value);
  }
};
var unsetCssVars = () => {
  for (const { suffix } of CSS_VAR_SETTINGS_LIST) {
    document.body.style.removeProperty(`${BANNERS_VAR_PREFIX}-${suffix}`);
  }
};
var prepareCssSettingListener = () => {
  const settings2 = CSS_VAR_SETTINGS_LIST.map((s) => s.keys).flat();
  registerSettingChangeEvent(settings2, setCssVars);
  setCssVars();
};

// src/settings/SettingsTab.ts
var import_obsidian2 = require("obsidian");

// src/banner/utils.ts
var import_obsidian = require("obsidian");
var FILE_REGEX = /^\[\[.+\]\]/;
var imageCache = {};
var getInternalImage = (link, currentPath) => {
  if (link.contains("[["))
    link = link.slice(2, -2);
  const file = plug.app.metadataCache.getFirstLinkpathDest(link, currentPath);
  if (!file) {
    throw new Error(`${link} file does not exist!`);
  } else if (!IMAGE_EXTENSIONS.includes(file.extension)) {
    throw new Error(`${file.name} is not an image!`);
  }
  const resourcePath = plug.app.vault.getResourcePath(file).split("?")[0];
  return resourcePath;
};
var getRemoteImage = async (src) => {
  try {
    new URL(src);
    const resp = await (0, import_obsidian.requestUrl)(src);
    const blob = new Blob([resp.arrayBuffer], {
      type: resp.headers["content-type"]
    });
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(blob);
      reader.onload = () => {
        const result = reader.result;
        imageCache[src] = result;
        resolve(result);
      };
      reader.onerror = (error) => reject(error);
    });
  } catch (error) {
    console.error(error);
    throw new Error(`Failed to fetch image from "${src}"!`);
  }
};
var fetchImage = async (src, currentPath) => {
  if (FILE_REGEX.test(src)) {
    return getInternalImage(src, currentPath);
  } else {
    return getRemoteImage(src);
  }
};

// node_modules/svelte/src/runtime/easing/index.js
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/src/runtime/transition/index.js
function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = "y" } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const primary_property = axis === "y" ? "height" : "width";
  const primary_property_value = parseFloat(style[primary_property]);
  const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
  const capitalized_secondary_properties = secondary_properties.map(
    (e) => `${e[0].toUpperCase()}${e.slice(1)}`
  );
  const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
  const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
  const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
  const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
  const border_width_start_value = parseFloat(
    style[`border${capitalized_secondary_properties[0]}Width`]
  );
  const border_width_end_value = parseFloat(
    style[`border${capitalized_secondary_properties[1]}Width`]
  );
  return {
    delay,
    duration,
    easing,
    css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};${primary_property}: ${t * primary_property_value}px;padding-${secondary_properties[0]}: ${t * padding_start_value}px;padding-${secondary_properties[1]}: ${t * padding_end_value}px;margin-${secondary_properties[0]}: ${t * margin_start_value}px;margin-${secondary_properties[1]}: ${t * margin_end_value}px;border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
  };
}

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set, update2) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set, update2);
      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i) => subscribe(
        store,
        (value) => {
          values[i] = value;
          pending &= ~(1 << i);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}

// src/settings/structure.ts
var FILENAME_KEY = "filename";
var DEFAULT_SETTINGS = {
  style: "solid",
  height: 300,
  mobileHeight: 180,
  adjustWidthToReadableLineWidth: false,
  showInInternalEmbed: true,
  internalEmbedHeight: 200,
  showInPopover: true,
  popoverHeight: 120,
  bannerDragModifier: "None",
  frontmatterField: "banner",
  enableDragInInternalEmbed: false,
  enableDragInPopover: false,
  // enableLockButton: true,
  headerSize: "var(--inline-title-size)",
  headerDecor: "shadow",
  headerHorizontalAlignment: "left",
  headerHorizontalTransform: "0px",
  headerVerticalAlignment: "edge",
  headerVerticalTransform: "0px",
  useHeaderByDefault: false,
  defaultHeaderValue: `{{${FILENAME_KEY}}}`,
  iconSize: "1.2em",
  useTwemoji: true,
  showPreviewInLocalModal: true,
  localModalSuggestionLimit: 15,
  bannersFolder: "/",
  autoDownloadPastedBanners: false
};
var LENGTH_SETTINGS = [
  "height",
  "mobileHeight",
  "internalEmbedHeight",
  "popoverHeight",
  "headerSize",
  "headerHorizontalTransform",
  "headerVerticalTransform",
  "iconSize"
];
var TEXT_SETTINGS = [
  ...LENGTH_SETTINGS,
  "frontmatterField",
  "defaultHeaderValue",
  "bannersFolder"
];
var STYLE_OPTION_LABELS = {
  solid: "Solid",
  gradient: "Gradient"
};
var BANNER_DRAG_MOD_OPION_LABELS = {
  None: "None",
  Shift: "\u21E7 Shift",
  Ctrl: "\u2303 Ctrl",
  Alt: "\u2387 Alt",
  Meta: "\u2318 Meta"
};
var HEADER_TEXT_DECOR_OPTION_LABELS = {
  none: "None",
  shadow: "Shadow behind text",
  border: "Border around text"
};
var HEADER_HORIZONTAL_ALIGN_OPTION_LABELS = {
  left: "Left",
  center: "Center",
  right: "Right",
  custom: "Custom"
};
var HEADER_VERTICAL_ALIGN_OPTION_LABELS = {
  center: "Center of the banner",
  above: "Just above the banner",
  edge: "Edge of the banner",
  below: "Just below the banner",
  custom: "Custom"
};
var SELECT_OPTIONS_MAP = {
  style: STYLE_OPTION_LABELS,
  bannerDragModifier: BANNER_DRAG_MOD_OPION_LABELS,
  headerDecor: HEADER_TEXT_DECOR_OPTION_LABELS,
  headerHorizontalAlignment: HEADER_HORIZONTAL_ALIGN_OPTION_LABELS,
  headerVerticalAlignment: HEADER_VERTICAL_ALIGN_OPTION_LABELS
};

// src/settings/store.ts
var rawSettings = {
  ...writable(),
  updateSetting: async (key, value) => {
    const changed = { [key]: value };
    if (value !== void 0) {
      plug.settings = { ...plug.settings, ...changed };
    } else {
      delete plug.settings[key];
    }
    await saveSettings(changed);
  }
};
var settings = derived(rawSettings, ($settings) => {
  const processed = { ...DEFAULT_SETTINGS, ...$settings };
  let key;
  for (key in processed) {
    if (LENGTH_SETTINGS.includes(key)) {
      processed[key] = parseCssSetting(processed[key]);
    }
  }
  return processed;
});

// src/settings/components/SettingItem.svelte
var get_setting_slot_changes = (dirty) => ({ value: dirty & /*value*/
2 });
var get_setting_slot_context = (ctx) => ({
  value: (
    /*value*/
    ctx[1]
  ),
  update: (
    /*update*/
    ctx[2]
  )
});
var get_description_slot_changes = (dirty) => ({});
var get_description_slot_context = (ctx) => ({});
var get_name_slot_changes = (dirty) => ({});
var get_name_slot_context = (ctx) => ({});
function create_fragment(ctx) {
  let div4;
  let div2;
  let div0;
  let t0;
  let div1;
  let t1;
  let div3;
  let div4_transition;
  let current;
  const name_slot_template = (
    /*#slots*/
    ctx[6].name
  );
  const name_slot = create_slot(
    name_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_name_slot_context
  );
  const description_slot_template = (
    /*#slots*/
    ctx[6].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_description_slot_context
  );
  const setting_slot_template = (
    /*#slots*/
    ctx[6].setting
  );
  const setting_slot = create_slot(
    setting_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_setting_slot_context
  );
  return {
    c() {
      div4 = element("div");
      div2 = element("div");
      div0 = element("div");
      if (name_slot)
        name_slot.c();
      t0 = space();
      div1 = element("div");
      if (description_slot)
        description_slot.c();
      t1 = space();
      div3 = element("div");
      if (setting_slot)
        setting_slot.c();
      attr(div0, "class", "setting-item-name");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "setting-item-info");
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
      set_style(
        div4,
        "margin-left",
        /*margin*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div2);
      append(div2, div0);
      if (name_slot) {
        name_slot.m(div0, null);
      }
      append(div2, t0);
      append(div2, div1);
      if (description_slot) {
        description_slot.m(div1, null);
      }
      append(div4, t1);
      append(div4, div3);
      if (setting_slot) {
        setting_slot.m(div3, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (name_slot) {
        if (name_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            name_slot,
            name_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              name_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_name_slot_changes
            ),
            get_name_slot_context
          );
        }
      }
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_description_slot_changes
            ),
            get_description_slot_context
          );
        }
      }
      if (setting_slot) {
        if (setting_slot.p && (!current || dirty & /*$$scope, value*/
        34)) {
          update_slot_base(
            setting_slot,
            setting_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              setting_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_setting_slot_changes
            ),
            get_setting_slot_context
          );
        }
      }
      if (dirty & /*margin*/
      1) {
        set_style(
          div4,
          "margin-left",
          /*margin*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(name_slot, local);
      transition_in(description_slot, local);
      transition_in(setting_slot, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div4_transition)
            div4_transition = create_bidirectional_transition(div4, slide, {}, true);
          div4_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(name_slot, local);
      transition_out(description_slot, local);
      transition_out(setting_slot, local);
      if (local) {
        if (!div4_transition)
          div4_transition = create_bidirectional_transition(div4, slide, {}, false);
        div4_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if (name_slot)
        name_slot.d(detaching);
      if (description_slot)
        description_slot.d(detaching);
      if (setting_slot)
        setting_slot.d(detaching);
      if (detaching && div4_transition)
        div4_transition.end();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let value;
  let margin;
  let $rawSettings;
  component_subscribe($$self, rawSettings, ($$value) => $$invalidate(4, $rawSettings = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  let { key = void 0 } = $$props;
  const indent = getContext("level") ?? 0;
  const update2 = (value2) => {
    if (key)
      rawSettings.updateSetting(key, value2);
  };
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(3, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*key, $rawSettings*/
    24) {
      $:
        $$invalidate(1, value = key ? $rawSettings[key] ?? "" : null);
    }
  };
  $:
    $$invalidate(0, margin = indent ? `${indent * 1.5}em` : "");
  return [margin, value, update2, key, $rawSettings, $$scope, slots];
}
var SettingItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { key: 3 });
  }
};
var SettingItem_default = SettingItem;

// src/settings/components/CSSLengthFragment.svelte
function create_if_block_1(ctx) {
  let t;
  return {
    c() {
      t = text(".");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_if_block(ctx) {
  let t0;
  let code0;
  let t2;
  let code1;
  let t4;
  let code2;
  let t6;
  return {
    c() {
      t0 = text("such as ");
      code0 = element("code");
      code0.textContent = "10px";
      t2 = text(", ");
      code1 = element("code");
      code1.textContent = "-30%";
      t4 = text(", ");
      code2 = element("code");
      code2.textContent = "calc(1em + 10px)";
      t6 = text(", and so on...");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, code0, anchor);
      insert(target, t2, anchor);
      insert(target, code1, anchor);
      insert(target, t4, anchor);
      insert(target, code2, anchor);
      insert(target, t6, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(code0);
        detach(t2);
        detach(code1);
        detach(t4);
        detach(code2);
        detach(t6);
      }
    }
  };
}
function create_fragment2(ctx) {
  let t0;
  let a;
  let t2;
  let if_block1_anchor;
  let if_block0 = (
    /*period*/
    ctx[1] && create_if_block_1(ctx)
  );
  let if_block1 = (
    /*examples*/
    ctx[0] && create_if_block(ctx)
  );
  return {
    c() {
      t0 = text("This can be any valid number or\r\n");
      a = element("a");
      a.textContent = "CSS length value";
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(a, "href", "https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths");
      attr(a, "rel", "noopener noreferrer");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, a, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*period*/
        ctx2[1]
      ) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(t2.parentNode, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*examples*/
        ctx2[0]
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(a);
        detach(t2);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { examples = false } = $$props;
  let { period = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("examples" in $$props2)
      $$invalidate(0, examples = $$props2.examples);
    if ("period" in $$props2)
      $$invalidate(1, period = $$props2.period);
  };
  return [examples, period];
}
var CSSLengthFragment = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, { examples: 0, period: 1 });
  }
};
var CSSLengthFragment_default = CSSLengthFragment;

// src/settings/components/Depends.svelte
function create_if_block2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment3(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*show*/
    ctx[0] && create_if_block2(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*show*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*show*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let show;
  let $rawSettings;
  component_subscribe($$self, rawSettings, ($$value) => $$invalidate(2, $rawSettings = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  let { on } = $$props;
  setContext("level", (getContext("level") ?? 0) + 1);
  $$self.$$set = ($$props2) => {
    if ("on" in $$props2)
      $$invalidate(1, on = $$props2.on);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*on, $rawSettings*/
    6) {
      $:
        $$invalidate(0, show = typeof on === "string" ? $rawSettings[on] : on);
    }
  };
  return [show, on, $rawSettings, $$scope, slots];
}
var Depends = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, { on: 1 });
  }
};
var Depends_default = Depends;

// src/settings/components/InputSetting.svelte
var get_name_slot_changes2 = (dirty) => ({});
var get_name_slot_context2 = (ctx) => ({ slot: "name" });
var get_description_slot_changes2 = (dirty) => ({});
var get_description_slot_context2 = (ctx) => ({ slot: "description" });
function create_name_slot(ctx) {
  let current;
  const name_slot_template = (
    /*#slots*/
    ctx[5].name
  );
  const name_slot = create_slot(
    name_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_name_slot_context2
  );
  return {
    c() {
      if (name_slot)
        name_slot.c();
    },
    m(target, anchor) {
      if (name_slot) {
        name_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (name_slot) {
        if (name_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            name_slot,
            name_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              name_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_name_slot_changes2
            ),
            get_name_slot_context2
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(name_slot, local);
      current = true;
    },
    o(local) {
      transition_out(name_slot, local);
      current = false;
    },
    d(detaching) {
      if (name_slot)
        name_slot.d(detaching);
    }
  };
}
function create_description_slot(ctx) {
  let current;
  const description_slot_template = (
    /*#slots*/
    ctx[5].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_description_slot_context2
  );
  return {
    c() {
      if (description_slot)
        description_slot.c();
    },
    m(target, anchor) {
      if (description_slot) {
        description_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_description_slot_changes2
            ),
            get_description_slot_context2
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(description_slot, local);
      current = true;
    },
    o(local) {
      transition_out(description_slot, local);
      current = false;
    },
    d(detaching) {
      if (description_slot)
        description_slot.d(detaching);
    }
  };
}
function create_setting_slot(ctx) {
  let input;
  let input_value_value;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[6](
        /*update*/
        ctx[8],
        ...args
      )
    );
  }
  return {
    c() {
      input = element("input");
      attr(input, "slot", "setting");
      attr(
        input,
        "type",
        /*type*/
        ctx[1]
      );
      input.value = input_value_value = /*value*/
      ctx[9];
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(input, "change", change_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*type*/
      2) {
        attr(
          input,
          "type",
          /*type*/
          ctx[1]
        );
      }
      if (dirty & /*value*/
      512 && input_value_value !== (input_value_value = /*value*/
      ctx[9]) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (dirty & /*placeholder*/
      4) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment4(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      key: (
        /*key*/
        ctx[0]
      ),
      $$slots: {
        setting: [
          create_setting_slot,
          ({ update: update2, value }) => ({ 8: update2, 9: value }),
          ({ update: update2, value }) => (update2 ? 256 : 0) | (value ? 512 : 0)
        ],
        description: [create_description_slot],
        name: [create_name_slot]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem_changes = {};
      if (dirty & /*key*/
      1)
        settingitem_changes.key = /*key*/
        ctx2[0];
      if (dirty & /*$$scope, type, value, placeholder, update*/
      902) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let placeholder;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { key } = $$props;
  let { type = "text" } = $$props;
  let { numOrStr = false } = $$props;
  const updateSetting = (update2, e) => {
    const str = e.currentTarget.value || void 0;
    if (str === void 0) {
      update2(void 0);
    } else if (numOrStr) {
      const number = +str;
      update2(isNaN(number) ? str : number);
    } else {
      update2(str);
    }
  };
  const change_handler = (update2, e) => updateSetting(update2, e);
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
    if ("type" in $$props2)
      $$invalidate(1, type = $$props2.type);
    if ("numOrStr" in $$props2)
      $$invalidate(4, numOrStr = $$props2.numOrStr);
    if ("$$scope" in $$props2)
      $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*key*/
    1) {
      $:
        $$invalidate(2, placeholder = DEFAULT_SETTINGS[key].toString());
    }
  };
  return [
    key,
    type,
    placeholder,
    updateSetting,
    numOrStr,
    slots,
    change_handler,
    $$scope
  ];
}
var InputSetting = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, { key: 0, type: 1, numOrStr: 4 });
  }
};
var InputSetting_default = InputSetting;

// src/settings/components/SelectSetting.svelte
var get_name_slot_changes3 = (dirty) => ({});
var get_name_slot_context3 = (ctx) => ({ slot: "name" });
var get_description_slot_changes3 = (dirty) => ({});
var get_description_slot_context3 = (ctx) => ({ slot: "description" });
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i][0];
  child_ctx[7] = list[i][1];
  return child_ctx;
}
function create_name_slot2(ctx) {
  let current;
  const name_slot_template = (
    /*#slots*/
    ctx[2].name
  );
  const name_slot = create_slot(
    name_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_name_slot_context3
  );
  return {
    c() {
      if (name_slot)
        name_slot.c();
    },
    m(target, anchor) {
      if (name_slot) {
        name_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (name_slot) {
        if (name_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            name_slot,
            name_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              name_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_name_slot_changes3
            ),
            get_name_slot_context3
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(name_slot, local);
      current = true;
    },
    o(local) {
      transition_out(name_slot, local);
      current = false;
    },
    d(detaching) {
      if (name_slot)
        name_slot.d(detaching);
    }
  };
}
function create_description_slot2(ctx) {
  let current;
  const description_slot_template = (
    /*#slots*/
    ctx[2].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    get_description_slot_context3
  );
  return {
    c() {
      if (description_slot)
        description_slot.c();
    },
    m(target, anchor) {
      if (description_slot) {
        description_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              get_description_slot_changes3
            ),
            get_description_slot_context3
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(description_slot, local);
      current = true;
    },
    o(local) {
      transition_out(description_slot, local);
      current = false;
    },
    d(detaching) {
      if (description_slot)
        description_slot.d(detaching);
    }
  };
}
function create_each_block(ctx) {
  let option;
  let t_value = (
    /*label*/
    ctx[7] + ""
  );
  let t;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*value*/
      ctx[6];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*options*/
      2 && t_value !== (t_value = /*label*/
      ctx2[7] + ""))
        set_data(t, t_value);
      if (dirty & /*options*/
      2 && option_value_value !== (option_value_value = /*value*/
      ctx2[6])) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_setting_slot2(ctx) {
  let select;
  let select_value_value;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*options*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[3](
        /*update*/
        ctx[5],
        ...args
      )
    );
  }
  return {
    c() {
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(select, "slot", "setting");
      attr(select, "class", "dropdown");
    },
    m(target, anchor) {
      insert(target, select, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      select_option(
        select,
        /*value*/
        ctx[6]
      );
      if (!mounted) {
        dispose = listen(select, "change", change_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*options*/
      2) {
        each_value = ensure_array_like(
          /*options*/
          ctx[1]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*value, options*/
      66 && select_value_value !== (select_value_value = /*value*/
      ctx[6])) {
        select_option(
          select,
          /*value*/
          ctx[6]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment5(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      key: (
        /*key*/
        ctx[0]
      ),
      $$slots: {
        setting: [
          create_setting_slot2,
          ({ update: update2, value }) => ({ 5: update2, 6: value }),
          ({ update: update2, value }) => (update2 ? 32 : 0) | (value ? 64 : 0)
        ],
        description: [create_description_slot2],
        name: [create_name_slot2]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem_changes = {};
      if (dirty & /*key*/
      1)
        settingitem_changes.key = /*key*/
        ctx2[0];
      if (dirty & /*$$scope, value, update, options*/
      114) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let options;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { key } = $$props;
  const change_handler = (update2, e) => update2(e.currentTarget.value);
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*key*/
    1) {
      $:
        $$invalidate(1, options = Object.entries(SELECT_OPTIONS_MAP[key]));
    }
  };
  return [key, options, slots, change_handler, $$scope];
}
var SelectSetting = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, { key: 0 });
  }
};
var SelectSetting_default = SelectSetting;

// src/settings/components/SettingHeader.svelte
function create_fragment6(ctx) {
  let div;
  let p0;
  let t0;
  let t1;
  let p1;
  let t2;
  return {
    c() {
      div = element("div");
      p0 = element("p");
      t0 = text(
        /*title*/
        ctx[0]
      );
      t1 = space();
      p1 = element("p");
      t2 = text(
        /*description*/
        ctx[1]
      );
      attr(p0, "class", "title svelte-fq1vnp");
      toggle_class(
        p0,
        "big",
        /*big*/
        ctx[2]
      );
      attr(p1, "class", "description svelte-fq1vnp");
      attr(div, "class", "setting-item setting-item-heading svelte-fq1vnp");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, p0);
      append(p0, t0);
      append(div, t1);
      append(div, p1);
      append(p1, t2);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*title*/
      1)
        set_data(
          t0,
          /*title*/
          ctx2[0]
        );
      if (dirty & /*big*/
      4) {
        toggle_class(
          p0,
          "big",
          /*big*/
          ctx2[2]
        );
      }
      if (dirty & /*description*/
      2)
        set_data(
          t2,
          /*description*/
          ctx2[1]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let { title } = $$props;
  let { description } = $$props;
  let { big = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2)
      $$invalidate(0, title = $$props2.title);
    if ("description" in $$props2)
      $$invalidate(1, description = $$props2.description);
    if ("big" in $$props2)
      $$invalidate(2, big = $$props2.big);
  };
  return [title, description, big];
}
var SettingHeader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { title: 0, description: 1, big: 2 });
  }
};
var SettingHeader_default = SettingHeader;

// src/settings/components/ObsidianToggle.svelte
function create_fragment7(ctx) {
  let div;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      input = element("input");
      attr(input, "type", "checkbox");
      input.value = /*checked*/
      ctx[0];
      attr(
        input,
        "id",
        /*id*/
        ctx[2]
      );
      attr(input, "tabindex", "0");
      attr(div, "class", "checkbox-container");
      toggle_class(
        div,
        "is-enabled",
        /*checked*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      if (!mounted) {
        dispose = listen(div, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[1]
          ))
            ctx[1].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*checked*/
      1) {
        input.value = /*checked*/
        ctx[0];
      }
      if (dirty & /*id*/
      4) {
        attr(
          input,
          "id",
          /*id*/
          ctx[2]
        );
      }
      if (dirty & /*checked*/
      1) {
        toggle_class(
          div,
          "is-enabled",
          /*checked*/
          ctx[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let { checked } = $$props;
  let { onClick } = $$props;
  let { id = void 0 } = $$props;
  $$self.$$set = ($$props2) => {
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
    if ("onClick" in $$props2)
      $$invalidate(1, onClick = $$props2.onClick);
    if ("id" in $$props2)
      $$invalidate(2, id = $$props2.id);
  };
  return [checked, onClick, id];
}
var ObsidianToggle = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, { checked: 0, onClick: 1, id: 2 });
  }
};
var ObsidianToggle_default = ObsidianToggle;

// src/settings/components/ToggleSetting.svelte
var get_name_slot_changes4 = (dirty) => ({});
var get_name_slot_context4 = (ctx) => ({ slot: "name" });
var get_description_slot_changes4 = (dirty) => ({});
var get_description_slot_context4 = (ctx) => ({ slot: "description" });
function create_name_slot3(ctx) {
  let current;
  const name_slot_template = (
    /*#slots*/
    ctx[1].name
  );
  const name_slot = create_slot(
    name_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_name_slot_context4
  );
  return {
    c() {
      if (name_slot)
        name_slot.c();
    },
    m(target, anchor) {
      if (name_slot) {
        name_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (name_slot) {
        if (name_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            name_slot,
            name_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              name_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_name_slot_changes4
            ),
            get_name_slot_context4
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(name_slot, local);
      current = true;
    },
    o(local) {
      transition_out(name_slot, local);
      current = false;
    },
    d(detaching) {
      if (name_slot)
        name_slot.d(detaching);
    }
  };
}
function create_description_slot3(ctx) {
  let current;
  const description_slot_template = (
    /*#slots*/
    ctx[1].description
  );
  const description_slot = create_slot(
    description_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_description_slot_context4
  );
  return {
    c() {
      if (description_slot)
        description_slot.c();
    },
    m(target, anchor) {
      if (description_slot) {
        description_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (description_slot) {
        if (description_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            description_slot,
            description_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              description_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_description_slot_changes4
            ),
            get_description_slot_context4
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(description_slot, local);
      current = true;
    },
    o(local) {
      transition_out(description_slot, local);
      current = false;
    },
    d(detaching) {
      if (description_slot)
        description_slot.d(detaching);
    }
  };
}
function create_setting_slot3(ctx) {
  let obsidiantoggle;
  let current;
  function func() {
    return (
      /*func*/
      ctx[2](
        /*update*/
        ctx[4],
        /*checked*/
        ctx[5]
      )
    );
  }
  obsidiantoggle = new ObsidianToggle_default({
    props: {
      slot: "setting",
      checked: !!/*checked*/
      ctx[5],
      onClick: func
    }
  });
  return {
    c() {
      create_component(obsidiantoggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(obsidiantoggle, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const obsidiantoggle_changes = {};
      if (dirty & /*checked*/
      32)
        obsidiantoggle_changes.checked = !!/*checked*/
        ctx[5];
      if (dirty & /*update, checked*/
      48)
        obsidiantoggle_changes.onClick = func;
      obsidiantoggle.$set(obsidiantoggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(obsidiantoggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(obsidiantoggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(obsidiantoggle, detaching);
    }
  };
}
function create_fragment8(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      key: (
        /*key*/
        ctx[0]
      ),
      $$slots: {
        setting: [
          create_setting_slot3,
          ({ update: update2, value: checked }) => ({ 4: update2, 5: checked }),
          ({ update: update2, value: checked }) => (update2 ? 16 : 0) | (checked ? 32 : 0)
        ],
        description: [create_description_slot3],
        name: [create_name_slot3]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem_changes = {};
      if (dirty & /*key*/
      1)
        settingitem_changes.key = /*key*/
        ctx2[0];
      if (dirty & /*$$scope, checked, update*/
      56) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { key } = $$props;
  const func = (update2, checked) => update2(!checked);
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [key, slots, func, $$scope];
}
var ToggleSetting = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, { key: 0 });
  }
};
var ToggleSetting_default = ToggleSetting;

// src/settings/Settings.svelte
function create_name_slot_24(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Banner style";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_24(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Set a style for all of your banners";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_23(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Banner height";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_23(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({ props: { examples: true } });
  return {
    c() {
      span = element("span");
      t = text("Set how big the banner should be in pixels.\r\n        ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_22(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Mobile banner height";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_22(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({});
  return {
    c() {
      span = element("span");
      t = text("Set how big the banner should be on mobile devices.\r\n        ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_21(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Adjust width to readable line length";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_21(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Adjust the banner width to only be as wide as the <em>readable line length</em>, which is used by Obsidian&#39;s <b>Readable line length</b> setting. It is
        recommended to toggle this together with that setting.`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_20(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Banner drag modifier key";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_20(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Set a modifier key that must be used to drag a banner.
        <br/>
        For example, setting it to <b>\u21E7 Shift</b> means you must hold down
        <b>Shift</b> in order to move a banner by dragging it. This can help avoid
        accidental banner movements.`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_19(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Property field name";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_19(ctx) {
  let span;
  let t0;
  let em;
  let t2;
  let br;
  let t3;
  let code0;
  let t4;
  let t5;
  let code1;
  let t6;
  let t7;
  let code2;
  let t8;
  let t9;
  let t10;
  let code3;
  let t11;
  let t12;
  let t13;
  return {
    c() {
      span = element("span");
      t0 = text("Set a prefix field name to be used for banner data in the frontmatter/");
      em = element("em");
      em.textContent = "Properties";
      t2 = text("\r\n        view.\r\n        ");
      br = element("br");
      t3 = text("\r\n        For example, using ");
      code0 = element("code");
      t4 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t5 = text(" means that banner\r\n        data will be extracted from fields like ");
      code1 = element("code");
      t6 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t7 = text(",\r\n        ");
      code2 = element("code");
      t8 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t9 = text("_x");
      t10 = text(",\r\n        ");
      code3 = element("code");
      t11 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t12 = text("_icon");
      t13 = text(", etc.");
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, em);
      append(span, t2);
      append(span, br);
      append(span, t3);
      append(span, code0);
      append(code0, t4);
      append(span, t5);
      append(span, code1);
      append(code1, t6);
      append(span, t7);
      append(span, code2);
      append(code2, t8);
      append(code2, t9);
      append(span, t10);
      append(span, code3);
      append(code3, t11);
      append(code3, t12);
      append(span, t13);
    },
    p(ctx2, dirty) {
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t4,
          /*frontmatterField*/
          ctx2[2]
        );
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t6,
          /*frontmatterField*/
          ctx2[2]
        );
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t8,
          /*frontmatterField*/
          ctx2[2]
        );
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t11,
          /*frontmatterField*/
          ctx2[2]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_18(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Show in internal embed";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_18(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Display the banner in the internal file embed. This is the embed that
        appears when you write <code>![[file]]</code> in a file.
        <br/> <b>Note:</b> You might need to reload Obsidian after toggling this setting`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_17(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Internal embed banner height";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_17(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({});
  return {
    c() {
      span = element("span");
      t = text("Set how big the banner should be within an internal embed.\r\n            ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_16(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Enable drag in internal embed";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_16(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Allow banner dragging from within an internal embed";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_4(ctx) {
  let inputsetting;
  let t;
  let togglesetting;
  let current;
  inputsetting = new InputSetting_default({
    props: {
      key: "internalEmbedHeight",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_17],
        name: [create_name_slot_17]
      },
      $$scope: { ctx }
    }
  });
  togglesetting = new ToggleSetting_default({
    props: {
      key: "enableDragInInternalEmbed",
      $$slots: {
        description: [create_description_slot_16],
        name: [create_name_slot_16]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(inputsetting.$$.fragment);
      t = space();
      create_component(togglesetting.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputsetting, target, anchor);
      insert(target, t, anchor);
      mount_component(togglesetting, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputsetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting.$set(inputsetting_changes);
      const togglesetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting.$set(togglesetting_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputsetting.$$.fragment, local);
      transition_in(togglesetting.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputsetting.$$.fragment, local);
      transition_out(togglesetting.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      destroy_component(inputsetting, detaching);
      destroy_component(togglesetting, detaching);
    }
  };
}
function create_name_slot_15(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Show in preview popover";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_15(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Display the banner in the page preview popover. This is the preview that
        appears from the
        <em>Page Preview</em> core plugin.`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_14(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Preview popover banner height";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_14(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({});
  return {
    c() {
      span = element("span");
      t = text("Set how big the banner should be within the preview popover.\r\n            ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_13(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Enable drag in preview popover";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_13(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Allow banner dragging from within the preview popover. This may act\r\n            a bit finicky though.";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_3(ctx) {
  let inputsetting;
  let t;
  let togglesetting;
  let current;
  inputsetting = new InputSetting_default({
    props: {
      key: "popoverHeight",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_14],
        name: [create_name_slot_14]
      },
      $$scope: { ctx }
    }
  });
  togglesetting = new ToggleSetting_default({
    props: {
      key: "enableDragInPopover",
      $$slots: {
        description: [create_description_slot_13],
        name: [create_name_slot_13]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(inputsetting.$$.fragment);
      t = space();
      create_component(togglesetting.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputsetting, target, anchor);
      insert(target, t, anchor);
      mount_component(togglesetting, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputsetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting.$set(inputsetting_changes);
      const togglesetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting.$set(togglesetting_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputsetting.$$.fragment, local);
      transition_in(togglesetting.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputsetting.$$.fragment, local);
      transition_out(togglesetting.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      destroy_component(inputsetting, detaching);
      destroy_component(togglesetting, detaching);
    }
  };
}
function create_name_slot_12(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Header font size";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_12(ctx) {
  let span;
  let t0;
  let csslengthfragment;
  let t1;
  let em;
  let current;
  csslengthfragment = new CSSLengthFragment_default({ props: { period: true } });
  return {
    c() {
      span = element("span");
      t0 = text("Set the font size of the banner header.\r\n        ");
      create_component(csslengthfragment.$$.fragment);
      t1 = text("\r\n        If left blank, it will use Obsidian's built-in font size for inline titles.\r\n        ");
      em = element("em");
      em.innerHTML = `Though personally, I like setting it to <code>2.5em</code>`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      mount_component(csslengthfragment, span, null);
      append(span, t1);
      append(span, em);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_11(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Header decoration";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_11(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Add a shadow or border on the header elements to help with readability.";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_10(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Horizontal alignment";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_10(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Align the header horizontally.";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_9(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Custom horizontal alignment";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_9(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({});
  return {
    c() {
      span = element("span");
      t = text("Set an offset relative to the left side of the note.\r\n            ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_default_slot_2(ctx) {
  let inputsetting;
  let current;
  inputsetting = new InputSetting_default({
    props: {
      key: "headerHorizontalTransform",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_9],
        name: [create_name_slot_9]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(inputsetting.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputsetting, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputsetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting.$set(inputsetting_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputsetting.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputsetting.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputsetting, detaching);
    }
  };
}
function create_name_slot_8(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Vertical alignment";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_8(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Align the header vertically relative to a banner, if any. If there's no\r\n        banner, this setting has no effect.";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_7(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Custom vertical alignment";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_7(ctx) {
  let span;
  let t;
  let csslengthfragment;
  let current;
  csslengthfragment = new CSSLengthFragment_default({});
  return {
    c() {
      span = element("span");
      t = text("Set an offset relative to the bottom edge of the banner, if any.\r\n            ");
      create_component(csslengthfragment.$$.fragment);
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
      mount_component(csslengthfragment, span, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_default_slot_1(ctx) {
  let inputsetting;
  let current;
  inputsetting = new InputSetting_default({
    props: {
      key: "headerVerticalTransform",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_7],
        name: [create_name_slot_7]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(inputsetting.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputsetting, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputsetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting.$set(inputsetting_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputsetting.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputsetting.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputsetting, detaching);
    }
  };
}
function create_name_slot_6(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Display header by default";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_6(ctx) {
  let span;
  let t0;
  let code0;
  let t1;
  let t2;
  let t3;
  let br;
  let t4;
  let code1;
  let t5;
  let t6;
  let t7;
  return {
    c() {
      span = element("span");
      t0 = text("Display a banner header without having to define a ");
      code0 = element("code");
      t1 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t2 = text("_header");
      t3 = text("\r\n        property. This will essentially make it behave like Obsidian's native inline\r\n        title feature.\r\n        ");
      br = element("br");
      t4 = text("\r\n        You can override this setting at an individual note level by having an empty\r\n        ");
      code1 = element("code");
      t5 = text(
        /*frontmatterField*/
        ctx[2]
      );
      t6 = text("_header");
      t7 = text(" property too.");
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, code0);
      append(code0, t1);
      append(code0, t2);
      append(span, t3);
      append(span, br);
      append(span, t4);
      append(span, code1);
      append(code1, t5);
      append(code1, t6);
      append(span, t7);
    },
    p(ctx2, dirty) {
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t1,
          /*frontmatterField*/
          ctx2[2]
        );
      if (dirty & /*frontmatterField*/
      4)
        set_data(
          t5,
          /*frontmatterField*/
          ctx2[2]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_5(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Default header value";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_5(ctx) {
  let span;
  let t0;
  let br;
  let t1;
  let code0;
  let t3;
  let code1;
  let t5;
  let code2;
  return {
    c() {
      span = element("span");
      t0 = text("The default header text when the setting above is in effect for a\r\n            given note.\r\n            ");
      br = element("br");
      t1 = text("\r\n            Any text is allowed, but you can also combine it with\r\n            ");
      code0 = element("code");
      code0.textContent = `${"{{property}}"}`;
      t3 = text("\r\n            to reference a property in your note, as well as\r\n            ");
      code1 = element("code");
      code1.textContent = `${"{{filename}}"}`;
      t5 = text("\r\n            to use the file's name. You can also set fallback keys with the\r\n            ");
      code2 = element("code");
      code2.textContent = `${"{{property1, property2, property3}}"} syntax.`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, br);
      append(span, t1);
      append(span, code0);
      append(span, t3);
      append(span, code1);
      append(span, t5);
      append(span, code2);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot(ctx) {
  let inputsetting;
  let current;
  inputsetting = new InputSetting_default({
    props: {
      key: "defaultHeaderValue",
      $$slots: {
        description: [create_description_slot_5],
        name: [create_name_slot_5]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(inputsetting.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputsetting, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputsetting_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting.$set(inputsetting_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputsetting.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputsetting.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputsetting, detaching);
    }
  };
}
function create_name_slot_4(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Icon size";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_4(ctx) {
  let span1;
  let t0;
  let csslengthfragment;
  let t1;
  let br;
  let t2;
  let span0;
  let current;
  csslengthfragment = new CSSLengthFragment_default({ props: { period: true } });
  return {
    c() {
      span1 = element("span");
      t0 = text("Set the size of the banner icon.\r\n        ");
      create_component(csslengthfragment.$$.fragment);
      t1 = space();
      br = element("br");
      t2 = space();
      span0 = element("span");
      span0.innerHTML = `<em>Note:</em> this setting stacks with the <b>Header font size</b>
            setting above`;
      attr(span1, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, t0);
      mount_component(csslengthfragment, span1, null);
      append(span1, t1);
      append(span1, br);
      append(span1, t2);
      append(span1, span0);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(csslengthfragment.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(csslengthfragment.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      destroy_component(csslengthfragment);
    }
  };
}
function create_name_slot_3(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Use Twemoji";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_3(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Use <a href="https://github.com/jdecked/twemoji" rel="noopener noreferrer">Twemoji</a>
        instead of your device&#39;s native emoji set. Makes emojis consistent across
        devices`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_2(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Show preview images";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_2(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Display a preview image of the suggested banner images";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot_1(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Suggestions limit";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot_1(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `Limit how many suggestions to display in this modal.
        <br/> <em>Note:</em> setting a high number while <b>Show preview images</b> setting
        is toggled on may cause slowdowns`;
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_name_slot4(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Banners folder";
      attr(span, "slot", "name");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_description_slot4(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Select a folder to exclusively search for banner files in. If empty, it\r\n        will search the entire vault for image files";
      attr(span, "slot", "description");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment9(ctx) {
  let header0;
  let t0;
  let selectsetting0;
  let t1;
  let inputsetting0;
  let t2;
  let inputsetting1;
  let t3;
  let togglesetting0;
  let t4;
  let selectsetting1;
  let t5;
  let inputsetting2;
  let t6;
  let togglesetting1;
  let t7;
  let depends0;
  let t8;
  let togglesetting2;
  let t9;
  let depends1;
  let t10;
  let header1;
  let t11;
  let inputsetting3;
  let t12;
  let selectsetting2;
  let t13;
  let selectsetting3;
  let t14;
  let depends2;
  let t15;
  let selectsetting4;
  let t16;
  let depends3;
  let t17;
  let togglesetting3;
  let t18;
  let depends4;
  let t19;
  let header2;
  let t20;
  let inputsetting4;
  let t21;
  let togglesetting4;
  let t22;
  let header3;
  let t23;
  let togglesetting5;
  let t24;
  let inputsetting5;
  let t25;
  let inputsetting6;
  let current;
  header0 = new SettingHeader_default({
    props: {
      title: "Banners",
      description: "A nice, lil' thing to add some flair to your notes :)",
      big: true
    }
  });
  selectsetting0 = new SelectSetting_default({
    props: {
      key: "style",
      $$slots: {
        description: [create_description_slot_24],
        name: [create_name_slot_24]
      },
      $$scope: { ctx }
    }
  });
  inputsetting0 = new InputSetting_default({
    props: {
      key: "height",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_23],
        name: [create_name_slot_23]
      },
      $$scope: { ctx }
    }
  });
  inputsetting1 = new InputSetting_default({
    props: {
      key: "mobileHeight",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_22],
        name: [create_name_slot_22]
      },
      $$scope: { ctx }
    }
  });
  togglesetting0 = new ToggleSetting_default({
    props: {
      key: "adjustWidthToReadableLineWidth",
      $$slots: {
        description: [create_description_slot_21],
        name: [create_name_slot_21]
      },
      $$scope: { ctx }
    }
  });
  selectsetting1 = new SelectSetting_default({
    props: {
      key: "bannerDragModifier",
      $$slots: {
        description: [create_description_slot_20],
        name: [create_name_slot_20]
      },
      $$scope: { ctx }
    }
  });
  inputsetting2 = new InputSetting_default({
    props: {
      key: "frontmatterField",
      $$slots: {
        description: [create_description_slot_19],
        name: [create_name_slot_19]
      },
      $$scope: { ctx }
    }
  });
  togglesetting1 = new ToggleSetting_default({
    props: {
      key: "showInInternalEmbed",
      $$slots: {
        description: [create_description_slot_18],
        name: [create_name_slot_18]
      },
      $$scope: { ctx }
    }
  });
  depends0 = new Depends_default({
    props: {
      on: "showInInternalEmbed",
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  togglesetting2 = new ToggleSetting_default({
    props: {
      key: "showInPopover",
      $$slots: {
        description: [create_description_slot_15],
        name: [create_name_slot_15]
      },
      $$scope: { ctx }
    }
  });
  depends1 = new Depends_default({
    props: {
      on: "showInPopover",
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  header1 = new SettingHeader_default({
    props: {
      title: "Banner Headers",
      description: "Kinda like inline titles, but with a bit of pizazz"
    }
  });
  inputsetting3 = new InputSetting_default({
    props: {
      key: "headerSize",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_12],
        name: [create_name_slot_12]
      },
      $$scope: { ctx }
    }
  });
  selectsetting2 = new SelectSetting_default({
    props: {
      key: "headerDecor",
      $$slots: {
        description: [create_description_slot_11],
        name: [create_name_slot_11]
      },
      $$scope: { ctx }
    }
  });
  selectsetting3 = new SelectSetting_default({
    props: {
      key: "headerHorizontalAlignment",
      $$slots: {
        description: [create_description_slot_10],
        name: [create_name_slot_10]
      },
      $$scope: { ctx }
    }
  });
  depends2 = new Depends_default({
    props: {
      on: (
        /*headerHorizontalAlignment*/
        ctx[1] === "custom"
      ),
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  selectsetting4 = new SelectSetting_default({
    props: {
      key: "headerVerticalAlignment",
      $$slots: {
        description: [create_description_slot_8],
        name: [create_name_slot_8]
      },
      $$scope: { ctx }
    }
  });
  depends3 = new Depends_default({
    props: {
      on: (
        /*headerVerticalAlignment*/
        ctx[0] === "custom"
      ),
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  togglesetting3 = new ToggleSetting_default({
    props: {
      key: "useHeaderByDefault",
      $$slots: {
        description: [create_description_slot_6],
        name: [create_name_slot_6]
      },
      $$scope: { ctx }
    }
  });
  depends4 = new Depends_default({
    props: {
      on: "useHeaderByDefault",
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  header2 = new SettingHeader_default({
    props: {
      title: "Banner Icons",
      description: "Give a lil' notion of what your note is about"
    }
  });
  inputsetting4 = new InputSetting_default({
    props: {
      key: "iconSize",
      numOrStr: true,
      $$slots: {
        description: [create_description_slot_4],
        name: [create_name_slot_4]
      },
      $$scope: { ctx }
    }
  });
  togglesetting4 = new ToggleSetting_default({
    props: {
      key: "useTwemoji",
      $$slots: {
        description: [create_description_slot_3],
        name: [create_name_slot_3]
      },
      $$scope: { ctx }
    }
  });
  header3 = new SettingHeader_default({
    props: {
      title: "Local Image Modal",
      description: 'For the modal that shows when you run the "Add/Change banner with local image" command'
    }
  });
  togglesetting5 = new ToggleSetting_default({
    props: {
      key: "showPreviewInLocalModal",
      $$slots: {
        description: [create_description_slot_2],
        name: [create_name_slot_2]
      },
      $$scope: { ctx }
    }
  });
  inputsetting5 = new InputSetting_default({
    props: {
      key: "localModalSuggestionLimit",
      type: "number",
      $$slots: {
        description: [create_description_slot_1],
        name: [create_name_slot_1]
      },
      $$scope: { ctx }
    }
  });
  inputsetting6 = new InputSetting_default({
    props: {
      key: "bannersFolder",
      $$slots: {
        description: [create_description_slot4],
        name: [create_name_slot4]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(header0.$$.fragment);
      t0 = space();
      create_component(selectsetting0.$$.fragment);
      t1 = space();
      create_component(inputsetting0.$$.fragment);
      t2 = space();
      create_component(inputsetting1.$$.fragment);
      t3 = space();
      create_component(togglesetting0.$$.fragment);
      t4 = space();
      create_component(selectsetting1.$$.fragment);
      t5 = space();
      create_component(inputsetting2.$$.fragment);
      t6 = space();
      create_component(togglesetting1.$$.fragment);
      t7 = space();
      create_component(depends0.$$.fragment);
      t8 = space();
      create_component(togglesetting2.$$.fragment);
      t9 = space();
      create_component(depends1.$$.fragment);
      t10 = space();
      create_component(header1.$$.fragment);
      t11 = space();
      create_component(inputsetting3.$$.fragment);
      t12 = space();
      create_component(selectsetting2.$$.fragment);
      t13 = space();
      create_component(selectsetting3.$$.fragment);
      t14 = space();
      create_component(depends2.$$.fragment);
      t15 = space();
      create_component(selectsetting4.$$.fragment);
      t16 = space();
      create_component(depends3.$$.fragment);
      t17 = space();
      create_component(togglesetting3.$$.fragment);
      t18 = space();
      create_component(depends4.$$.fragment);
      t19 = space();
      create_component(header2.$$.fragment);
      t20 = space();
      create_component(inputsetting4.$$.fragment);
      t21 = space();
      create_component(togglesetting4.$$.fragment);
      t22 = space();
      create_component(header3.$$.fragment);
      t23 = space();
      create_component(togglesetting5.$$.fragment);
      t24 = space();
      create_component(inputsetting5.$$.fragment);
      t25 = space();
      create_component(inputsetting6.$$.fragment);
    },
    m(target, anchor) {
      mount_component(header0, target, anchor);
      insert(target, t0, anchor);
      mount_component(selectsetting0, target, anchor);
      insert(target, t1, anchor);
      mount_component(inputsetting0, target, anchor);
      insert(target, t2, anchor);
      mount_component(inputsetting1, target, anchor);
      insert(target, t3, anchor);
      mount_component(togglesetting0, target, anchor);
      insert(target, t4, anchor);
      mount_component(selectsetting1, target, anchor);
      insert(target, t5, anchor);
      mount_component(inputsetting2, target, anchor);
      insert(target, t6, anchor);
      mount_component(togglesetting1, target, anchor);
      insert(target, t7, anchor);
      mount_component(depends0, target, anchor);
      insert(target, t8, anchor);
      mount_component(togglesetting2, target, anchor);
      insert(target, t9, anchor);
      mount_component(depends1, target, anchor);
      insert(target, t10, anchor);
      mount_component(header1, target, anchor);
      insert(target, t11, anchor);
      mount_component(inputsetting3, target, anchor);
      insert(target, t12, anchor);
      mount_component(selectsetting2, target, anchor);
      insert(target, t13, anchor);
      mount_component(selectsetting3, target, anchor);
      insert(target, t14, anchor);
      mount_component(depends2, target, anchor);
      insert(target, t15, anchor);
      mount_component(selectsetting4, target, anchor);
      insert(target, t16, anchor);
      mount_component(depends3, target, anchor);
      insert(target, t17, anchor);
      mount_component(togglesetting3, target, anchor);
      insert(target, t18, anchor);
      mount_component(depends4, target, anchor);
      insert(target, t19, anchor);
      mount_component(header2, target, anchor);
      insert(target, t20, anchor);
      mount_component(inputsetting4, target, anchor);
      insert(target, t21, anchor);
      mount_component(togglesetting4, target, anchor);
      insert(target, t22, anchor);
      mount_component(header3, target, anchor);
      insert(target, t23, anchor);
      mount_component(togglesetting5, target, anchor);
      insert(target, t24, anchor);
      mount_component(inputsetting5, target, anchor);
      insert(target, t25, anchor);
      mount_component(inputsetting6, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const selectsetting0_changes = {};
      if (dirty & /*$$scope*/
      16) {
        selectsetting0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      selectsetting0.$set(selectsetting0_changes);
      const inputsetting0_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting0.$set(inputsetting0_changes);
      const inputsetting1_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting1.$set(inputsetting1_changes);
      const togglesetting0_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting0.$set(togglesetting0_changes);
      const selectsetting1_changes = {};
      if (dirty & /*$$scope*/
      16) {
        selectsetting1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      selectsetting1.$set(selectsetting1_changes);
      const inputsetting2_changes = {};
      if (dirty & /*$$scope, frontmatterField*/
      20) {
        inputsetting2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting2.$set(inputsetting2_changes);
      const togglesetting1_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting1.$set(togglesetting1_changes);
      const depends0_changes = {};
      if (dirty & /*$$scope*/
      16) {
        depends0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      depends0.$set(depends0_changes);
      const togglesetting2_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting2.$set(togglesetting2_changes);
      const depends1_changes = {};
      if (dirty & /*$$scope*/
      16) {
        depends1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      depends1.$set(depends1_changes);
      const inputsetting3_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting3.$set(inputsetting3_changes);
      const selectsetting2_changes = {};
      if (dirty & /*$$scope*/
      16) {
        selectsetting2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      selectsetting2.$set(selectsetting2_changes);
      const selectsetting3_changes = {};
      if (dirty & /*$$scope*/
      16) {
        selectsetting3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      selectsetting3.$set(selectsetting3_changes);
      const depends2_changes = {};
      if (dirty & /*headerHorizontalAlignment*/
      2)
        depends2_changes.on = /*headerHorizontalAlignment*/
        ctx2[1] === "custom";
      if (dirty & /*$$scope*/
      16) {
        depends2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      depends2.$set(depends2_changes);
      const selectsetting4_changes = {};
      if (dirty & /*$$scope*/
      16) {
        selectsetting4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      selectsetting4.$set(selectsetting4_changes);
      const depends3_changes = {};
      if (dirty & /*headerVerticalAlignment*/
      1)
        depends3_changes.on = /*headerVerticalAlignment*/
        ctx2[0] === "custom";
      if (dirty & /*$$scope*/
      16) {
        depends3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      depends3.$set(depends3_changes);
      const togglesetting3_changes = {};
      if (dirty & /*$$scope, frontmatterField*/
      20) {
        togglesetting3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting3.$set(togglesetting3_changes);
      const depends4_changes = {};
      if (dirty & /*$$scope*/
      16) {
        depends4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      depends4.$set(depends4_changes);
      const inputsetting4_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting4.$set(inputsetting4_changes);
      const togglesetting4_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting4.$set(togglesetting4_changes);
      const togglesetting5_changes = {};
      if (dirty & /*$$scope*/
      16) {
        togglesetting5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      togglesetting5.$set(togglesetting5_changes);
      const inputsetting5_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting5.$set(inputsetting5_changes);
      const inputsetting6_changes = {};
      if (dirty & /*$$scope*/
      16) {
        inputsetting6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      inputsetting6.$set(inputsetting6_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(header0.$$.fragment, local);
      transition_in(selectsetting0.$$.fragment, local);
      transition_in(inputsetting0.$$.fragment, local);
      transition_in(inputsetting1.$$.fragment, local);
      transition_in(togglesetting0.$$.fragment, local);
      transition_in(selectsetting1.$$.fragment, local);
      transition_in(inputsetting2.$$.fragment, local);
      transition_in(togglesetting1.$$.fragment, local);
      transition_in(depends0.$$.fragment, local);
      transition_in(togglesetting2.$$.fragment, local);
      transition_in(depends1.$$.fragment, local);
      transition_in(header1.$$.fragment, local);
      transition_in(inputsetting3.$$.fragment, local);
      transition_in(selectsetting2.$$.fragment, local);
      transition_in(selectsetting3.$$.fragment, local);
      transition_in(depends2.$$.fragment, local);
      transition_in(selectsetting4.$$.fragment, local);
      transition_in(depends3.$$.fragment, local);
      transition_in(togglesetting3.$$.fragment, local);
      transition_in(depends4.$$.fragment, local);
      transition_in(header2.$$.fragment, local);
      transition_in(inputsetting4.$$.fragment, local);
      transition_in(togglesetting4.$$.fragment, local);
      transition_in(header3.$$.fragment, local);
      transition_in(togglesetting5.$$.fragment, local);
      transition_in(inputsetting5.$$.fragment, local);
      transition_in(inputsetting6.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(header0.$$.fragment, local);
      transition_out(selectsetting0.$$.fragment, local);
      transition_out(inputsetting0.$$.fragment, local);
      transition_out(inputsetting1.$$.fragment, local);
      transition_out(togglesetting0.$$.fragment, local);
      transition_out(selectsetting1.$$.fragment, local);
      transition_out(inputsetting2.$$.fragment, local);
      transition_out(togglesetting1.$$.fragment, local);
      transition_out(depends0.$$.fragment, local);
      transition_out(togglesetting2.$$.fragment, local);
      transition_out(depends1.$$.fragment, local);
      transition_out(header1.$$.fragment, local);
      transition_out(inputsetting3.$$.fragment, local);
      transition_out(selectsetting2.$$.fragment, local);
      transition_out(selectsetting3.$$.fragment, local);
      transition_out(depends2.$$.fragment, local);
      transition_out(selectsetting4.$$.fragment, local);
      transition_out(depends3.$$.fragment, local);
      transition_out(togglesetting3.$$.fragment, local);
      transition_out(depends4.$$.fragment, local);
      transition_out(header2.$$.fragment, local);
      transition_out(inputsetting4.$$.fragment, local);
      transition_out(togglesetting4.$$.fragment, local);
      transition_out(header3.$$.fragment, local);
      transition_out(togglesetting5.$$.fragment, local);
      transition_out(inputsetting5.$$.fragment, local);
      transition_out(inputsetting6.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
        detach(t12);
        detach(t13);
        detach(t14);
        detach(t15);
        detach(t16);
        detach(t17);
        detach(t18);
        detach(t19);
        detach(t20);
        detach(t21);
        detach(t22);
        detach(t23);
        detach(t24);
        detach(t25);
      }
      destroy_component(header0, detaching);
      destroy_component(selectsetting0, detaching);
      destroy_component(inputsetting0, detaching);
      destroy_component(inputsetting1, detaching);
      destroy_component(togglesetting0, detaching);
      destroy_component(selectsetting1, detaching);
      destroy_component(inputsetting2, detaching);
      destroy_component(togglesetting1, detaching);
      destroy_component(depends0, detaching);
      destroy_component(togglesetting2, detaching);
      destroy_component(depends1, detaching);
      destroy_component(header1, detaching);
      destroy_component(inputsetting3, detaching);
      destroy_component(selectsetting2, detaching);
      destroy_component(selectsetting3, detaching);
      destroy_component(depends2, detaching);
      destroy_component(selectsetting4, detaching);
      destroy_component(depends3, detaching);
      destroy_component(togglesetting3, detaching);
      destroy_component(depends4, detaching);
      destroy_component(header2, detaching);
      destroy_component(inputsetting4, detaching);
      destroy_component(togglesetting4, detaching);
      destroy_component(header3, detaching);
      destroy_component(togglesetting5, detaching);
      destroy_component(inputsetting5, detaching);
      destroy_component(inputsetting6, detaching);
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  let frontmatterField;
  let headerHorizontalAlignment;
  let headerVerticalAlignment;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(3, $settings = $$value));
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    8) {
      $:
        $$invalidate(2, { frontmatterField, headerHorizontalAlignment, headerVerticalAlignment } = $settings, frontmatterField, ($$invalidate(1, headerHorizontalAlignment), $$invalidate(3, $settings)), ($$invalidate(0, headerVerticalAlignment), $$invalidate(3, $settings)));
    }
  };
  return [
    headerVerticalAlignment,
    headerHorizontalAlignment,
    frontmatterField,
    $settings
  ];
}
var Settings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, {});
  }
};
var Settings_default = Settings;

// src/settings/SettingsTab.ts
var SettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor() {
    super(plug.app, plug);
    __publicField(this, "component");
  }
  display() {
    this.component = this.component || new Settings_default({ target: this.containerEl });
  }
  hide() {
    this.component?.$destroy();
    this.component = void 0;
  }
};

// src/settings/updater.ts
var import_obsidian3 = require("obsidian");
var SEMVER_REGEX = /^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)/;
var breakingChanges = [
  {
    version: "2.0.0",
    changes: {
      keys: {
        iconHorizontalAlignment: "headerHorizontalAlignment",
        iconHorizontalTransform: "headerHorizontalTransform",
        iconVerticalAlignment: "headerVerticalAlignment",
        iconVerticalTransform: "headerVerticalTransform",
        showInPreviewEmbed: "showInPopover",
        previewEmbedHeight: "popoverHeight",
        localSuggestionsLimit: "localModalSuggestionLimit"
      },
      values: {
        bannerDragModifier: {
          none: "None",
          shift: "Shift",
          ctrl: "Ctrl",
          alt: "Alt",
          meta: "Meta"
        },
        headerVerticalAlignment: { center: "edge" }
      },
      remove: ["allowMobileDrag"],
      callbacks: [
        () => new import_obsidian3.Notice(
          createFragment((el) => {
            el.createEl("b", {
              text: "Hey! Looks like you've used Banners in the past. "
            });
            el.createEl("br");
            el.createSpan({
              text: "Banners created in 1.x use an outdated syntax for internal files that no longer work in 2.0. To update this throughout your vault, go to the bottom of the Banners settings tab"
            });
          }),
          0
        )
      ]
    }
  }
];
var isVersionBelow = (a, b) => {
  if (!a)
    return true;
  const {
    major: aMajor,
    minor: aMinor,
    patch: aPatch
  } = a.match(SEMVER_REGEX).groups;
  const {
    major: bMajor,
    minor: bMinor,
    patch: bPatch
  } = b.match(SEMVER_REGEX).groups;
  return +aMajor < +bMajor || +aMinor < +bMinor || +aPatch < +bPatch;
};
var updateKeys = (data, keys) => {
  for (const [oldKey, newKey] of Object.entries(keys)) {
    if (data[oldKey]) {
      data[newKey] = data[oldKey];
      delete data[oldKey];
    }
  }
};
var updateValue = (data, keys) => {
  for (const [key, values] of Object.entries(keys)) {
    const oldValue = data[key];
    if (oldValue !== void 0 && Object.hasOwn(values, oldValue)) {
      data[key] = values[oldValue];
    }
  }
};
var removeSetting = (data, keys) => {
  for (const key of keys) {
    delete data[key];
  }
};
var updateSettings = (data) => {
  let madeChanges = false;
  for (const { version, changes } of breakingChanges) {
    if (isVersionBelow(data.version, version)) {
      madeChanges = true;
      if (changes.keys)
        updateKeys(data, changes.keys);
      if (changes.values)
        updateValue(data, changes.values);
      if (changes.remove)
        removeSetting(data, changes.remove);
      if (changes.callbacks)
        changes.callbacks.forEach((cb) => cb());
    }
  }
  for (const [key, val] of Object.entries(data)) {
    if (val === null) {
      madeChanges = true;
      delete data[key];
    }
  }
  if (madeChanges) {
    new import_obsidian3.Notice(
      `Updated Banner settings from ${data.version ?? "1.x"} to ${plug.manifest.version}`
    );
  }
};
var areSettingsOutdated = (data) => {
  if (!data)
    return false;
  return isVersionBelow(data.version, plug.manifest.version);
};

// src/settings/index.ts
var saveSettings = async (changed = {}) => {
  await plug.saveData(plug.settings);
  rawSettings.set(plug.settings);
  plug.events.trigger("setting-change", changed);
};
var loadSettings = async () => {
  const data = await plug.loadData();
  if (areSettingsOutdated(data))
    updateSettings(data);
  const settings2 = Object.assign({}, DEFAULT_SETTINGS, data, {
    version: plug.manifest.version
  });
  for (const [key, val] of Object.entries(settings2)) {
    if (DEFAULT_SETTINGS[key] === val && (typeof val === "number" || TEXT_SETTINGS.includes(key)))
      delete settings2[key];
  }
  plug.settings = settings2;
  await saveSettings();
  prepareCssSettingListener();
  plug.addSettingTab(new SettingsTab());
};
var parseCssSetting = (value) => typeof value === "number" ? `${value}px` : value;
var getSetting = (key) => {
  const value = plug.settings[key] ?? DEFAULT_SETTINGS[key];
  return LENGTH_SETTINGS.includes(key) ? parseCssSetting(value) : value;
};

// src/bannerData/transformers.ts
var EMOJI_REGEX = /[\p{Extended_Pictographic}\u{1F3FB}-\u{1F3FF}\u{1F9B0}-\u{1F9B3}]+/gu;
var HEADER_KEY_REGEX = /{{(.+?)}}/g;
var extractIconFromYaml = (value) => {
  if (!value)
    return void 0;
  const match = value.match(EMOJI_REGEX);
  return match?.length ? { type: "emoji", value: match.join("\u200D") } : { type: "text", value: value.replace("[[", "").replace("]]", "") };
};
var parseHeader = (value, file) => value.replace(HEADER_KEY_REGEX, (match, keys) => {
  let parsed;
  for (const key of keys.split(",")) {
    if (parsed)
      break;
    const trimmedKey = key.trim();
    if (trimmedKey === FILENAME_KEY) {
      parsed = file.basename;
    } else {
      const property = plug.app.metadataCache.getFileCache(file)?.frontmatter?.[trimmedKey];
      parsed = Array.isArray(property) ? property[0] : property;
    }
  }
  return parsed || match;
});
var extractHeaderFromYaml = (value, file) => {
  if (value === void 0) {
    return getSetting("useHeaderByDefault") ? parseHeader(getSetting("defaultHeaderValue"), file) : void 0;
  }
  if (value === null)
    return void 0;
  return parseHeader(value, file);
};

// src/bannerData/index.ts
var MIME_TYPES = {
  "image/apng": ["apng"],
  "image/avif": ["avif"],
  "image/gif": ["gif"],
  "image/jpeg": ["jpg", "jpeg", "jpe"],
  "image/png": ["png"],
  "image/webp": ["webp"],
  "image/ico": ["ico"]
};
var IMAGE_EXTENSIONS = Object.values(MIME_TYPES).flat();
var READ_MAP = {
  "": { key: "source" },
  x: { key: "x" },
  y: { key: "y" },
  icon: {
    key: "icon",
    transform: extractIconFromYaml
  },
  header: {
    key: "header",
    transform: extractHeaderFromYaml
  },
  lock: { key: "lock" }
};
var WRITE_MAP = {
  source: "",
  x: "x",
  y: "y",
  icon: "icon",
  header: "header",
  lock: "lock"
};
var YAML_REGEX = /^---\n(.*?)\n---/s;
var getYamlKey = (suffix) => {
  const prefix = getSetting("frontmatterField");
  return suffix ? `${prefix}_${suffix}` : prefix;
};
var extractBannerData = (frontmatter = {}, file) => {
  return Object.entries(READ_MAP).reduce((data, [suffix, item]) => {
    const { key, transform } = item;
    const yamlKey = getYamlKey(suffix);
    const rawValue = frontmatter[yamlKey];
    data[key] = transform ? transform(rawValue, file) : rawValue;
    return data;
  }, {});
};
var extractBannerDataFromFile = (file) => {
  const { frontmatter } = plug.app.metadataCache.getFileCache(file) ?? {};
  return extractBannerData(frontmatter, file);
};
var extractBannerDataFromState = (state) => {
  const { data, file } = state.field(import_obsidian4.editorInfoField);
  const match = data?.match(YAML_REGEX);
  const yaml = match ? match[1] : "";
  try {
    const frontmatter = (0, import_obsidian4.parseYaml)(yaml) ?? {};
    return extractBannerData(frontmatter, file);
  } catch (error) {
    return extractBannerData({}, file);
  }
};
var updateBannerData = async (file, bannerData) => {
  await plug.app.fileManager.processFrontMatter(file, async (frontmatter) => {
    for (const [dataKey, val] of Object.entries(bannerData)) {
      const suffix = WRITE_MAP[dataKey];
      const yamlKey = getYamlKey(suffix);
      frontmatter[yamlKey] = val;
    }
  });
};

// node_modules/node-emoji/lib/index.js
var import_emojilib = __toESM(require_emojilib(), 1);
var import_char_regex = __toESM(require_char_regex(), 1);
var import_is = __toESM(require_dist(), 1);
var import_skin_tone = __toESM(require_skin_tone(), 1);
var charRegexMatcher = (0, import_char_regex.default)();
var NON_SPACING_MARK = String.fromCharCode(65039);
var nonSpacingRegex = new RegExp(NON_SPACING_MARK, "g");
function normalizeCode(code) {
  return code.replace(nonSpacingRegex, "");
}
function normalizeName(name) {
  return /:.+:/.test(name) ? name.slice(1, -1) : name;
}
var emojiData = Object.entries(import_emojilib.default.lib).map(
  ([name, { char: emoji }]) => [name, emoji]
);
var emojiCodesByName = new Map(emojiData);
var emojiNamesByCode = new Map(
  emojiData.map(([name, emoji]) => [normalizeCode(emoji), name])
);
var search = (keyword) => {
  import_is.assert.any([import_is.default.default.string, import_is.default.default.regExp], keyword);
  if (import_is.default.default.string(keyword)) {
    keyword = normalizeName(keyword);
  }
  if (import_is.default.default.regExp(keyword)) {
    const normalizedPattern = normalizeName(keyword.source);
    keyword = new RegExp(normalizedPattern);
  }
  return emojiData.filter(([name]) => name.match(keyword)).map(([name, emoji]) => ({ emoji, name }));
};

// src/modals/IconModal.ts
var import_obsidian5 = require("obsidian");

// node_modules/@twemoji/api/dist/twemoji.esm.js
var twemoji = function() {
  "use strict";
  var twemoji2 = { base: "https://cdn.jsdelivr.net/gh/jdecked/twemoji@14.1.2/assets/", ext: ".png", size: "72x72", className: "emoji", convert: { fromCodePoint, toCodePoint }, onerror: function onerror() {
    if (this.parentNode) {
      this.parentNode.replaceChild(createText(this.alt, false), this);
    }
  }, parse, replace, test }, escaper = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "'": "&#39;", '"': "&quot;" }, re = /(?:\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c[\udffc-\udfff]|\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c[\udffb\udffd-\udfff]|\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c[\udffb-\udffd\udfff]|\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c[\udffb-\udffe]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d\udc8f\ud83c[\udffb-\udfff]|\ud83d\udc91\ud83c[\udffb-\udfff]|\ud83e\udd1d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d\udc8f\udc91]|\ud83e\udd1d)|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd4\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83d\ude36\u200d\ud83c\udf2b\ufe0f|\u2764\ufe0f\u200d\ud83d\udd25|\u2764\ufe0f\u200d\ud83e\ude79|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83d\ude2e\u200d\ud83d\udca8|\ud83d\ude35\u200d\ud83d\udcab|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd\udec3-\udec5\udef0-\udef6]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udc8e\udc90\udc92-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udedd-\udedf\udeeb\udeec\udef4-\udefc\udfe0-\udfeb\udff0]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78-\uddb4\uddb7\uddba\uddbc-\uddcc\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7c\ude80-\ude86\ude90-\udeac\udeb0-\udeba\udec0-\udec2\uded0-\uded9\udee0-\udee7]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g, UFE0Fg = /\uFE0F/g, U200D = String.fromCharCode(8205), rescaper = /[&<>'"]/g, shouldntBeParsed = /^(?:iframe|noframes|noscript|script|select|style|textarea)$/, fromCharCode = String.fromCharCode;
  return twemoji2;
  function createText(text2, clean) {
    return document.createTextNode(clean ? text2.replace(UFE0Fg, "") : text2);
  }
  function escapeHTML(s) {
    return s.replace(rescaper, replacer);
  }
  function defaultImageSrcGenerator(icon, options) {
    return "".concat(options.base, options.size, "/", icon, options.ext);
  }
  function grabAllTextNodes(node, allText) {
    var childNodes = node.childNodes, length = childNodes.length, subnode, nodeType;
    while (length--) {
      subnode = childNodes[length];
      nodeType = subnode.nodeType;
      if (nodeType === 3) {
        allText.push(subnode);
      } else if (nodeType === 1 && !("ownerSVGElement" in subnode) && !shouldntBeParsed.test(subnode.nodeName.toLowerCase())) {
        grabAllTextNodes(subnode, allText);
      }
    }
    return allText;
  }
  function grabTheRightIcon(rawText) {
    return toCodePoint(rawText.indexOf(U200D) < 0 ? rawText.replace(UFE0Fg, "") : rawText);
  }
  function parseNode(node, options) {
    var allText = grabAllTextNodes(node, []), length = allText.length, attrib, attrname, modified, fragment, subnode, text2, match, i, index, img, rawText, iconId, src;
    while (length--) {
      modified = false;
      fragment = document.createDocumentFragment();
      subnode = allText[length];
      text2 = subnode.nodeValue;
      i = 0;
      while (match = re.exec(text2)) {
        index = match.index;
        if (index !== i) {
          fragment.appendChild(createText(text2.slice(i, index), true));
        }
        rawText = match[0];
        iconId = grabTheRightIcon(rawText);
        i = index + rawText.length;
        src = options.callback(iconId, options);
        if (iconId && src) {
          img = new Image();
          img.onerror = options.onerror;
          img.setAttribute("draggable", "false");
          attrib = options.attributes(rawText, iconId);
          for (attrname in attrib) {
            if (attrib.hasOwnProperty(attrname) && attrname.indexOf("on") !== 0 && !img.hasAttribute(attrname)) {
              img.setAttribute(attrname, attrib[attrname]);
            }
          }
          img.className = options.className;
          img.alt = rawText;
          img.src = src;
          modified = true;
          fragment.appendChild(img);
        }
        if (!img)
          fragment.appendChild(createText(rawText, false));
        img = null;
      }
      if (modified) {
        if (i < text2.length) {
          fragment.appendChild(createText(text2.slice(i), true));
        }
        subnode.parentNode.replaceChild(fragment, subnode);
      }
    }
    return node;
  }
  function parseString(str, options) {
    return replace(str, function(rawText) {
      var ret = rawText, iconId = grabTheRightIcon(rawText), src = options.callback(iconId, options), attrib, attrname;
      if (iconId && src) {
        ret = "<img ".concat('class="', options.className, '" ', 'draggable="false" ', 'alt="', rawText, '"', ' src="', src, '"');
        attrib = options.attributes(rawText, iconId);
        for (attrname in attrib) {
          if (attrib.hasOwnProperty(attrname) && attrname.indexOf("on") !== 0 && ret.indexOf(" " + attrname + "=") === -1) {
            ret = ret.concat(" ", attrname, '="', escapeHTML(attrib[attrname]), '"');
          }
        }
        ret = ret.concat("/>");
      }
      return ret;
    });
  }
  function replacer(m) {
    return escaper[m];
  }
  function returnNull() {
    return null;
  }
  function toSizeSquaredAsset(value) {
    return typeof value === "number" ? value + "x" + value : value;
  }
  function fromCodePoint(codepoint) {
    var code = typeof codepoint === "string" ? parseInt(codepoint, 16) : codepoint;
    if (code < 65536) {
      return fromCharCode(code);
    }
    code -= 65536;
    return fromCharCode(55296 + (code >> 10), 56320 + (code & 1023));
  }
  function parse(what, how) {
    if (!how || typeof how === "function") {
      how = { callback: how };
    }
    return (typeof what === "string" ? parseString : parseNode)(what, { callback: how.callback || defaultImageSrcGenerator, attributes: typeof how.attributes === "function" ? how.attributes : returnNull, base: typeof how.base === "string" ? how.base : twemoji2.base, ext: how.ext || twemoji2.ext, size: how.folder || toSizeSquaredAsset(how.size || twemoji2.size), className: how.className || twemoji2.className, onerror: how.onerror || twemoji2.onerror });
  }
  function replace(text2, callback) {
    return String(text2).replace(re, callback);
  }
  function test(text2) {
    re.lastIndex = 0;
    var result = re.test(text2);
    re.lastIndex = 0;
    return result;
  }
  function toCodePoint(unicodeSurrogates, sep) {
    var r = [], c = 0, p = 0, i = 0;
    while (i < unicodeSurrogates.length) {
      c = unicodeSurrogates.charCodeAt(i++);
      if (p) {
        r.push((65536 + (p - 55296 << 10) + (c - 56320)).toString(16));
        p = 0;
      } else if (55296 <= c && c <= 56319) {
        p = c;
      } else {
        r.push(c.toString(16));
      }
    }
    return r.join(sep || "-");
  }
}();
var twemoji_esm_default = twemoji;

// src/modals/IconSuggestion.svelte
function create_fragment10(ctx) {
  let div_1;
  let t;
  return {
    c() {
      div_1 = element("div");
      t = text(
        /*text*/
        ctx[1]
      );
      attr(div_1, "class", "icon-suggestion svelte-8fl6x1");
    },
    m(target, anchor) {
      insert(target, div_1, anchor);
      append(div_1, t);
      ctx[3](div_1);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*text*/
      2)
        set_data(
          t,
          /*text*/
          ctx2[1]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div_1);
      }
      ctx[3](null);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  let text2;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(4, $settings = $$value));
  let { item } = $$props;
  let div;
  onMount(() => {
    if ($settings.useTwemoji)
      twemoji_esm_default.parse(div, { className: "banner-emoji" });
  });
  function div_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      div = $$value;
      $$invalidate(0, div);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("item" in $$props2)
      $$invalidate(2, item = $$props2.item);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*item*/
    4) {
      $:
        $$invalidate(1, text2 = `${item.emoji} ${item.name}`);
    }
  };
  return [div, text2, item, div_1_binding];
}
var IconSuggestion = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, { item: 2 });
  }
};
var IconSuggestion_default = IconSuggestion;

// src/modals/IconModal.ts
var IconModal = class extends import_obsidian5.SuggestModal {
  constructor(file) {
    super(plug.app);
    __publicField(this, "activeFile");
    this.activeFile = file;
    this.limit = 50;
    this.setPlaceholder("Pick an emoji to use as an icon");
  }
  getSuggestions(query) {
    return search(query);
  }
  renderSuggestion(item, el) {
    new IconSuggestion_default({
      target: el,
      props: { item }
    });
  }
  onChooseSuggestion(item) {
    updateBannerData(this.activeFile, { icon: item.emoji });
  }
};

// src/banner/actions/dragBanner.ts
var import_obsidian6 = require("obsidian");
var clampAndRound = (min, value, max) => {
  if (value > max)
    return max;
  if (value < min)
    return min;
  return Math.round(value * 1e3) / 1e3;
};
var getMousePos = (e) => {
  const { clientX, clientY } = e instanceof MouseEvent ? e : e.targetTouches[0];
  return [clientX, clientY];
};
var dragBanner = (img, params) => {
  const { x, y, draggable: _draggable, modKey: _modKey } = params;
  let draggable = _draggable;
  let dragging = false;
  let isVerticalDrag = false;
  let imageSize = { width: 0, height: 0 };
  let prev = { x: 0, y: 0 };
  let objectPos = { x, y };
  let modKey = _modKey;
  const dragStart = (e) => {
    if (modKey !== "None" && !import_obsidian6.Keymap.isModifier(e, modKey))
      return;
    const [x2, y2] = getMousePos(e);
    prev = { x: x2, y: y2 };
    dragging = true;
    const { naturalHeight, naturalWidth } = img;
    const clientHeight = 330;
    const clientWidth = naturalWidth;
    const clientRatio = clientWidth / clientHeight;
    const naturalRatio = naturalWidth / naturalHeight;
    isVerticalDrag = naturalRatio <= clientRatio;
    imageSize = isVerticalDrag ? { width: 0, height: clientWidth / naturalRatio - clientHeight } : { width: clientHeight * naturalRatio - clientWidth, height: 0 };
    img.dispatchEvent(new CustomEvent("dragBannerStart"));
  };
  const dragMove = (e) => {
    if (!dragging)
      return;
    const [x2, y2] = getMousePos(e);
    const delta = { x: prev.x - x2, y: prev.y - y2 };
    prev = { x: x2, y: y2 };
    const drag = {
      x: isVerticalDrag ? 0 : delta.x / imageSize.width,
      y: isVerticalDrag ? delta.y / imageSize.height : 0
    };
    objectPos = {
      x: clampAndRound(0, objectPos.x + drag.x, 1),
      y: clampAndRound(0, objectPos.y + drag.y, 1)
    };
    img.dispatchEvent(
      new CustomEvent("dragBannerMove", { detail: objectPos })
    );
  };
  const dragEnd = () => {
    if (!dragging)
      return;
    dragging = false;
    const detail = isVerticalDrag ? { y: objectPos.y } : { x: objectPos.x };
    img.dispatchEvent(
      new CustomEvent("dragBannerEnd", {
        detail
      })
    );
  };
  const modKeyHeld = (e) => {
    if (e.repeat)
      return;
    const detail = draggable && (modKey === "None" || import_obsidian6.Keymap.isModifier(e, modKey));
    img.dispatchEvent(new CustomEvent("toggleDrag", { detail }));
  };
  const addDragListeners = () => {
    img.addEventListener("mousedown", dragStart);
    img.addEventListener("mousemove", dragMove);
    img.addEventListener("mouseup", dragEnd);
    document.addEventListener("mouseup", dragEnd);
  };
  const removeDragListeners = () => {
    img.removeEventListener("mousedown", dragStart);
    img.removeEventListener("mousemove", dragMove);
    img.removeEventListener("mouseup", dragEnd);
    document.removeEventListener("mouseup", dragEnd);
  };
  const toggleDragListeners = (newDraggable) => {
    draggable = newDraggable;
    if (draggable)
      addDragListeners();
    else
      removeDragListeners();
  };
  const addToggleListeners = () => {
    document.addEventListener("keydown", modKeyHeld);
    document.addEventListener("keyup", modKeyHeld);
  };
  const removeToggleListeners = () => {
    document.removeEventListener("keydown", modKeyHeld);
    document.removeEventListener("keyup", modKeyHeld);
  };
  const toggleToggleListeners = (newModKey) => {
    modKey = newModKey;
    if (modKey === "None")
      removeToggleListeners();
    else
      addToggleListeners();
  };
  if (draggable)
    addDragListeners();
  if (modKey !== "None")
    addToggleListeners();
  return {
    update(params2) {
      const { x: x2, y: y2, draggable: newDraggable, modKey: newModKey } = params2;
      if (draggable !== newDraggable)
        toggleDragListeners(newDraggable);
      if (modKey !== newModKey)
        toggleToggleListeners(newModKey);
      objectPos = { x: x2, y: y2 };
      img.dispatchEvent(
        new CustomEvent("dragBannerMove", { detail: objectPos })
      );
    },
    destroy() {
      removeDragListeners();
      removeToggleListeners();
    }
  };
};
var dragBanner_default = dragBanner;

// src/banner/BannerImage.svelte
var import_obsidian7 = require("obsidian");
function create_fragment11(ctx) {
  let div;
  let img;
  let img_src_value;
  let img_draggable_value;
  let img_aria_hidden_value;
  let dragBanner_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*src*/
      ctx[0]))
        attr(img, "src", img_src_value);
      attr(img, "alt", "Banner");
      set_style(img, "transform", "translateY(-" + /*translateY*/
      ctx[5] + "%)");
      attr(img, "draggable", img_draggable_value = false);
      attr(img, "aria-hidden", img_aria_hidden_value = true);
      attr(img, "class", "svelte-oktqx1");
      toggle_class(
        img,
        "readable-width",
        /*readableWidth*/
        ctx[7]
      );
      toggle_class(
        img,
        "draggable",
        /*draggable*/
        ctx[1]
      );
      toggle_class(
        img,
        "dragging",
        /*dragging*/
        ctx[2]
      );
      attr(div, "class", "banner-wrapper svelte-oktqx1");
      toggle_class(
        div,
        "gradient",
        /*gradient*/
        ctx[6]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img);
      if (!mounted) {
        dispose = [
          listen(
            img,
            "mouseenter",
            /*hoverOn*/
            ctx[8]
          ),
          listen(
            img,
            "mouseleave",
            /*hoverOff*/
            ctx[9]
          ),
          action_destroyer(dragBanner_action = dragBanner_default.call(
            null,
            img,
            /*dragBannerParams*/
            ctx[4]
          )),
          listen(
            img,
            "dragBannerStart",
            /*dragStart*/
            ctx[10]
          ),
          listen(
            img,
            "dragBannerMove",
            /*dragMove*/
            ctx[11]
          ),
          listen(
            img,
            "dragBannerEnd",
            /*dragEnd*/
            ctx[12]
          ),
          listen(
            img,
            "toggleDrag",
            /*toggleDrag*/
            ctx[13]
          ),
          listen(
            img,
            "load",
            /*load_handler*/
            ctx[25]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*src*/
      1 && !src_url_equal(img.src, img_src_value = /*src*/
      ctx2[0])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*translateY*/
      32) {
        set_style(img, "transform", "translateY(-" + /*translateY*/
        ctx2[5] + "%)");
      }
      if (dragBanner_action && is_function(dragBanner_action.update) && dirty & /*dragBannerParams*/
      16)
        dragBanner_action.update.call(
          null,
          /*dragBannerParams*/
          ctx2[4]
        );
      if (dirty & /*readableWidth*/
      128) {
        toggle_class(
          img,
          "readable-width",
          /*readableWidth*/
          ctx2[7]
        );
      }
      if (dirty & /*draggable*/
      2) {
        toggle_class(
          img,
          "draggable",
          /*draggable*/
          ctx2[1]
        );
      }
      if (dirty & /*dragging*/
      4) {
        toggle_class(
          img,
          "dragging",
          /*dragging*/
          ctx2[2]
        );
      }
      if (dirty & /*gradient*/
      64) {
        toggle_class(
          div,
          "gradient",
          /*gradient*/
          ctx2[6]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let readableWidth;
  let bannerDragModifier;
  let enableDragInInternalEmbed;
  let enableDragInPopover;
  let style;
  let gradient;
  let objectPosStyle;
  let translateY;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(24, $settings = $$value));
  const dispatch2 = createEventDispatcher();
  let { src } = $$props;
  let { x } = $$props;
  let { y } = $$props;
  let { lock } = $$props;
  let { embed } = $$props;
  let objectPos = { x, y };
  let hovering = false;
  let draggable = !bannerDragModifier;
  let dragging = false;
  const hoverOn = () => {
    hovering = true;
  };
  const hoverOff = () => {
    hovering = false;
  };
  const dragStart = () => {
    $$invalidate(2, dragging = true);
  };
  const dragMove = ({ detail }) => {
    $$invalidate(18, objectPos = detail);
  };
  const dragEnd = ({ detail }) => {
    dispatch2("drag-banner", detail);
    $$invalidate(2, dragging = false);
  };
  const toggleDrag = ({ detail }) => {
    $$invalidate(1, draggable = detail);
  };
  const toggleLock = () => dispatch2("toggle-lock");
  let loadStartTime;
  let dragParam;
  let dragBannerParams;
  const load_handler = () => {
    const duration = performance.now() - loadStartTime;
    new import_obsidian7.Notice(`[Banner] \u56FE\u7247\u52A0\u8F7D\u8017\u65F6: ${duration.toFixed(2)}ms`);
  };
  $$self.$$set = ($$props2) => {
    if ("src" in $$props2)
      $$invalidate(0, src = $$props2.src);
    if ("x" in $$props2)
      $$invalidate(14, x = $$props2.x);
    if ("y" in $$props2)
      $$invalidate(15, y = $$props2.y);
    if ("lock" in $$props2)
      $$invalidate(16, lock = $$props2.lock);
    if ("embed" in $$props2)
      $$invalidate(17, embed = $$props2.embed);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    16777216) {
      $:
        $$invalidate(7, { adjustWidthToReadableLineWidth: readableWidth, bannerDragModifier, enableDragInInternalEmbed, enableDragInPopover, style } = $settings, readableWidth, ($$invalidate(21, bannerDragModifier), $$invalidate(24, $settings)), ($$invalidate(23, enableDragInInternalEmbed), $$invalidate(24, $settings)), ($$invalidate(22, enableDragInPopover), $$invalidate(24, $settings)), ($$invalidate(20, style), $$invalidate(24, $settings)));
    }
    if ($$self.$$.dirty & /*src*/
    1) {
      $:
        if (src) {
          $$invalidate(3, loadStartTime = performance.now());
        }
    }
    if ($$self.$$.dirty & /*lock, embed, enableDragInInternalEmbed, enableDragInPopover*/
    12779520) {
      $: {
        if (lock)
          $$invalidate(19, dragParam = false);
        if (embed === "internal")
          $$invalidate(19, dragParam = enableDragInInternalEmbed);
        if (embed === "popover")
          $$invalidate(19, dragParam = enableDragInPopover);
        $$invalidate(19, dragParam = true);
      }
    }
    if ($$self.$$.dirty & /*x, y, dragParam, bannerDragModifier*/
    2670592) {
      $:
        $$invalidate(4, dragBannerParams = {
          x,
          y,
          draggable: dragParam,
          modKey: bannerDragModifier
        });
    }
    if ($$self.$$.dirty & /*style*/
    1048576) {
      $:
        $$invalidate(6, gradient = style === "gradient");
    }
    if ($$self.$$.dirty & /*objectPos*/
    262144) {
      $:
        objectPosStyle = `${objectPos.x * 100}% ${objectPos.y * 100}%`;
    }
    if ($$self.$$.dirty & /*objectPos*/
    262144) {
      $:
        $$invalidate(5, translateY = objectPos.y * 100);
    }
  };
  return [
    src,
    draggable,
    dragging,
    loadStartTime,
    dragBannerParams,
    translateY,
    gradient,
    readableWidth,
    hoverOn,
    hoverOff,
    dragStart,
    dragMove,
    dragEnd,
    toggleDrag,
    x,
    y,
    lock,
    embed,
    objectPos,
    dragParam,
    style,
    bannerDragModifier,
    enableDragInPopover,
    enableDragInInternalEmbed,
    $settings,
    load_handler
  ];
}
var BannerImage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, {
      src: 0,
      x: 14,
      y: 15,
      lock: 16,
      embed: 17
    });
  }
};
var BannerImage_default = BannerImage;

// src/banner/Error.svelte
function create_fragment12(ctx) {
  let div1;
  let div0;
  let p;
  let t0;
  let code0;
  let t1;
  let t2;
  let t3;
  let code1;
  let t4;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      p = element("p");
      t0 = text("Couldn't load the banner! Is the ");
      code0 = element("code");
      t1 = text(
        /*frontmatterField*/
        ctx[1]
      );
      t2 = text(" field\r\n            correct?");
      t3 = space();
      code1 = element("code");
      t4 = text(
        /*error*/
        ctx[0]
      );
      attr(div0, "class", "error markdown-rendered svelte-1otst60");
      attr(div1, "class", "wrapper svelte-1otst60");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, p);
      append(p, t0);
      append(p, code0);
      append(code0, t1);
      append(p, t2);
      append(div0, t3);
      append(div0, code1);
      append(code1, t4);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*frontmatterField*/
      2)
        set_data(
          t1,
          /*frontmatterField*/
          ctx2[1]
        );
      if (dirty & /*error*/
      1)
        set_data(
          t4,
          /*error*/
          ctx2[0]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let frontmatterField;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(2, $settings = $$value));
  let { error } = $$props;
  $$self.$$set = ($$props2) => {
    if ("error" in $$props2)
      $$invalidate(0, error = $$props2.error);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    4) {
      $:
        $$invalidate(1, { frontmatterField } = $settings, frontmatterField);
    }
  };
  return [error, frontmatterField, $settings];
}
var Error2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, { error: 0 });
  }
};
var Error_default = Error2;

// src/banner/actions/sizedMargin.ts
var sizedMargin = (el, params) => {
  let { vertical, height, withBanner } = params;
  const applyMargin = () => {
    if (!withBanner)
      return el.setCssStyles({ marginTop: "" });
    switch (vertical) {
      case "edge":
        return el.setCssStyles({ marginTop: `-${height / 2}px` });
      case "above":
      case "custom":
        return el.setCssStyles({ marginTop: `-${height}px` });
      default:
        return el.setCssStyles({ marginTop: "" });
    }
  };
  applyMargin();
  return {
    update(params2) {
      vertical = params2.vertical;
      height = params2.height;
      withBanner = params2.withBanner;
      applyMargin();
    }
  };
};
var sizedMargin_default = sizedMargin;

// src/banner/Icon.svelte
var import_obsidian8 = require("obsidian");
function create_fragment13(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "banner-icon svelte-811rnv");
      attr(div, "role", "button");
      attr(div, "tabindex", "-1");
      toggle_class(
        div,
        "embed",
        /*isEmbed*/
        ctx[0]
      );
      toggle_class(
        div,
        "text-icon",
        /*type*/
        ctx[2] === "text"
      );
      toggle_class(
        div,
        "emoji-icon",
        /*type*/
        ctx[2] === "emoji"
      );
      toggle_class(
        div,
        "shadow",
        /*decor*/
        ctx[3] === "shadow"
      );
      toggle_class(
        div,
        "border",
        /*decor*/
        ctx[3] === "border"
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = /*html*/
      ctx[1];
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleIconClick*/
            ctx[4]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*html*/
      2)
        div.innerHTML = /*html*/
        ctx2[1];
      ;
      if (dirty & /*isEmbed*/
      1) {
        toggle_class(
          div,
          "embed",
          /*isEmbed*/
          ctx2[0]
        );
      }
      if (dirty & /*type*/
      4) {
        toggle_class(
          div,
          "text-icon",
          /*type*/
          ctx2[2] === "text"
        );
      }
      if (dirty & /*type*/
      4) {
        toggle_class(
          div,
          "emoji-icon",
          /*type*/
          ctx2[2] === "emoji"
        );
      }
      if (dirty & /*decor*/
      8) {
        toggle_class(
          div,
          "shadow",
          /*decor*/
          ctx2[3] === "shadow"
        );
      }
      if (dirty & /*decor*/
      8) {
        toggle_class(
          div,
          "border",
          /*decor*/
          ctx2[3] === "border"
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let decor;
  let useTwemoji;
  let type;
  let value;
  let html;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(8, $settings = $$value));
  const dispatch2 = createEventDispatcher();
  let { icon } = $$props;
  let { isEmbed } = $$props;
  let { file } = $$props;
  const handleIconClick = () => {
    if (isEmbed)
      return;
    dispatch2("open-icon-modal");
  };
  const keydown_handler = (e) => e.code === "Enter" && handleIconClick();
  $$self.$$set = ($$props2) => {
    if ("icon" in $$props2)
      $$invalidate(5, icon = $$props2.icon);
    if ("isEmbed" in $$props2)
      $$invalidate(0, isEmbed = $$props2.isEmbed);
    if ("file" in $$props2)
      $$invalidate(6, file = $$props2.file);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    256) {
      $:
        $$invalidate(3, { headerDecor: decor, useTwemoji } = $settings, decor);
    }
    if ($$self.$$.dirty & /*icon*/
    32) {
      $:
        $$invalidate(2, { type, value } = icon, type, ($$invalidate(7, value), $$invalidate(5, icon)));
    }
    if ($$self.$$.dirty & /*value, file*/
    192) {
      $:
        $$invalidate(1, html = `<img class="banner-emoji" draggable="false" alt="\u{1F4AF}" src="${getInternalImage(value, file.path)}">`);
    }
  };
  return [
    isEmbed,
    html,
    type,
    decor,
    handleIconClick,
    icon,
    file,
    value,
    $settings,
    keydown_handler
  ];
}
var Icon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, { icon: 5, isEmbed: 0, file: 6 });
  }
};
var Icon_default = Icon;

// src/banner/Header.svelte
function create_if_block_12(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon_default({
    props: {
      icon: (
        /*icon*/
        ctx[0]
      ),
      isEmbed: (
        /*isEmbed*/
        ctx[3]
      ),
      file: (
        /*file*/
        ctx[4]
      )
    }
  });
  icon_1.$on(
    "open-icon-modal",
    /*open_icon_modal_handler*/
    ctx[11]
  );
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*icon*/
      1)
        icon_1_changes.icon = /*icon*/
        ctx2[0];
      if (dirty & /*isEmbed*/
      8)
        icon_1_changes.isEmbed = /*isEmbed*/
        ctx2[3];
      if (dirty & /*file*/
      16)
        icon_1_changes.file = /*file*/
        ctx2[4];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_if_block3(ctx) {
  let h1;
  let t;
  return {
    c() {
      h1 = element("h1");
      t = text(
        /*header*/
        ctx[1]
      );
      attr(h1, "class", "banner-header-title svelte-1ytuxbh");
    },
    m(target, anchor) {
      insert(target, h1, anchor);
      append(h1, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*header*/
      2)
        set_data(
          t,
          /*header*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(h1);
      }
    }
  };
}
function create_fragment14(ctx) {
  let div;
  let t;
  let div_resize_listener;
  let sizedMargin_action;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*icon*/
    ctx[0] && create_if_block_12(ctx)
  );
  let if_block1 = (
    /*header*/
    ctx[1] && create_if_block3(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      attr(div, "class", "banner-header svelte-1ytuxbh");
      add_render_callback(() => (
        /*div_elementresize_handler*/
        ctx[12].call(div)
      ));
      toggle_class(
        div,
        "with-banner",
        /*withBanner*/
        ctx[2]
      );
      toggle_class(
        div,
        "shadow",
        /*decor*/
        ctx[9] === "shadow"
      );
      toggle_class(
        div,
        "border",
        /*decor*/
        ctx[9] === "border"
      );
      toggle_class(
        div,
        "h-left",
        /*horizontal*/
        ctx[8] === "left"
      );
      toggle_class(
        div,
        "h-center",
        /*horizontal*/
        ctx[8] === "center"
      );
      toggle_class(
        div,
        "h-right",
        /*horizontal*/
        ctx[8] === "right"
      );
      toggle_class(
        div,
        "h-custom",
        /*horizontal*/
        ctx[8] === "custom"
      );
      toggle_class(
        div,
        "v-center-banner",
        /*vertical*/
        ctx[6] === "center"
      );
      toggle_class(
        div,
        "v-above",
        /*vertical*/
        ctx[6] === "above"
      );
      toggle_class(
        div,
        "v-edge",
        /*vertical*/
        ctx[6] === "edge"
      );
      toggle_class(
        div,
        "v-below",
        /*vertical*/
        ctx[6] === "below"
      );
      toggle_class(
        div,
        "v-custom",
        /*vertical*/
        ctx[6] === "custom"
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append(div, t);
      if (if_block1)
        if_block1.m(div, null);
      div_resize_listener = add_iframe_resize_listener(
        div,
        /*div_elementresize_handler*/
        ctx[12].bind(div)
      );
      current = true;
      if (!mounted) {
        dispose = action_destroyer(sizedMargin_action = sizedMargin_default.call(
          null,
          div,
          /*params*/
          ctx[7]
        ));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*icon*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_12(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*header*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block3(ctx2);
          if_block1.c();
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (sizedMargin_action && is_function(sizedMargin_action.update) && dirty & /*params*/
      128)
        sizedMargin_action.update.call(
          null,
          /*params*/
          ctx2[7]
        );
      if (!current || dirty & /*withBanner*/
      4) {
        toggle_class(
          div,
          "with-banner",
          /*withBanner*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*decor*/
      512) {
        toggle_class(
          div,
          "shadow",
          /*decor*/
          ctx2[9] === "shadow"
        );
      }
      if (!current || dirty & /*decor*/
      512) {
        toggle_class(
          div,
          "border",
          /*decor*/
          ctx2[9] === "border"
        );
      }
      if (!current || dirty & /*horizontal*/
      256) {
        toggle_class(
          div,
          "h-left",
          /*horizontal*/
          ctx2[8] === "left"
        );
      }
      if (!current || dirty & /*horizontal*/
      256) {
        toggle_class(
          div,
          "h-center",
          /*horizontal*/
          ctx2[8] === "center"
        );
      }
      if (!current || dirty & /*horizontal*/
      256) {
        toggle_class(
          div,
          "h-right",
          /*horizontal*/
          ctx2[8] === "right"
        );
      }
      if (!current || dirty & /*horizontal*/
      256) {
        toggle_class(
          div,
          "h-custom",
          /*horizontal*/
          ctx2[8] === "custom"
        );
      }
      if (!current || dirty & /*vertical*/
      64) {
        toggle_class(
          div,
          "v-center-banner",
          /*vertical*/
          ctx2[6] === "center"
        );
      }
      if (!current || dirty & /*vertical*/
      64) {
        toggle_class(
          div,
          "v-above",
          /*vertical*/
          ctx2[6] === "above"
        );
      }
      if (!current || dirty & /*vertical*/
      64) {
        toggle_class(
          div,
          "v-edge",
          /*vertical*/
          ctx2[6] === "edge"
        );
      }
      if (!current || dirty & /*vertical*/
      64) {
        toggle_class(
          div,
          "v-below",
          /*vertical*/
          ctx2[6] === "below"
        );
      }
      if (!current || dirty & /*vertical*/
      64) {
        toggle_class(
          div,
          "v-custom",
          /*vertical*/
          ctx2[6] === "custom"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      div_resize_listener();
      mounted = false;
      dispose();
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  let decor;
  let horizontal;
  let vertical;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(10, $settings = $$value));
  let { icon } = $$props;
  let { header } = $$props;
  let { withBanner } = $$props;
  let { isEmbed } = $$props;
  let { file } = $$props;
  let clientHeight = 0;
  let params;
  function open_icon_modal_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_elementresize_handler() {
    clientHeight = this.clientHeight;
    $$invalidate(5, clientHeight);
  }
  $$self.$$set = ($$props2) => {
    if ("icon" in $$props2)
      $$invalidate(0, icon = $$props2.icon);
    if ("header" in $$props2)
      $$invalidate(1, header = $$props2.header);
    if ("withBanner" in $$props2)
      $$invalidate(2, withBanner = $$props2.withBanner);
    if ("isEmbed" in $$props2)
      $$invalidate(3, isEmbed = $$props2.isEmbed);
    if ("file" in $$props2)
      $$invalidate(4, file = $$props2.file);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    1024) {
      $:
        $$invalidate(9, { headerDecor: decor, headerHorizontalAlignment: horizontal, headerVerticalAlignment: vertical } = $settings, decor, ($$invalidate(8, horizontal), $$invalidate(10, $settings)), ($$invalidate(6, vertical), $$invalidate(10, $settings)));
    }
    if ($$self.$$.dirty & /*vertical, clientHeight, withBanner*/
    100) {
      $:
        $$invalidate(7, params = {
          vertical,
          height: clientHeight,
          withBanner
        });
    }
  };
  return [
    icon,
    header,
    withBanner,
    isEmbed,
    file,
    clientHeight,
    vertical,
    params,
    horizontal,
    decor,
    $settings,
    open_icon_modal_handler,
    div_elementresize_handler
  ];
}
var Header = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, {
      icon: 0,
      header: 1,
      withBanner: 2,
      isEmbed: 3,
      file: 4
    });
  }
};
var Header_default = Header;

// src/banner/Loading.svelte
function create_fragment15(ctx) {
  let div1;
  return {
    c() {
      div1 = element("div");
      div1.innerHTML = `<div class="loading svelte-sr783m">Loading...</div>`;
      attr(div1, "class", "wrapper svelte-sr783m");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
    }
  };
}
var Loading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment15, safe_not_equal, {});
  }
};
var Loading_default = Loading;

// src/banner/Banner.svelte
function create_if_block_13(ctx) {
  let await_block_anchor;
  let promise2;
  let current;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: true,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 16,
    error: 17,
    blocks: [, , ,]
  };
  handle_promise(promise2 = fetchImage(
    /*source*/
    ctx[0],
    /*file*/
    ctx[4].path
  ), info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*source, file*/
      17 && promise2 !== (promise2 = fetchImage(
        /*source*/
        ctx[0],
        /*file*/
        ctx[4].path
      )) && handle_promise(promise2, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(await_block_anchor);
      }
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block(ctx) {
  let error_1;
  let current;
  error_1 = new Error_default({ props: { error: (
    /*error*/
    ctx[17]
  ) } });
  return {
    c() {
      create_component(error_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(error_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const error_1_changes = {};
      if (dirty & /*source, file*/
      17)
        error_1_changes.error = /*error*/
        ctx2[17];
      error_1.$set(error_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(error_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(error_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(error_1, detaching);
    }
  };
}
function create_then_block(ctx) {
  let bannerimage;
  let current;
  bannerimage = new BannerImage_default({
    props: {
      src: (
        /*src*/
        ctx[16]
      ),
      x: (
        /*bannerX*/
        ctx[10]
      ),
      y: (
        /*bannerY*/
        ctx[9]
      ),
      lock: (
        /*lockValue*/
        ctx[8]
      ),
      embed: (
        /*embed*/
        ctx[5]
      )
    }
  });
  bannerimage.$on(
    "drag-banner",
    /*drag_banner_handler*/
    ctx[15]
  );
  return {
    c() {
      create_component(bannerimage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bannerimage, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const bannerimage_changes = {};
      if (dirty & /*source, file*/
      17)
        bannerimage_changes.src = /*src*/
        ctx2[16];
      if (dirty & /*bannerX*/
      1024)
        bannerimage_changes.x = /*bannerX*/
        ctx2[10];
      if (dirty & /*bannerY*/
      512)
        bannerimage_changes.y = /*bannerY*/
        ctx2[9];
      if (dirty & /*lockValue*/
      256)
        bannerimage_changes.lock = /*lockValue*/
        ctx2[8];
      if (dirty & /*embed*/
      32)
        bannerimage_changes.embed = /*embed*/
        ctx2[5];
      bannerimage.$set(bannerimage_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(bannerimage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bannerimage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(bannerimage, detaching);
    }
  };
}
function create_pending_block(ctx) {
  let loading;
  let current;
  loading = new Loading_default({});
  return {
    c() {
      create_component(loading.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loading, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loading.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loading.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loading, detaching);
    }
  };
}
function create_if_block4(ctx) {
  let header_1;
  let current;
  header_1 = new Header_default({
    props: {
      icon: (
        /*icon*/
        ctx[1]
      ),
      header: (
        /*header*/
        ctx[2]
      ),
      withBanner: (
        /*withBanner*/
        ctx[7]
      ),
      isEmbed: (
        /*isEmbed*/
        ctx[6]
      ),
      file: (
        /*file*/
        ctx[4]
      )
    }
  });
  header_1.$on(
    "open-icon-modal",
    /*openIconModal*/
    ctx[11]
  );
  return {
    c() {
      create_component(header_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(header_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const header_1_changes = {};
      if (dirty & /*icon*/
      2)
        header_1_changes.icon = /*icon*/
        ctx2[1];
      if (dirty & /*header*/
      4)
        header_1_changes.header = /*header*/
        ctx2[2];
      if (dirty & /*withBanner*/
      128)
        header_1_changes.withBanner = /*withBanner*/
        ctx2[7];
      if (dirty & /*isEmbed*/
      64)
        header_1_changes.isEmbed = /*isEmbed*/
        ctx2[6];
      if (dirty & /*file*/
      16)
        header_1_changes.file = /*file*/
        ctx2[4];
      header_1.$set(header_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(header_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(header_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(header_1, detaching);
    }
  };
}
function create_fragment16(ctx) {
  let header_1;
  let t;
  let current;
  let if_block0 = (
    /*source*/
    ctx[0] && create_if_block_13(ctx)
  );
  let if_block1 = (
    /*icon*/
    (ctx[1] || /*header*/
    ctx[2]) && create_if_block4(ctx)
  );
  return {
    c() {
      header_1 = element("header");
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      attr(header_1, "class", "obsidian-banner svelte-rur4sd");
      toggle_class(
        header_1,
        "editing",
        /*viewType*/
        ctx[3] === "editing"
      );
      toggle_class(
        header_1,
        "reading",
        /*viewType*/
        ctx[3] === "reading"
      );
    },
    m(target, anchor) {
      insert(target, header_1, anchor);
      if (if_block0)
        if_block0.m(header_1, null);
      append(header_1, t);
      if (if_block1)
        if_block1.m(header_1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*source*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*source*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_13(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(header_1, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*icon*/
        ctx2[1] || /*header*/
        ctx2[2]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*icon, header*/
          6) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block4(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(header_1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*viewType*/
      8) {
        toggle_class(
          header_1,
          "editing",
          /*viewType*/
          ctx2[3] === "editing"
        );
      }
      if (!current || dirty & /*viewType*/
      8) {
        toggle_class(
          header_1,
          "reading",
          /*viewType*/
          ctx2[3] === "reading"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(header_1);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let bannerX;
  let bannerY;
  let lockValue;
  let withBanner;
  let isEmbed;
  let { source = void 0 } = $$props;
  let { x = 0.5 } = $$props;
  let { y = 0.5 } = $$props;
  let { icon = void 0 } = $$props;
  let { header = void 0 } = $$props;
  let { lock = false } = $$props;
  let { viewType } = $$props;
  let { file } = $$props;
  let { embed = false } = $$props;
  const openIconModal = () => new IconModal(file).open();
  const drag_banner_handler = async ({ detail }) => updateBannerData(file, detail);
  $$self.$$set = ($$props2) => {
    if ("source" in $$props2)
      $$invalidate(0, source = $$props2.source);
    if ("x" in $$props2)
      $$invalidate(12, x = $$props2.x);
    if ("y" in $$props2)
      $$invalidate(13, y = $$props2.y);
    if ("icon" in $$props2)
      $$invalidate(1, icon = $$props2.icon);
    if ("header" in $$props2)
      $$invalidate(2, header = $$props2.header);
    if ("lock" in $$props2)
      $$invalidate(14, lock = $$props2.lock);
    if ("viewType" in $$props2)
      $$invalidate(3, viewType = $$props2.viewType);
    if ("file" in $$props2)
      $$invalidate(4, file = $$props2.file);
    if ("embed" in $$props2)
      $$invalidate(5, embed = $$props2.embed);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*x*/
    4096) {
      $:
        $$invalidate(10, bannerX = x ?? 0.5);
    }
    if ($$self.$$.dirty & /*y*/
    8192) {
      $:
        $$invalidate(9, bannerY = y ?? 0.5);
    }
    if ($$self.$$.dirty & /*lock*/
    16384) {
      $:
        $$invalidate(8, lockValue = lock ?? false);
    }
    if ($$self.$$.dirty & /*source*/
    1) {
      $:
        $$invalidate(7, withBanner = !!source);
    }
    if ($$self.$$.dirty & /*embed*/
    32) {
      $:
        $$invalidate(6, isEmbed = !!embed);
    }
  };
  return [
    source,
    icon,
    header,
    viewType,
    file,
    embed,
    isEmbed,
    withBanner,
    lockValue,
    bannerY,
    bannerX,
    openIconModal,
    x,
    y,
    lock,
    drag_banner_handler
  ];
}
var Banner = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment16, safe_not_equal, {
      source: 0,
      x: 12,
      y: 13,
      icon: 1,
      header: 2,
      lock: 14,
      viewType: 3,
      file: 4,
      embed: 5
    });
  }
  get source() {
    return this.$$.ctx[0];
  }
  set source(source) {
    this.$$set({ source });
    flush();
  }
  get x() {
    return this.$$.ctx[12];
  }
  set x(x) {
    this.$$set({ x });
    flush();
  }
  get y() {
    return this.$$.ctx[13];
  }
  set y(y) {
    this.$$set({ y });
    flush();
  }
  get icon() {
    return this.$$.ctx[1];
  }
  set icon(icon) {
    this.$$set({ icon });
    flush();
  }
  get header() {
    return this.$$.ctx[2];
  }
  set header(header) {
    this.$$set({ header });
    flush();
  }
  get lock() {
    return this.$$.ctx[14];
  }
  set lock(lock) {
    this.$$set({ lock });
    flush();
  }
  get viewType() {
    return this.$$.ctx[3];
  }
  set viewType(viewType) {
    this.$$set({ viewType });
    flush();
  }
  get file() {
    return this.$$.ctx[4];
  }
  set file(file) {
    this.$$set({ file });
    flush();
  }
  get embed() {
    return this.$$.ctx[5];
  }
  set embed(embed) {
    this.$$set({ embed });
    flush();
  }
};
var Banner_default = Banner;

// src/banner/index.ts
var WRAPPER_CLASS = "obsidian-banner-wrapper";
var IN_INTERNAL_EMBED_CLASS = "in-internal-embed";
var IN_POPOVER_CLASS = "in-popover";
var WITH_BANNER_CLASS = "with-banner";
var WITHOUT_BANNER_CLASS = "without-banner";
var leafBannerMap = {};
var createBanner = (bannerProps, container, id) => {
  const cls = [WRAPPER_CLASS];
  cls.push(bannerProps.source ? WITH_BANNER_CLASS : WITHOUT_BANNER_CLASS);
  if (bannerProps.embed === "internal")
    cls.push(IN_INTERNAL_EMBED_CLASS);
  else if (bannerProps.embed === "popover")
    cls.push(IN_POPOVER_CLASS);
  const wrapper = createDiv({ cls });
  const banner = new Banner_default({
    target: wrapper,
    props: bannerProps
  });
  try {
    container.prepend(wrapper);
    leafBannerMap[id] = { banner, container, wrapper };
  } catch (error) {
    new import_obsidian10.Notice("Unable to add a banner to the leaflet!");
    console.error(error);
  }
};
var updateBanner = (bannerProps, id) => {
  try {
    const { banner, wrapper } = leafBannerMap[id];
    banner.$set(bannerProps);
    wrapper.toggleClass(WITH_BANNER_CLASS, !!bannerProps.source);
    wrapper.toggleClass(WITHOUT_BANNER_CLASS, !bannerProps.source);
  } catch (error) {
    new import_obsidian10.Notice(`Failed to update banner at leaf ${id}!`);
    console.error(error);
  }
};
var destroyBanner = (id) => {
  if (!leafBannerMap[id])
    return;
  const { banner, container } = leafBannerMap[id];
  banner.$destroy();
  container.querySelector(`.${WRAPPER_CLASS}`)?.remove();
  delete leafBannerMap[id];
};
var hasBanner = (id) => !!leafBannerMap[id];
var unloadAllBanners = () => {
  for (const id of Object.keys(leafBannerMap)) {
    destroyBanner(id);
  }
};
var shouldDisplayBanner = (bannerData) => {
  const { source, icon, header } = bannerData;
  return !!(source || icon || header);
};

// src/BannerEvents.ts
var import_obsidian14 = require("obsidian");

// src/editing/extensions/bannerExtender.ts
var import_state3 = require("@codemirror/state");
var import_isEqual = __toESM(require_isEqual(), 1);
var import_obsidian12 = require("obsidian");

// src/editing/extensions/bannerField.ts
var import_state2 = require("@codemirror/state");
var import_obsidian11 = require("obsidian");

// src/editing/extensions/utils.ts
var import_state = require("@codemirror/state");
var refreshEffect = import_state.StateEffect.define();
var openNoteEffect = import_state.StateEffect.define();
var upsertBannerEffect = import_state.StateEffect.define();
var removeBannerEffect = import_state.StateEffect.define();
var assignBannerEffect = import_state.StateEffect.define();
var hasEffect = (effects, target) => Array.isArray(target) ? target.some((t) => hasEffect(effects, t)) : effects.some((e) => e.is(target));

// src/editing/extensions/bannerField.ts
var SCROLLER_CLASS = "cm-scroller";
var upsertBannerFromState = (state, bannerData) => {
  const { file, leaf } = state.field(import_obsidian11.editorInfoField);
  const { dom } = state.field(import_obsidian11.editorEditorField);
  const props = {
    ...bannerData,
    viewType: "editing",
    file
  };
  if (hasBanner(leaf.id)) {
    updateBanner(props, leaf.id);
  } else {
    const el = dom.querySelector(`.${SCROLLER_CLASS}`);
    createBanner(props, el, leaf.id);
  }
};
var destroyBannerFromState = (state) => {
  const { leaf } = state.field(import_obsidian11.editorInfoField);
  destroyBanner(leaf.id);
};
var assignBannerFromState = (state) => {
  const { file, leaf } = state.field(import_obsidian11.editorInfoField);
  updateBanner({ file }, leaf.id);
};
var bannerField = import_state2.StateField.define({
  create() {
    return null;
  },
  update(prev, transaction) {
    const { effects, state } = transaction;
    let now2 = prev;
    for (const effect of effects) {
      if (effect.is(upsertBannerEffect)) {
        upsertBannerFromState(state, effect.value);
        now2 = effect.value;
      } else if (effect.is(removeBannerEffect)) {
        destroyBannerFromState(state);
        now2 = null;
      } else if (effect.is(assignBannerEffect)) {
        assignBannerFromState(state);
      }
    }
    return now2;
  }
});
var bannerField_default = bannerField;

// src/editing/extensions/bannerExtender.ts
var getEffectFromData = (state) => {
  const bannerData = extractBannerDataFromState(state);
  return shouldDisplayBanner(bannerData) ? upsertBannerEffect.of(bannerData) : removeBannerEffect.of(null);
};
var didBannerDataChange = (transaction) => {
  const { docChanged, state } = transaction;
  if (!docChanged)
    return false;
  const prev = state.field(bannerField_default);
  const current = extractBannerDataFromState(state);
  return !(0, import_isEqual.default)(prev, current);
};
var bannerExtender = import_state3.EditorState.transactionExtender.of((transaction) => {
  const { effects, state } = transaction;
  const { leaf } = state.field(import_obsidian12.editorInfoField);
  if (leaf === void 0)
    return null;
  if (hasEffect(effects, openNoteEffect)) {
    console.log("open note!");
    const newEffects = [];
    if (hasBanner(leaf.id))
      newEffects.push(assignBannerEffect.of(null));
    newEffects.push(getEffectFromData(state));
    return { effects: newEffects };
  } else if (hasEffect(effects, refreshEffect) || didBannerDataChange(transaction)) {
    return { effects: getEffectFromData(state) };
  }
  return null;
});
var bannerExtender_default = bannerExtender;

// src/editing/index.ts
var loadExtensions = () => {
  plug.registerEditorExtension([bannerExtender_default, bannerField_default]);
  iterateMarkdownLeaves((leaf) => {
    const editor = leaf.view.editor;
    const cm = editor?.cm;
    if (cm) {
      cm.dispatch({ effects: openNoteEffect.of(null) });
    }
  }, "editing");
};
var registerEditorBannerEvents = () => {
  registerSettingChangeEvent(
    ["frontmatterField", "useHeaderByDefault", "defaultHeaderValue"],
    () => {
      iterateMarkdownLeaves((leaf) => {
        const editor = leaf.view.editor;
        const cm = editor?.cm;
        if (cm) {
          cm.dispatch({
            effects: refreshEffect.of(null)
          });
        }
      }, "editing");
    }
  );
  plug.registerEvent(
    plug.app.workspace.on("layout-change", () => {
      plug.app.workspace.iterateRootLeaves((leaf) => {
        const { id, view } = leaf;
        if (doesLeafHaveMarkdownMode(leaf)) {
          const { mode } = leaf.getViewState().state;
          const effects = mode === "source" ? openNoteEffect.of(null) : removeBannerEffect.of(null);
          const editor = view.editor;
          const cm = editor?.cm;
          if (cm) {
            cm.dispatch({ effects });
          }
        } else if (leafBannerMap[id]) {
          destroyBanner(id);
        }
      });
    })
  );
};

// src/reading/index.ts
var import_obsidian13 = require("obsidian");
var rerender = () => {
  for (const leaf of plug.app.workspace.getLeavesOfType("markdown")) {
    const { previewMode } = leaf.view;
    const renderer = previewMode?.renderer;
    if (!renderer)
      continue;
    const sections = renderer.sections.filter(
      (s) => s.el.querySelector("pre.frontmatter, .internal-embed")
    );
    for (const section of sections) {
      section.rendered = false;
      section.html = "";
    }
    previewMode.renderer.queueRender();
  }
};
var isEmbedded = (containerEl) => {
  if (containerEl.closest(".internal-embed"))
    return "internal";
  if (containerEl.closest(".popover"))
    return "popover";
  return false;
};
var postprocessor = (el, ctx) => {
  const { docId, containerEl, frontmatter, sourcePath } = ctx;
  const embed = isEmbedded(containerEl);
  if (embed === "internal" && !getSetting("showInInternalEmbed") || embed === "popover" && !getSetting("showInPopover"))
    return;
  const file = plug.app.metadataCache.getFirstLinkpathDest(sourcePath, "/");
  const bannerData = extractBannerData(frontmatter, file);
  if (shouldDisplayBanner(bannerData)) {
    const props = {
      ...bannerData,
      file,
      embed,
      viewType: "reading"
    };
    if (hasBanner(docId)) {
      updateBanner(props, docId);
    } else {
      createBanner(props, containerEl.parentElement, docId);
    }
  } else {
    destroyBanner(docId);
  }
};
var loadPostProcessor = () => {
  plug.registerMarkdownPostProcessor(postprocessor);
  rerender();
};
var registerReadingBannerEvents = () => {
  registerSettingChangeEvent(
    [
      "frontmatterField",
      "showInInternalEmbed",
      "useHeaderByDefault",
      "defaultHeaderValue"
    ],
    rerender
  );
  plug.registerEvent(plug.app.vault.on("rename", rerender));
  plug.registerEvent(
    plug.app.workspace.on("layout-change", () => {
      iterateMarkdownLeaves((leaf) => {
        if (!leaf.view.file?.stat?.size)
          destroyBanner(leaf.view.previewMode?.docId ?? "");
      }, "reading");
    })
  );
};

// src/BannerEvents.ts
var BannerEvents = class extends import_obsidian14.Events {
  loadEvents() {
    registerReadingBannerEvents();
    registerEditorBannerEvents();
  }
  on(name, callback) {
    return super.on(name, callback);
  }
  trigger(name, data) {
    super.trigger(name, data);
  }
};

// src/modals/LocalImageModal.ts
var import_obsidian15 = require("obsidian");
var import_obsidian16 = require("obsidian");

// src/modals/utils.ts
var getPathParts = (file, matches) => {
  const { path } = file;
  if (!matches.length)
    return [{ part: path.slice(0, path.length), bold: false }];
  const parts = [];
  let i = 0;
  for (const [start, end] of matches) {
    if (i !== start)
      parts.push({ part: path.slice(i, start), bold: false });
    parts.push({ part: path.slice(start, end), bold: true });
    i = end;
  }
  if (i !== path.length)
    parts.push({ part: path.slice(i, path.length), bold: false });
  return parts;
};

// src/modals/LocalImageSuggestion.svelte
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i].part;
  child_ctx[7] = list[i].bold;
  child_ctx[9] = i;
  return child_ctx;
}
function create_each_block2(key_1, ctx) {
  let span;
  let t_value = (
    /*part*/
    ctx[6] + ""
  );
  let t;
  return {
    key: key_1,
    first: null,
    c() {
      span = element("span");
      t = text(t_value);
      toggle_class(
        span,
        "suggestion-highlight",
        /*bold*/
        ctx[7]
      );
      this.first = span;
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*parts*/
      4 && t_value !== (t_value = /*part*/
      ctx[6] + ""))
        set_data(t, t_value);
      if (dirty & /*parts*/
      4) {
        toggle_class(
          span,
          "suggestion-highlight",
          /*bold*/
          ctx[7]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block5(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*src*/
      ctx[1]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = "Banner for " + /*file*/
      ctx[0].name);
      attr(img, "class", "banner-preview svelte-11izsk0");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*src*/
      2 && !src_url_equal(img.src, img_src_value = /*src*/
      ctx2[1])) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*file*/
      1 && img_alt_value !== (img_alt_value = "Banner for " + /*file*/
      ctx2[0].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_fragment17(ctx) {
  let div;
  let t0_value = (
    /*file*/
    ctx[0].name + ""
  );
  let t0;
  let t1;
  let small;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t2;
  let if_block_anchor;
  let each_value = ensure_array_like(
    /*parts*/
    ctx[2]
  );
  const get_key = (ctx2) => (
    /*i*/
    ctx2[9]
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context2(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
  }
  let if_block = (
    /*showPreview*/
    ctx[3] && create_if_block5(ctx)
  );
  return {
    c() {
      div = element("div");
      t0 = text(t0_value);
      t1 = space();
      small = element("small");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(small, "class", "filepath svelte-11izsk0");
      attr(div, "class", "suggestion-text svelte-11izsk0");
      toggle_class(
        div,
        "with-preview",
        /*showPreview*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t0);
      append(div, t1);
      append(div, small);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(small, null);
        }
      }
      insert(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*file*/
      1 && t0_value !== (t0_value = /*file*/
      ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & /*parts*/
      4) {
        each_value = ensure_array_like(
          /*parts*/
          ctx2[2]
        );
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, small, destroy_block, create_each_block2, null, get_each_context2);
      }
      if (dirty & /*showPreview*/
      8) {
        toggle_class(
          div,
          "with-preview",
          /*showPreview*/
          ctx2[3]
        );
      }
      if (
        /*showPreview*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t2);
        detach(if_block_anchor);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let showPreview;
  let parts;
  let src;
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(5, $settings = $$value));
  let { file } = $$props;
  let { matches } = $$props;
  $$self.$$set = ($$props2) => {
    if ("file" in $$props2)
      $$invalidate(0, file = $$props2.file);
    if ("matches" in $$props2)
      $$invalidate(4, matches = $$props2.matches);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    32) {
      $:
        $$invalidate(3, { showPreviewInLocalModal: showPreview } = $settings, showPreview);
    }
    if ($$self.$$.dirty & /*file, matches*/
    17) {
      $:
        $$invalidate(2, parts = getPathParts(file, matches));
    }
    if ($$self.$$.dirty & /*file*/
    1) {
      $:
        $$invalidate(1, src = plug.app.vault.getResourcePath(file));
    }
  };
  return [file, src, parts, showPreview, matches, $settings];
}
var LocalImageSuggestion = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment17, safe_not_equal, { file: 0, matches: 4 });
  }
};
var LocalImageSuggestion_default = LocalImageSuggestion;

// src/modals/LocalImageModal.ts
var LocalImageModal = class extends import_obsidian15.FuzzySuggestModal {
  constructor(file) {
    super(plug.app);
    __publicField(this, "activeFile");
    __publicField(this, "path");
    this.activeFile = file;
    this.limit = getSetting("localModalSuggestionLimit");
    this.path = getSetting("bannersFolder");
    this.containerEl.addClass("banners-local-image-modal");
    this.setPlaceholder("Pick an image to use as a banner");
  }
  getImagesInFolder(folder) {
    return folder.children.reduce((files, abFile) => {
      if (abFile instanceof import_obsidian16.TFolder) {
        files.push(...this.getImagesInFolder(folder));
      } else if (abFile instanceof import_obsidian15.TFile && IMAGE_EXTENSIONS.includes(abFile.extension)) {
        files.push(abFile);
      }
      return files;
    }, []);
  }
  getItems() {
    if (this.path === DEFAULT_SETTINGS.bannersFolder) {
      return this.app.vault.getFiles().filter((file) => IMAGE_EXTENSIONS.includes(file.extension));
    }
    const folder = this.app.vault.getAbstractFileByPath(this.path);
    if (!folder || !(folder instanceof import_obsidian16.TFolder)) {
      new import_obsidian15.Notice(
        "Error: Make sure that you set the 'Banners folder' setting to a valid folder",
        7e3
      );
      this.close();
      return [];
    }
    return this.getImagesInFolder(folder);
  }
  getItemText(item) {
    return item.path;
  }
  renderSuggestion({ item, match }, el) {
    new LocalImageSuggestion_default({
      target: el,
      props: {
        file: item,
        matches: match.matches
      }
    });
  }
  onChooseItem(item) {
    const link = this.app.metadataCache.fileToLinktext(
      item,
      this.activeFile.path
    );
    updateBannerData(this.activeFile, { source: `[[${link}]]` });
  }
};

// src/modals/UpsertHeaderModal.ts
var import_obsidian17 = require("obsidian");

// src/modals/UpsertHeaderForm.svelte
function create_if_block6(ctx) {
  let div;
  let input;
  let div_transition;
  let current;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      input = element("input");
      attr(input, "type", "text");
      attr(input, "class", "header-input svelte-p7jaux");
      attr(input, "placeholder", "Your header text");
      input.disabled = /*useFilename*/
      ctx[1];
      attr(div, "class", "row svelte-p7jaux");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      set_input_value(
        input,
        /*value*/
        ctx[0]
      );
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[5]
          ),
          listen(
            input,
            "keydown",
            /*keydown_handler*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*useFilename*/
      2) {
        input.disabled = /*useFilename*/
        ctx2[1];
      }
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        set_input_value(
          input,
          /*value*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, {}, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, {}, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (detaching && div_transition)
        div_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment18(ctx) {
  let div2;
  let t0;
  let div0;
  let label;
  let t2;
  let obsidiantoggle;
  let t3;
  let div1;
  let button0;
  let t5;
  let button1;
  let current;
  let mounted;
  let dispose;
  let if_block = !/*useFilename*/
  ctx[1] && create_if_block6(ctx);
  obsidiantoggle = new ObsidianToggle_default({
    props: {
      checked: (
        /*useFilename*/
        ctx[1]
      ),
      onClick: (
        /*func*/
        ctx[7]
      ),
      id: "useFilenameForHeader"
    }
  });
  return {
    c() {
      div2 = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      div0 = element("div");
      label = element("label");
      label.textContent = "Use file name as header";
      t2 = space();
      create_component(obsidiantoggle.$$.fragment);
      t3 = space();
      div1 = element("div");
      button0 = element("button");
      button0.textContent = "Cancel";
      t5 = space();
      button1 = element("button");
      button1.textContent = "Submit";
      attr(label, "for", "useFilenameForHeader");
      attr(div0, "class", "row svelte-p7jaux");
      attr(button1, "class", "mod-cta");
      attr(div1, "class", "modal-button-container");
      attr(div2, "class", "upsert-header-modal svelte-p7jaux");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      if (if_block)
        if_block.m(div2, null);
      append(div2, t0);
      append(div2, div0);
      append(div0, label);
      append(div0, t2);
      mount_component(obsidiantoggle, div0, null);
      append(div2, t3);
      append(div2, div1);
      append(div1, button0);
      append(div1, t5);
      append(div1, button1);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*closeModal*/
            ctx[2]
          ),
          listen(
            button1,
            "click",
            /*upsertHeader*/
            ctx[3]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*useFilename*/
      ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*useFilename*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block6(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div2, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const obsidiantoggle_changes = {};
      if (dirty & /*useFilename*/
      2)
        obsidiantoggle_changes.checked = /*useFilename*/
        ctx2[1];
      if (dirty & /*useFilename*/
      2)
        obsidiantoggle_changes.onClick = /*func*/
        ctx2[7];
      obsidiantoggle.$set(obsidiantoggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(obsidiantoggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(obsidiantoggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (if_block)
        if_block.d();
      destroy_component(obsidiantoggle);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { file } = $$props;
  let value = "";
  let useFilename = false;
  const closeModal = () => dispatch2("close");
  const upsertHeader = () => {
    const header = useFilename ? `{{${FILENAME_KEY}}}` : value || void 0;
    updateBannerData(file, { header });
    closeModal();
  };
  function input_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  const keydown_handler = (e) => e.key === "Enter" && upsertHeader();
  const func = () => {
    $$invalidate(1, useFilename = !useFilename);
  };
  $$self.$$set = ($$props2) => {
    if ("file" in $$props2)
      $$invalidate(4, file = $$props2.file);
  };
  return [
    value,
    useFilename,
    closeModal,
    upsertHeader,
    file,
    input_input_handler,
    keydown_handler,
    func
  ];
}
var UpsertHeaderForm = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment18, safe_not_equal, { file: 4 });
  }
};
var UpsertHeaderForm_default = UpsertHeaderForm;

// src/modals/UpsertHeaderModal.ts
var UpsertHeaderModal = class extends import_obsidian17.Modal {
  constructor(file) {
    super(plug.app);
    __publicField(this, "activeFile");
    __publicField(this, "component");
    __publicField(this, "off");
    this.activeFile = file;
  }
  onOpen() {
    this.titleEl.setText("What would you like to put on your header?");
    this.component = new UpsertHeaderForm_default({
      target: this.contentEl,
      props: { file: this.activeFile }
    });
    this.off = this.component.$on("close", () => this.close());
  }
  onClose() {
    this.off();
    this.component.$destroy();
  }
};

// src/commands/downloadBanner.ts
var import_obsidian18 = require("obsidian");

// src/commands/utils.ts
var URL_REGEX = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&//=]*)$/;

// src/commands/downloadBanner.ts
var hasExtension = (filename) => {
  const ext = filename.split(".").pop();
  return filename !== ext;
};
var canRunCommand = () => {
  const file = plug.app.workspace.getActiveFile();
  return !!(file && URL_REGEX.test(extractBannerDataFromFile(file).source));
};
var downloadBanner = async (source) => {
  const file = plug.app.workspace.getActiveFile();
  const src = source ?? extractBannerDataFromFile(file).source;
  try {
    const { arrayBuffer, headers } = await (0, import_obsidian18.requestUrl)(src);
    const imgName = new URL(src).pathname.split("/").pop();
    const ext = hasExtension(imgName) ? null : MIME_TYPES[headers["content-type"]][0] || null;
    const path = await plug.app.vault.getAvailablePathForAttachments(imgName, ext, file.path);
    const image = await plug.app.vault.createBinary(path, arrayBuffer);
    const link = plug.app.fileManager.generateMarkdownLink(image, file.path).slice(1);
    await updateBannerData(file, { source: link });
    new import_obsidian18.Notice(`Downloaded the banner to ${image.path} and linked the note to it!`);
  } catch (error) {
    new import_obsidian18.Notice("Couldn't download the image into the vault!");
    console.error(error);
  }
};
var downloadBanner_default = downloadBanner;

// src/commands/pasteBanner.ts
var import_obsidian19 = require("obsidian");
var canRunCommand2 = () => !!plug.app.workspace.getActiveFile();
var clipboardError = (clipboard) => {
  new import_obsidian19.Notice("Your clipboard didn't have a valid URL!");
  console.error({ clipboard });
};
var downloadBannerInstead = async () => {
  const clipboard = await navigator.clipboard.readText();
  if (URL_REGEX.test(clipboard)) {
    await downloadBanner_default(clipboard);
  } else {
    clipboardError(clipboard);
  }
};
var pasteBanner = async () => {
  const file = plug.app.workspace.getActiveFile();
  const clipboard = await navigator.clipboard.readText();
  if (URL_REGEX.test(clipboard)) {
    await updateBannerData(file, { source: clipboard });
    new import_obsidian19.Notice(`Pasted a new banner for ${file.name}!`);
  } else {
    clipboardError(clipboard);
  }
};
var pasteBanner_default = pasteBanner;

// src/commands/index.ts
var commands = [
  {
    id: "banners:upsertBanner",
    name: "Add/Change banner with local image",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!file;
      new LocalImageModal(file).open();
    }
  },
  {
    id: "banners:removeBanner",
    name: "Remove banner",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!(file && extractBannerDataFromFile(file).source);
      updateBannerData(file, {
        source: void 0,
        x: void 0,
        y: void 0
      });
    }
  },
  {
    id: "banners:pasteBanner",
    name: "Paste banner from clipboard",
    checkCallback(checking) {
      if (checking)
        return canRunCommand2();
      if (getSetting("autoDownloadPastedBanners")) {
        downloadBannerInstead();
      } else {
        pasteBanner_default();
      }
    }
  },
  {
    id: "banners:downloadBanner",
    name: "Download banner in note to vault",
    checkCallback(checking) {
      if (checking)
        return canRunCommand();
      downloadBanner_default();
    }
  },
  {
    id: "banners:lockBanner",
    name: "Lock/Unlock banner position",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!(file && extractBannerDataFromFile(file).source);
      const lock = extractBannerDataFromFile(file).lock;
      updateBannerData(file, { lock: !lock || void 0 });
    }
  },
  {
    id: "banners:upsertIcon",
    name: "Add/Change icon",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!file;
      new IconModal(file).open();
    }
  },
  {
    id: "banners:removeIcon",
    name: "Remove icon",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!(file && extractBannerDataFromFile(file).icon);
      updateBannerData(file, { icon: void 0 });
    }
  },
  {
    id: "banners:upsertHeader",
    name: "Add/Change header",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!file;
      new UpsertHeaderModal(file).open();
    }
  },
  {
    id: "banners:removeHeader",
    name: "Remove header",
    checkCallback(checking) {
      const file = plug.app.workspace.getActiveFile();
      if (checking)
        return !!(file && extractBannerDataFromFile(file).header !== void 0);
      updateBannerData(file, { header: void 0 });
    }
  }
];
var loadCommands = () => {
  for (const command of commands) {
    plug.addCommand(command);
  }
};
var commands_default = loadCommands;

// src/main.ts
var plug;
var BannersPlugin = class extends import_obsidian20.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "events");
  }
  async onload() {
    plug = this;
    this.events = new BannerEvents();
    await loadSettings();
    loadPostProcessor();
    loadExtensions();
    commands_default();
    this.events.loadEvents();
  }
  async onunload() {
    unloadAllBanners();
    unsetCssVars();
  }
};
/*! Bundled license information:

@twemoji/api/dist/twemoji.esm.js:
  (*! Copyright Twitter Inc. and other contributors. Licensed under MIT *)
*/
//# sourceMappingURL=data:application/json;base64,
